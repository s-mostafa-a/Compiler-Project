Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrLetter -> NUMBER
Rule 3     numOrLetter -> LETTER
Rule 4     numOrLetter -> <empty>
Rule 5     list -> list declaration
Rule 6     list -> declaration
Rule 7     declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 8     declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
Rule 9     declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 10    declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
Rule 11    declaration -> type LETTER varInitialization SEMICOLON
Rule 12    declaration -> type LETTER varInitialization COMA variableList SEMICOLON
Rule 13    ScopedVariableDec -> scopedSpecifier variableList SEMICOLON
Rule 14    variableList -> variableList COMA variableList
Rule 15    variableList -> varInitialization
Rule 16    varInitialization -> varForm
Rule 17    varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 18    varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
Rule 19    varForm -> numOrLetter
Rule 20    scopedSpecifier -> STATIC_KW type
Rule 21    scopedSpecifier -> type
Rule 22    type -> BOOLEAN_KW
Rule 23    type -> CHARACTER_KW
Rule 24    type -> INTEGER_KW
Rule 25    type -> CHAR_KW
Rule 26    type -> BOOL_KW
Rule 27    type -> INT_KW
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> <empty>
Rule 30    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList COMA paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> ScopedVariableDec localDeclarations
Rule 36    localDeclarations -> <empty>
Rule 37    paramId -> LETTER
Rule 38    paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET
Rule 39    statement -> phrase
Rule 40    statement -> compoundPhrase
Rule 41    statement -> selectPhrase
Rule 42    statement -> iterationPhrase
Rule 43    statement -> returnPhrase
Rule 44    statement -> continue
Rule 45    statementWithoutBracket -> phrase
Rule 46    statementWithoutBracket -> selectPhrase
Rule 47    statementWithoutBracket -> iterationPhrase
Rule 48    statementWithoutBracket -> returnPhrase
Rule 49    statementWithoutBracket -> continue
Rule 50    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 51    statementList -> statementList statement
Rule 52    statementList -> <empty>
Rule 53    phrase -> allExpression SEMICOLON
Rule 54    phrase -> SEMICOLON
Rule 55    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
Rule 56    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
Rule 57    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
Rule 58    ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE
Rule 59    ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE
Rule 60    ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE
Rule 61    ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE
Rule 62    ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
Rule 63    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 64    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 65    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 66    returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON
Rule 67    continue -> CONTINUE_KW SEMICOLON
Rule 68    allExpression -> alterable mathOp allExpression
Rule 69    allExpression -> alterable PP_OP
Rule 70    allExpression -> alterable MM_OP
Rule 71    allExpression -> eachExpression
Rule 72    mathOp -> EQ_OP
Rule 73    mathOp -> PLE_OP
Rule 74    mathOp -> MIE_OP
Rule 75    mathOp -> MUE_OP
Rule 76    mathOp -> DIE_OP
Rule 77    eachExpression -> eachExpression logicOp eachExpression
Rule 78    eachExpression -> eachExpression logicOp THEN_KW eachExpression
Rule 79    eachExpression -> logicOp eachExpression
Rule 80    eachExpression -> relExpression
Rule 81    eachExpression -> eachExpression logicOp ELSE_KW eachExpression
Rule 82    relExpression -> mathEXP compareType mathEXP
Rule 83    relExpression -> mathEXP
Rule 84    mathEXP -> mathEXP op mathEXP
Rule 85    mathEXP -> unaryExpression
Rule 86    compareType -> equal
Rule 87    compareType -> nonEqual
Rule 88    equal -> LE_REL
Rule 89    equal -> GE_REL
Rule 90    equal -> EQ_REL
Rule 91    nonEqual -> GT_REL
Rule 92    nonEqual -> LT_REL
Rule 93    nonEqual -> NEQ_REL
Rule 94    op -> PL_OP
Rule 95    op -> MI_OP
Rule 96    op -> MU_OP
Rule 97    op -> DI_OP
Rule 98    op -> PE_OP
Rule 99    unaryExpression -> unaryop unaryExpression
Rule 100   unaryExpression -> factor
Rule 101   unaryop -> MI_OP
Rule 102   unaryop -> MU_OP
Rule 103   unaryop -> QU_UOP
Rule 104   factor -> inalterable
Rule 105   factor -> alterable
Rule 106   alterable -> numOrLetter
Rule 107   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 108   alterable -> alterable LETTER
Rule 109   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 110   inalterable -> constant
Rule 111   inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 112   args -> arguments
Rule 113   args -> <empty>
Rule 114   arguments -> arguments COMA allExpression
Rule 115   arguments -> allExpression
Rule 116   constant -> CONST_KW
Rule 117   constant -> TRUE
Rule 118   constant -> FALSE
Rule 119   logicOp -> AA_LOP
Rule 120   logicOp -> OO_LOP
Rule 121   logicOp -> TIL_LOP
Rule 122   logicOp -> AND_LOP
Rule 123   logicOp -> OR_LOP

Terminals, with rules where they appear

AA_LOP               : 119
AND_LOP              : 122
BOOLEAN_KW           : 22
BOOL_KW              : 26
CHARACTER_KW         : 23
CHAR_KW              : 25
CLOSING_BRACE        : 7 9 50 58 59 60 61 62
CLOSING_BRACKET      : 18 38 107
CLOSING_PARENTHESES  : 7 8 9 10 17 55 56 57 63 109 111
COLON                : 17
COMA                 : 12 14 33 114
COMEBACK_KW          : 64
COMMENT              : 
CONST_KW             : 116
CONTINUE_KW          : 67
DIE_OP               : 76
DI_OP                : 97
ELSE_KW              : 81
EQ_OP                : 72
EQ_REL               : 90
FALSE                : 118
GE_REL               : 89
GIVEBACK_KW          : 65 66
GT_REL               : 91
IF_KW                : 55 56 57
INTEGER_KW           : 24
INT_KW               : 27
LETTER               : 3 7 8 9 10 11 12 18 37 38 108 111
LE_REL               : 88
LT_REL               : 92
MIE_OP               : 74
MI_OP                : 95 101
MM_OP                : 70
MUE_OP               : 75
MU_OP                : 96 102
NEQ_REL              : 93
NUMBER               : 2 18
OO_LOP               : 120
OPENING_BRACE        : 7 9 50 58 59 60 61 62
OPENING_BRACKET      : 18 38 107
OPENING_PARENTHESES  : 7 8 9 10 17 55 56 57 63 109 111
OR_LOP               : 123
OTHER_KW             : 56 60 61 62 62
PE_OP                : 98
PLE_OP               : 73
PL_OP                : 94
PP_OP                : 69
QU_UOP               : 103
SEMICOLON            : 11 12 13 30 53 54 64 65 66 67
STATIC_KW            : 20
THEN_KW              : 78
TILL_KW              : 63
TIL_LOP              : 121
TRUE                 : 117
VOID_KW              : 7 8
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 35 58
allExpression        : 53 65 68 107 109 114 115
alterable            : 68 69 70 105 107 108
args                 : 111
arguments            : 112 114
compareType          : 82
compoundPhrase       : 40
constant             : 110
continue             : 44 49
declaration          : 5 6
eachExpression       : 17 55 56 57 63 71 77 77 78 78 79 81 81
equal                : 86
factor               : 100
ifBodyWithBracket    : 57
inalterable          : 104
iterationPhrase      : 42 47
list                 : 1 5
listOfParameters     : 28 30
localDeclarations    : 7 9 35 50 58
logicOp              : 77 78 79 81
mathEXP              : 82 82 83 84 84
mathOp               : 68
nonEqual             : 87
numOrLetter          : 19 66 106
op                   : 84
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 7 8 9 10
phrase               : 39 45
program              : 0
relExpression        : 80
returnPhrase         : 43 48
scopedSpecifier      : 13
selectPhrase         : 41 46
statement            : 51 56 59 59 60 60 60 61 61 61 62 62 62 62 63
statementList        : 7 9 50 51 58 59
statementWithoutBracket : 8 10 55 56
type                 : 9 10 11 12 20 21 32
unaryExpression      : 85 99
unaryop              : 99
varForm              : 16 17
varInitialization    : 11 12 15
variableList         : 12 13 14 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (5) list -> . list declaration
    (6) list -> . declaration
    (7) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (9) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> . type LETTER varInitialization SEMICOLON
    (12) declaration -> . type LETTER varInitialization COMA variableList SEMICOLON
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    VOID_KW         shift and go to state 4
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    program                        shift and go to state 1
    list                           shift and go to state 2
    declaration                    shift and go to state 3
    type                           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> list .
    (5) list -> list . declaration
    (7) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (9) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> . type LETTER varInitialization SEMICOLON
    (12) declaration -> . type LETTER varInitialization COMA variableList SEMICOLON
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 4
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    declaration                    shift and go to state 12
    type                           shift and go to state 5

state 3

    (6) list -> declaration .

    VOID_KW         reduce using rule 6 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 6 (list -> declaration .)
    CHARACTER_KW    reduce using rule 6 (list -> declaration .)
    INTEGER_KW      reduce using rule 6 (list -> declaration .)
    CHAR_KW         reduce using rule 6 (list -> declaration .)
    BOOL_KW         reduce using rule 6 (list -> declaration .)
    INT_KW          reduce using rule 6 (list -> declaration .)
    $end            reduce using rule 6 (list -> declaration .)


state 4

    (7) declaration -> VOID_KW . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket

    LETTER          shift and go to state 13


state 5

    (9) declaration -> type . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> type . LETTER varInitialization SEMICOLON
    (12) declaration -> type . LETTER varInitialization COMA variableList SEMICOLON

    LETTER          shift and go to state 14


state 6

    (22) type -> BOOLEAN_KW .

    LETTER          reduce using rule 22 (type -> BOOLEAN_KW .)
    NUMBER          reduce using rule 22 (type -> BOOLEAN_KW .)
    SEMICOLON       reduce using rule 22 (type -> BOOLEAN_KW .)
    COMA            reduce using rule 22 (type -> BOOLEAN_KW .)
    COLON           reduce using rule 22 (type -> BOOLEAN_KW .)


state 7

    (23) type -> CHARACTER_KW .

    LETTER          reduce using rule 23 (type -> CHARACTER_KW .)
    NUMBER          reduce using rule 23 (type -> CHARACTER_KW .)
    SEMICOLON       reduce using rule 23 (type -> CHARACTER_KW .)
    COMA            reduce using rule 23 (type -> CHARACTER_KW .)
    COLON           reduce using rule 23 (type -> CHARACTER_KW .)


state 8

    (24) type -> INTEGER_KW .

    LETTER          reduce using rule 24 (type -> INTEGER_KW .)
    NUMBER          reduce using rule 24 (type -> INTEGER_KW .)
    SEMICOLON       reduce using rule 24 (type -> INTEGER_KW .)
    COMA            reduce using rule 24 (type -> INTEGER_KW .)
    COLON           reduce using rule 24 (type -> INTEGER_KW .)


state 9

    (25) type -> CHAR_KW .

    LETTER          reduce using rule 25 (type -> CHAR_KW .)
    NUMBER          reduce using rule 25 (type -> CHAR_KW .)
    SEMICOLON       reduce using rule 25 (type -> CHAR_KW .)
    COMA            reduce using rule 25 (type -> CHAR_KW .)
    COLON           reduce using rule 25 (type -> CHAR_KW .)


state 10

    (26) type -> BOOL_KW .

    LETTER          reduce using rule 26 (type -> BOOL_KW .)
    NUMBER          reduce using rule 26 (type -> BOOL_KW .)
    SEMICOLON       reduce using rule 26 (type -> BOOL_KW .)
    COMA            reduce using rule 26 (type -> BOOL_KW .)
    COLON           reduce using rule 26 (type -> BOOL_KW .)


state 11

    (27) type -> INT_KW .

    LETTER          reduce using rule 27 (type -> INT_KW .)
    NUMBER          reduce using rule 27 (type -> INT_KW .)
    SEMICOLON       reduce using rule 27 (type -> INT_KW .)
    COMA            reduce using rule 27 (type -> INT_KW .)
    COLON           reduce using rule 27 (type -> INT_KW .)


state 12

    (5) list -> list declaration .

    VOID_KW         reduce using rule 5 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> list declaration .)
    INTEGER_KW      reduce using rule 5 (list -> list declaration .)
    CHAR_KW         reduce using rule 5 (list -> list declaration .)
    BOOL_KW         reduce using rule 5 (list -> list declaration .)
    INT_KW          reduce using rule 5 (list -> list declaration .)
    $end            reduce using rule 5 (list -> list declaration .)


state 13

    (7) declaration -> VOID_KW LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket

    OPENING_PARENTHESES shift and go to state 15


state 14

    (9) declaration -> type LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> type LETTER . varInitialization SEMICOLON
    (12) declaration -> type LETTER . varInitialization COMA variableList SEMICOLON
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    OPENING_PARENTHESES shift and go to state 17
    LETTER          shift and go to state 16
    NUMBER          shift and go to state 20
    COLON           reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

    varInitialization              shift and go to state 18
    varForm                        shift and go to state 19
    numOrLetter                    shift and go to state 21

state 15

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statementWithoutBracket
    (28) parameter -> . listOfParameters
    (29) parameter -> .
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (32) paramTypeList -> . type paramList
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> .)
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    parameter                      shift and go to state 22
    listOfParameters               shift and go to state 23
    paramTypeList                  shift and go to state 24
    type                           shift and go to state 25

state 16

    (18) varForm -> LETTER . OPENING_BRACKET NUMBER CLOSING_BRACKET
    (3) numOrLetter -> LETTER .

    OPENING_BRACKET shift and go to state 26
    COLON           reduce using rule 3 (numOrLetter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrLetter -> LETTER .)
    COMA            reduce using rule 3 (numOrLetter -> LETTER .)


state 17

    (9) declaration -> type LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statementWithoutBracket
    (28) parameter -> . listOfParameters
    (29) parameter -> .
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (32) paramTypeList -> . type paramList
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> .)
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    type                           shift and go to state 25
    parameter                      shift and go to state 27
    listOfParameters               shift and go to state 23
    paramTypeList                  shift and go to state 24

state 18

    (11) declaration -> type LETTER varInitialization . SEMICOLON
    (12) declaration -> type LETTER varInitialization . COMA variableList SEMICOLON

    SEMICOLON       shift and go to state 28
    COMA            shift and go to state 29


state 19

    (16) varInitialization -> varForm .
    (17) varInitialization -> varForm . COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    SEMICOLON       reduce using rule 16 (varInitialization -> varForm .)
    COMA            reduce using rule 16 (varInitialization -> varForm .)
    COLON           shift and go to state 30


state 20

    (2) numOrLetter -> NUMBER .

    COLON           reduce using rule 2 (numOrLetter -> NUMBER .)
    SEMICOLON       reduce using rule 2 (numOrLetter -> NUMBER .)
    COMA            reduce using rule 2 (numOrLetter -> NUMBER .)
    PP_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    MM_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    OPENING_BRACKET reduce using rule 2 (numOrLetter -> NUMBER .)
    LETTER          reduce using rule 2 (numOrLetter -> NUMBER .)
    EQ_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    PLE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    MIE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    MUE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    DIE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    PL_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    MI_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    MU_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    DI_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    PE_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    LE_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    GE_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    EQ_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    GT_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    LT_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    NEQ_REL         reduce using rule 2 (numOrLetter -> NUMBER .)
    AA_LOP          reduce using rule 2 (numOrLetter -> NUMBER .)
    OO_LOP          reduce using rule 2 (numOrLetter -> NUMBER .)
    TIL_LOP         reduce using rule 2 (numOrLetter -> NUMBER .)
    AND_LOP         reduce using rule 2 (numOrLetter -> NUMBER .)
    OR_LOP          reduce using rule 2 (numOrLetter -> NUMBER .)
    CLOSING_PARENTHESES reduce using rule 2 (numOrLetter -> NUMBER .)
    CLOSING_BRACKET reduce using rule 2 (numOrLetter -> NUMBER .)


state 21

    (19) varForm -> numOrLetter .

    COLON           reduce using rule 19 (varForm -> numOrLetter .)
    SEMICOLON       reduce using rule 19 (varForm -> numOrLetter .)
    COMA            reduce using rule 19 (varForm -> numOrLetter .)


state 22

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statementWithoutBracket

    CLOSING_PARENTHESES shift and go to state 31


state 23

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 32


state 24

    (31) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 31 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 31 (listOfParameters -> paramTypeList .)


state 25

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList COMA paramId
    (34) paramList -> . paramId
    (37) paramId -> . LETTER
    (38) paramId -> . LETTER OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 35

    paramList                      shift and go to state 33
    paramId                        shift and go to state 34

state 26

    (18) varForm -> LETTER OPENING_BRACKET . NUMBER CLOSING_BRACKET

    NUMBER          shift and go to state 36


state 27

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statementWithoutBracket

    CLOSING_PARENTHESES shift and go to state 37


state 28

    (11) declaration -> type LETTER varInitialization SEMICOLON .

    VOID_KW         reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    BOOLEAN_KW      reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    CHARACTER_KW    reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    INTEGER_KW      reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    CHAR_KW         reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    BOOL_KW         reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    INT_KW          reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    $end            reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)


state 29

    (12) declaration -> type LETTER varInitialization COMA . variableList SEMICOLON
    (14) variableList -> . variableList COMA variableList
    (15) variableList -> . varInitialization
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    LETTER          shift and go to state 16
    NUMBER          shift and go to state 20
    COLON           reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

    varInitialization              shift and go to state 38
    variableList                   shift and go to state 39
    varForm                        shift and go to state 19
    numOrLetter                    shift and go to state 21

state 30

    (17) varInitialization -> varForm COLON . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 40


state 31

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statementWithoutBracket
    (45) statementWithoutBracket -> . phrase
    (46) statementWithoutBracket -> . selectPhrase
    (47) statementWithoutBracket -> . iterationPhrase
    (48) statementWithoutBracket -> . returnPhrase
    (49) statementWithoutBracket -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    OPENING_BRACE   shift and go to state 43
    SEMICOLON       shift and go to state 51
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statementWithoutBracket        shift and go to state 44
    phrase                         shift and go to state 45
    selectPhrase                   shift and go to state 46
    iterationPhrase                shift and go to state 47
    returnPhrase                   shift and go to state 48
    continue                       shift and go to state 49
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 32

    (30) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (32) paramTypeList -> . type paramList
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    paramTypeList                  shift and go to state 79
    type                           shift and go to state 25

state 33

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . COMA paramId

    SEMICOLON       reduce using rule 32 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 32 (paramTypeList -> type paramList .)
    COMA            shift and go to state 80


state 34

    (34) paramList -> paramId .

    COMA            reduce using rule 34 (paramList -> paramId .)
    SEMICOLON       reduce using rule 34 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 34 (paramList -> paramId .)


state 35

    (37) paramId -> LETTER .
    (38) paramId -> LETTER . OPENING_BRACKET CLOSING_BRACKET

    COMA            reduce using rule 37 (paramId -> LETTER .)
    SEMICOLON       reduce using rule 37 (paramId -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> LETTER .)
    OPENING_BRACKET shift and go to state 81


state 36

    (18) varForm -> LETTER OPENING_BRACKET NUMBER . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 82


state 37

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statementWithoutBracket
    (45) statementWithoutBracket -> . phrase
    (46) statementWithoutBracket -> . selectPhrase
    (47) statementWithoutBracket -> . iterationPhrase
    (48) statementWithoutBracket -> . returnPhrase
    (49) statementWithoutBracket -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    OPENING_BRACE   shift and go to state 83
    SEMICOLON       shift and go to state 51
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statementWithoutBracket        shift and go to state 84
    phrase                         shift and go to state 45
    selectPhrase                   shift and go to state 46
    iterationPhrase                shift and go to state 47
    returnPhrase                   shift and go to state 48
    continue                       shift and go to state 49
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 38

    (15) variableList -> varInitialization .

    SEMICOLON       reduce using rule 15 (variableList -> varInitialization .)
    COMA            reduce using rule 15 (variableList -> varInitialization .)


state 39

    (12) declaration -> type LETTER varInitialization COMA variableList . SEMICOLON
    (14) variableList -> variableList . COMA variableList

    SEMICOLON       shift and go to state 86
    COMA            shift and go to state 85


state 40

    (17) varInitialization -> varForm COLON OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 87
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 41

    (3) numOrLetter -> LETTER .
    (111) inalterable -> LETTER . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PP_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MM_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    OPENING_BRACKET reduce using rule 3 (numOrLetter -> LETTER .)
    LETTER          reduce using rule 3 (numOrLetter -> LETTER .)
    EQ_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    PLE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    MIE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    MUE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    DIE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    PL_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MI_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MU_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    DI_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    PE_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    LE_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    GE_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    EQ_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    GT_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    LT_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    NEQ_REL         reduce using rule 3 (numOrLetter -> LETTER .)
    AA_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    OO_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    TIL_LOP         reduce using rule 3 (numOrLetter -> LETTER .)
    AND_LOP         reduce using rule 3 (numOrLetter -> LETTER .)
    OR_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrLetter -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 3 (numOrLetter -> LETTER .)
    COMA            reduce using rule 3 (numOrLetter -> LETTER .)
    CLOSING_BRACKET reduce using rule 3 (numOrLetter -> LETTER .)
    OPENING_PARENTHESES shift and go to state 90


state 42

    (109) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    allExpression                  shift and go to state 91
    alterable                      shift and go to state 59
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 43

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    NUMBER          reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    PP_OP           reduce using rule 36 (localDeclarations -> .)
    MM_OP           reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACKET reduce using rule 36 (localDeclarations -> .)
    EQ_OP           reduce using rule 36 (localDeclarations -> .)
    PLE_OP          reduce using rule 36 (localDeclarations -> .)
    MIE_OP          reduce using rule 36 (localDeclarations -> .)
    MUE_OP          reduce using rule 36 (localDeclarations -> .)
    DIE_OP          reduce using rule 36 (localDeclarations -> .)
    PL_OP           reduce using rule 36 (localDeclarations -> .)
    DI_OP           reduce using rule 36 (localDeclarations -> .)
    PE_OP           reduce using rule 36 (localDeclarations -> .)
    LE_REL          reduce using rule 36 (localDeclarations -> .)
    GE_REL          reduce using rule 36 (localDeclarations -> .)
    EQ_REL          reduce using rule 36 (localDeclarations -> .)
    GT_REL          reduce using rule 36 (localDeclarations -> .)
    LT_REL          reduce using rule 36 (localDeclarations -> .)
    NEQ_REL         reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 95
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    localDeclarations              shift and go to state 92
    ScopedVariableDec              shift and go to state 93
    scopedSpecifier                shift and go to state 94
    type                           shift and go to state 96

state 44

    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .

    VOID_KW         reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOLEAN_KW      reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHARACTER_KW    reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INTEGER_KW      reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHAR_KW         reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOL_KW         reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INT_KW          reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    $end            reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)


state 45

    (45) statementWithoutBracket -> phrase .

    VOID_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    BOOLEAN_KW      reduce using rule 45 (statementWithoutBracket -> phrase .)
    CHARACTER_KW    reduce using rule 45 (statementWithoutBracket -> phrase .)
    INTEGER_KW      reduce using rule 45 (statementWithoutBracket -> phrase .)
    CHAR_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    BOOL_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    INT_KW          reduce using rule 45 (statementWithoutBracket -> phrase .)
    $end            reduce using rule 45 (statementWithoutBracket -> phrase .)
    OTHER_KW        reduce using rule 45 (statementWithoutBracket -> phrase .)
    CLOSING_BRACE   reduce using rule 45 (statementWithoutBracket -> phrase .)
    SEMICOLON       reduce using rule 45 (statementWithoutBracket -> phrase .)
    OPENING_BRACE   reduce using rule 45 (statementWithoutBracket -> phrase .)
    IF_KW           reduce using rule 45 (statementWithoutBracket -> phrase .)
    TILL_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    COMEBACK_KW     reduce using rule 45 (statementWithoutBracket -> phrase .)
    GIVEBACK_KW     reduce using rule 45 (statementWithoutBracket -> phrase .)
    CONTINUE_KW     reduce using rule 45 (statementWithoutBracket -> phrase .)
    NUMBER          reduce using rule 45 (statementWithoutBracket -> phrase .)
    LETTER          reduce using rule 45 (statementWithoutBracket -> phrase .)
    AA_LOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    OO_LOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    TIL_LOP         reduce using rule 45 (statementWithoutBracket -> phrase .)
    AND_LOP         reduce using rule 45 (statementWithoutBracket -> phrase .)
    OR_LOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    MI_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    MU_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    QU_UOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    OPENING_PARENTHESES reduce using rule 45 (statementWithoutBracket -> phrase .)
    CONST_KW        reduce using rule 45 (statementWithoutBracket -> phrase .)
    TRUE            reduce using rule 45 (statementWithoutBracket -> phrase .)
    FALSE           reduce using rule 45 (statementWithoutBracket -> phrase .)
    PP_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    MM_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    OPENING_BRACKET reduce using rule 45 (statementWithoutBracket -> phrase .)
    EQ_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    PLE_OP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    MIE_OP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    MUE_OP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    DIE_OP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    PL_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    DI_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    PE_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    LE_REL          reduce using rule 45 (statementWithoutBracket -> phrase .)
    GE_REL          reduce using rule 45 (statementWithoutBracket -> phrase .)
    EQ_REL          reduce using rule 45 (statementWithoutBracket -> phrase .)
    GT_REL          reduce using rule 45 (statementWithoutBracket -> phrase .)
    LT_REL          reduce using rule 45 (statementWithoutBracket -> phrase .)
    NEQ_REL         reduce using rule 45 (statementWithoutBracket -> phrase .)


state 46

    (46) statementWithoutBracket -> selectPhrase .

    VOID_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CHARACTER_KW    reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    INTEGER_KW      reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CHAR_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    BOOL_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    INT_KW          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    $end            reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OTHER_KW        reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CLOSING_BRACE   reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    SEMICOLON       reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OPENING_BRACE   reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    IF_KW           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    TILL_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    COMEBACK_KW     reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CONTINUE_KW     reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    NUMBER          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    LETTER          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    AA_LOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OO_LOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    TIL_LOP         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    AND_LOP         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OR_LOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MI_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MU_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    QU_UOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CONST_KW        reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    TRUE            reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    FALSE           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    PP_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MM_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OPENING_BRACKET reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    EQ_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    PLE_OP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MIE_OP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MUE_OP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    DIE_OP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    PL_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    DI_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    PE_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    LE_REL          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    GE_REL          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    EQ_REL          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    GT_REL          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    LT_REL          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    NEQ_REL         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)


state 47

    (47) statementWithoutBracket -> iterationPhrase .

    VOID_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    INTEGER_KW      reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CHAR_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    BOOL_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    INT_KW          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    $end            reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OTHER_KW        reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CLOSING_BRACE   reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    SEMICOLON       reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    IF_KW           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    TILL_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    NUMBER          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    LETTER          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    AA_LOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OO_LOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    TIL_LOP         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    AND_LOP         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OR_LOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MI_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MU_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    QU_UOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CONST_KW        reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    TRUE            reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    FALSE           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    PP_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MM_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OPENING_BRACKET reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    EQ_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    PLE_OP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MIE_OP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MUE_OP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    DIE_OP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    PL_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    DI_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    PE_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    LE_REL          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    GE_REL          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    EQ_REL          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    GT_REL          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    LT_REL          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    NEQ_REL         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)


state 48

    (48) statementWithoutBracket -> returnPhrase .

    VOID_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CHARACTER_KW    reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    INTEGER_KW      reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CHAR_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    BOOL_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    INT_KW          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    $end            reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OTHER_KW        reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CLOSING_BRACE   reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    SEMICOLON       reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OPENING_BRACE   reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    IF_KW           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    TILL_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    COMEBACK_KW     reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CONTINUE_KW     reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    NUMBER          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    LETTER          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    AA_LOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OO_LOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    TIL_LOP         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    AND_LOP         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OR_LOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MI_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MU_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    QU_UOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CONST_KW        reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    TRUE            reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    FALSE           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    PP_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MM_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OPENING_BRACKET reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    EQ_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    PLE_OP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MIE_OP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MUE_OP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    DIE_OP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    PL_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    DI_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    PE_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    LE_REL          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    GE_REL          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    EQ_REL          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    GT_REL          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    LT_REL          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    NEQ_REL         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)


state 49

    (49) statementWithoutBracket -> continue .

    VOID_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    BOOLEAN_KW      reduce using rule 49 (statementWithoutBracket -> continue .)
    CHARACTER_KW    reduce using rule 49 (statementWithoutBracket -> continue .)
    INTEGER_KW      reduce using rule 49 (statementWithoutBracket -> continue .)
    CHAR_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    BOOL_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    INT_KW          reduce using rule 49 (statementWithoutBracket -> continue .)
    $end            reduce using rule 49 (statementWithoutBracket -> continue .)
    OTHER_KW        reduce using rule 49 (statementWithoutBracket -> continue .)
    CLOSING_BRACE   reduce using rule 49 (statementWithoutBracket -> continue .)
    SEMICOLON       reduce using rule 49 (statementWithoutBracket -> continue .)
    OPENING_BRACE   reduce using rule 49 (statementWithoutBracket -> continue .)
    IF_KW           reduce using rule 49 (statementWithoutBracket -> continue .)
    TILL_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    COMEBACK_KW     reduce using rule 49 (statementWithoutBracket -> continue .)
    GIVEBACK_KW     reduce using rule 49 (statementWithoutBracket -> continue .)
    CONTINUE_KW     reduce using rule 49 (statementWithoutBracket -> continue .)
    NUMBER          reduce using rule 49 (statementWithoutBracket -> continue .)
    LETTER          reduce using rule 49 (statementWithoutBracket -> continue .)
    AA_LOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    OO_LOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    TIL_LOP         reduce using rule 49 (statementWithoutBracket -> continue .)
    AND_LOP         reduce using rule 49 (statementWithoutBracket -> continue .)
    OR_LOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    MI_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    MU_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    QU_UOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    OPENING_PARENTHESES reduce using rule 49 (statementWithoutBracket -> continue .)
    CONST_KW        reduce using rule 49 (statementWithoutBracket -> continue .)
    TRUE            reduce using rule 49 (statementWithoutBracket -> continue .)
    FALSE           reduce using rule 49 (statementWithoutBracket -> continue .)
    PP_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    MM_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    OPENING_BRACKET reduce using rule 49 (statementWithoutBracket -> continue .)
    EQ_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    PLE_OP          reduce using rule 49 (statementWithoutBracket -> continue .)
    MIE_OP          reduce using rule 49 (statementWithoutBracket -> continue .)
    MUE_OP          reduce using rule 49 (statementWithoutBracket -> continue .)
    DIE_OP          reduce using rule 49 (statementWithoutBracket -> continue .)
    PL_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    DI_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    PE_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    LE_REL          reduce using rule 49 (statementWithoutBracket -> continue .)
    GE_REL          reduce using rule 49 (statementWithoutBracket -> continue .)
    EQ_REL          reduce using rule 49 (statementWithoutBracket -> continue .)
    GT_REL          reduce using rule 49 (statementWithoutBracket -> continue .)
    LT_REL          reduce using rule 49 (statementWithoutBracket -> continue .)
    NEQ_REL         reduce using rule 49 (statementWithoutBracket -> continue .)


state 50

    (53) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 97


state 51

    (54) phrase -> SEMICOLON .

    VOID_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 54 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 54 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 54 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 54 (phrase -> SEMICOLON .)
    $end            reduce using rule 54 (phrase -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 54 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 54 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 54 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 54 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 54 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 54 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 54 (phrase -> SEMICOLON .)
    NUMBER          reduce using rule 54 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 54 (phrase -> SEMICOLON .)
    AA_LOP          reduce using rule 54 (phrase -> SEMICOLON .)
    OO_LOP          reduce using rule 54 (phrase -> SEMICOLON .)
    TIL_LOP         reduce using rule 54 (phrase -> SEMICOLON .)
    AND_LOP         reduce using rule 54 (phrase -> SEMICOLON .)
    OR_LOP          reduce using rule 54 (phrase -> SEMICOLON .)
    MI_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    MU_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    QU_UOP          reduce using rule 54 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 54 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 54 (phrase -> SEMICOLON .)
    TRUE            reduce using rule 54 (phrase -> SEMICOLON .)
    FALSE           reduce using rule 54 (phrase -> SEMICOLON .)
    PP_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    MM_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    OPENING_BRACKET reduce using rule 54 (phrase -> SEMICOLON .)
    EQ_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    PLE_OP          reduce using rule 54 (phrase -> SEMICOLON .)
    MIE_OP          reduce using rule 54 (phrase -> SEMICOLON .)
    MUE_OP          reduce using rule 54 (phrase -> SEMICOLON .)
    DIE_OP          reduce using rule 54 (phrase -> SEMICOLON .)
    PL_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    DI_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    PE_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    LE_REL          reduce using rule 54 (phrase -> SEMICOLON .)
    GE_REL          reduce using rule 54 (phrase -> SEMICOLON .)
    EQ_REL          reduce using rule 54 (phrase -> SEMICOLON .)
    GT_REL          reduce using rule 54 (phrase -> SEMICOLON .)
    LT_REL          reduce using rule 54 (phrase -> SEMICOLON .)
    NEQ_REL         reduce using rule 54 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 54 (phrase -> SEMICOLON .)


state 52

    (55) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket

    OPENING_PARENTHESES shift and go to state 98


state 53

    (71) allExpression -> eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    SEMICOLON       reduce using rule 71 (allExpression -> eachExpression .)
    CLOSING_PARENTHESES reduce using rule 71 (allExpression -> eachExpression .)
    COMA            reduce using rule 71 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 71 (allExpression -> eachExpression .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

    logicOp                        shift and go to state 99

state 54

    (63) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 100


state 55

    (64) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 101


state 56

    (65) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (66) returnPhrase -> GIVEBACK_KW . numOrLetter SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    allExpression                  shift and go to state 102
    numOrLetter                    shift and go to state 103
    alterable                      shift and go to state 59
    eachExpression                 shift and go to state 53
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 57

    (106) alterable -> numOrLetter .

    PP_OP           reduce using rule 106 (alterable -> numOrLetter .)
    MM_OP           reduce using rule 106 (alterable -> numOrLetter .)
    OPENING_BRACKET reduce using rule 106 (alterable -> numOrLetter .)
    LETTER          reduce using rule 106 (alterable -> numOrLetter .)
    EQ_OP           reduce using rule 106 (alterable -> numOrLetter .)
    PLE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    MIE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    MUE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    DIE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    PL_OP           reduce using rule 106 (alterable -> numOrLetter .)
    MI_OP           reduce using rule 106 (alterable -> numOrLetter .)
    MU_OP           reduce using rule 106 (alterable -> numOrLetter .)
    DI_OP           reduce using rule 106 (alterable -> numOrLetter .)
    PE_OP           reduce using rule 106 (alterable -> numOrLetter .)
    LE_REL          reduce using rule 106 (alterable -> numOrLetter .)
    GE_REL          reduce using rule 106 (alterable -> numOrLetter .)
    EQ_REL          reduce using rule 106 (alterable -> numOrLetter .)
    GT_REL          reduce using rule 106 (alterable -> numOrLetter .)
    LT_REL          reduce using rule 106 (alterable -> numOrLetter .)
    NEQ_REL         reduce using rule 106 (alterable -> numOrLetter .)
    AA_LOP          reduce using rule 106 (alterable -> numOrLetter .)
    OO_LOP          reduce using rule 106 (alterable -> numOrLetter .)
    TIL_LOP         reduce using rule 106 (alterable -> numOrLetter .)
    AND_LOP         reduce using rule 106 (alterable -> numOrLetter .)
    OR_LOP          reduce using rule 106 (alterable -> numOrLetter .)
    SEMICOLON       reduce using rule 106 (alterable -> numOrLetter .)
    CLOSING_PARENTHESES reduce using rule 106 (alterable -> numOrLetter .)
    COMA            reduce using rule 106 (alterable -> numOrLetter .)
    CLOSING_BRACKET reduce using rule 106 (alterable -> numOrLetter .)


state 58

    (67) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 104


state 59

    (68) allExpression -> alterable . mathOp allExpression
    (69) allExpression -> alterable . PP_OP
    (70) allExpression -> alterable . MM_OP
    (107) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> alterable . LETTER
    (105) factor -> alterable .
    (72) mathOp -> . EQ_OP
    (73) mathOp -> . PLE_OP
    (74) mathOp -> . MIE_OP
    (75) mathOp -> . MUE_OP
    (76) mathOp -> . DIE_OP

    PP_OP           shift and go to state 106
    MM_OP           shift and go to state 107
    OPENING_BRACKET shift and go to state 108
    LETTER          shift and go to state 109
    PL_OP           reduce using rule 105 (factor -> alterable .)
    MI_OP           reduce using rule 105 (factor -> alterable .)
    MU_OP           reduce using rule 105 (factor -> alterable .)
    DI_OP           reduce using rule 105 (factor -> alterable .)
    PE_OP           reduce using rule 105 (factor -> alterable .)
    LE_REL          reduce using rule 105 (factor -> alterable .)
    GE_REL          reduce using rule 105 (factor -> alterable .)
    EQ_REL          reduce using rule 105 (factor -> alterable .)
    GT_REL          reduce using rule 105 (factor -> alterable .)
    LT_REL          reduce using rule 105 (factor -> alterable .)
    NEQ_REL         reduce using rule 105 (factor -> alterable .)
    AA_LOP          reduce using rule 105 (factor -> alterable .)
    OO_LOP          reduce using rule 105 (factor -> alterable .)
    TIL_LOP         reduce using rule 105 (factor -> alterable .)
    AND_LOP         reduce using rule 105 (factor -> alterable .)
    OR_LOP          reduce using rule 105 (factor -> alterable .)
    SEMICOLON       reduce using rule 105 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 105 (factor -> alterable .)
    COMA            reduce using rule 105 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 105 (factor -> alterable .)
    EQ_OP           shift and go to state 110
    PLE_OP          shift and go to state 111
    MIE_OP          shift and go to state 112
    MUE_OP          shift and go to state 113
    DIE_OP          shift and go to state 114

    mathOp                         shift and go to state 105

state 60

    (79) eachExpression -> logicOp . eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    logicOp                        shift and go to state 60
    eachExpression                 shift and go to state 115
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 61

    (80) eachExpression -> relExpression .

    AA_LOP          reduce using rule 80 (eachExpression -> relExpression .)
    OO_LOP          reduce using rule 80 (eachExpression -> relExpression .)
    TIL_LOP         reduce using rule 80 (eachExpression -> relExpression .)
    AND_LOP         reduce using rule 80 (eachExpression -> relExpression .)
    OR_LOP          reduce using rule 80 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 80 (eachExpression -> relExpression .)
    CLOSING_PARENTHESES reduce using rule 80 (eachExpression -> relExpression .)
    COMA            reduce using rule 80 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 80 (eachExpression -> relExpression .)


state 62

    (119) logicOp -> AA_LOP .

    AA_LOP          reduce using rule 119 (logicOp -> AA_LOP .)
    OO_LOP          reduce using rule 119 (logicOp -> AA_LOP .)
    TIL_LOP         reduce using rule 119 (logicOp -> AA_LOP .)
    AND_LOP         reduce using rule 119 (logicOp -> AA_LOP .)
    OR_LOP          reduce using rule 119 (logicOp -> AA_LOP .)
    MI_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    MU_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    QU_UOP          reduce using rule 119 (logicOp -> AA_LOP .)
    OPENING_PARENTHESES reduce using rule 119 (logicOp -> AA_LOP .)
    LETTER          reduce using rule 119 (logicOp -> AA_LOP .)
    CONST_KW        reduce using rule 119 (logicOp -> AA_LOP .)
    TRUE            reduce using rule 119 (logicOp -> AA_LOP .)
    FALSE           reduce using rule 119 (logicOp -> AA_LOP .)
    NUMBER          reduce using rule 119 (logicOp -> AA_LOP .)
    PL_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    DI_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    PE_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    LE_REL          reduce using rule 119 (logicOp -> AA_LOP .)
    GE_REL          reduce using rule 119 (logicOp -> AA_LOP .)
    EQ_REL          reduce using rule 119 (logicOp -> AA_LOP .)
    GT_REL          reduce using rule 119 (logicOp -> AA_LOP .)
    LT_REL          reduce using rule 119 (logicOp -> AA_LOP .)
    NEQ_REL         reduce using rule 119 (logicOp -> AA_LOP .)
    OPENING_BRACKET reduce using rule 119 (logicOp -> AA_LOP .)
    SEMICOLON       reduce using rule 119 (logicOp -> AA_LOP .)
    CLOSING_PARENTHESES reduce using rule 119 (logicOp -> AA_LOP .)
    THEN_KW         reduce using rule 119 (logicOp -> AA_LOP .)
    ELSE_KW         reduce using rule 119 (logicOp -> AA_LOP .)
    COMA            reduce using rule 119 (logicOp -> AA_LOP .)
    CLOSING_BRACKET reduce using rule 119 (logicOp -> AA_LOP .)


state 63

    (120) logicOp -> OO_LOP .

    AA_LOP          reduce using rule 120 (logicOp -> OO_LOP .)
    OO_LOP          reduce using rule 120 (logicOp -> OO_LOP .)
    TIL_LOP         reduce using rule 120 (logicOp -> OO_LOP .)
    AND_LOP         reduce using rule 120 (logicOp -> OO_LOP .)
    OR_LOP          reduce using rule 120 (logicOp -> OO_LOP .)
    MI_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    MU_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    QU_UOP          reduce using rule 120 (logicOp -> OO_LOP .)
    OPENING_PARENTHESES reduce using rule 120 (logicOp -> OO_LOP .)
    LETTER          reduce using rule 120 (logicOp -> OO_LOP .)
    CONST_KW        reduce using rule 120 (logicOp -> OO_LOP .)
    TRUE            reduce using rule 120 (logicOp -> OO_LOP .)
    FALSE           reduce using rule 120 (logicOp -> OO_LOP .)
    NUMBER          reduce using rule 120 (logicOp -> OO_LOP .)
    PL_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    DI_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    PE_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    LE_REL          reduce using rule 120 (logicOp -> OO_LOP .)
    GE_REL          reduce using rule 120 (logicOp -> OO_LOP .)
    EQ_REL          reduce using rule 120 (logicOp -> OO_LOP .)
    GT_REL          reduce using rule 120 (logicOp -> OO_LOP .)
    LT_REL          reduce using rule 120 (logicOp -> OO_LOP .)
    NEQ_REL         reduce using rule 120 (logicOp -> OO_LOP .)
    OPENING_BRACKET reduce using rule 120 (logicOp -> OO_LOP .)
    SEMICOLON       reduce using rule 120 (logicOp -> OO_LOP .)
    CLOSING_PARENTHESES reduce using rule 120 (logicOp -> OO_LOP .)
    THEN_KW         reduce using rule 120 (logicOp -> OO_LOP .)
    ELSE_KW         reduce using rule 120 (logicOp -> OO_LOP .)
    COMA            reduce using rule 120 (logicOp -> OO_LOP .)
    CLOSING_BRACKET reduce using rule 120 (logicOp -> OO_LOP .)


state 64

    (121) logicOp -> TIL_LOP .

    AA_LOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    OO_LOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    TIL_LOP         reduce using rule 121 (logicOp -> TIL_LOP .)
    AND_LOP         reduce using rule 121 (logicOp -> TIL_LOP .)
    OR_LOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    MI_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    MU_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    QU_UOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    OPENING_PARENTHESES reduce using rule 121 (logicOp -> TIL_LOP .)
    LETTER          reduce using rule 121 (logicOp -> TIL_LOP .)
    CONST_KW        reduce using rule 121 (logicOp -> TIL_LOP .)
    TRUE            reduce using rule 121 (logicOp -> TIL_LOP .)
    FALSE           reduce using rule 121 (logicOp -> TIL_LOP .)
    NUMBER          reduce using rule 121 (logicOp -> TIL_LOP .)
    PL_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    DI_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    PE_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    LE_REL          reduce using rule 121 (logicOp -> TIL_LOP .)
    GE_REL          reduce using rule 121 (logicOp -> TIL_LOP .)
    EQ_REL          reduce using rule 121 (logicOp -> TIL_LOP .)
    GT_REL          reduce using rule 121 (logicOp -> TIL_LOP .)
    LT_REL          reduce using rule 121 (logicOp -> TIL_LOP .)
    NEQ_REL         reduce using rule 121 (logicOp -> TIL_LOP .)
    OPENING_BRACKET reduce using rule 121 (logicOp -> TIL_LOP .)
    SEMICOLON       reduce using rule 121 (logicOp -> TIL_LOP .)
    CLOSING_PARENTHESES reduce using rule 121 (logicOp -> TIL_LOP .)
    THEN_KW         reduce using rule 121 (logicOp -> TIL_LOP .)
    ELSE_KW         reduce using rule 121 (logicOp -> TIL_LOP .)
    COMA            reduce using rule 121 (logicOp -> TIL_LOP .)
    CLOSING_BRACKET reduce using rule 121 (logicOp -> TIL_LOP .)


state 65

    (122) logicOp -> AND_LOP .

    AA_LOP          reduce using rule 122 (logicOp -> AND_LOP .)
    OO_LOP          reduce using rule 122 (logicOp -> AND_LOP .)
    TIL_LOP         reduce using rule 122 (logicOp -> AND_LOP .)
    AND_LOP         reduce using rule 122 (logicOp -> AND_LOP .)
    OR_LOP          reduce using rule 122 (logicOp -> AND_LOP .)
    MI_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    MU_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    QU_UOP          reduce using rule 122 (logicOp -> AND_LOP .)
    OPENING_PARENTHESES reduce using rule 122 (logicOp -> AND_LOP .)
    LETTER          reduce using rule 122 (logicOp -> AND_LOP .)
    CONST_KW        reduce using rule 122 (logicOp -> AND_LOP .)
    TRUE            reduce using rule 122 (logicOp -> AND_LOP .)
    FALSE           reduce using rule 122 (logicOp -> AND_LOP .)
    NUMBER          reduce using rule 122 (logicOp -> AND_LOP .)
    PL_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    DI_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    PE_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    LE_REL          reduce using rule 122 (logicOp -> AND_LOP .)
    GE_REL          reduce using rule 122 (logicOp -> AND_LOP .)
    EQ_REL          reduce using rule 122 (logicOp -> AND_LOP .)
    GT_REL          reduce using rule 122 (logicOp -> AND_LOP .)
    LT_REL          reduce using rule 122 (logicOp -> AND_LOP .)
    NEQ_REL         reduce using rule 122 (logicOp -> AND_LOP .)
    OPENING_BRACKET reduce using rule 122 (logicOp -> AND_LOP .)
    SEMICOLON       reduce using rule 122 (logicOp -> AND_LOP .)
    CLOSING_PARENTHESES reduce using rule 122 (logicOp -> AND_LOP .)
    THEN_KW         reduce using rule 122 (logicOp -> AND_LOP .)
    ELSE_KW         reduce using rule 122 (logicOp -> AND_LOP .)
    COMA            reduce using rule 122 (logicOp -> AND_LOP .)
    CLOSING_BRACKET reduce using rule 122 (logicOp -> AND_LOP .)


state 66

    (123) logicOp -> OR_LOP .

    AA_LOP          reduce using rule 123 (logicOp -> OR_LOP .)
    OO_LOP          reduce using rule 123 (logicOp -> OR_LOP .)
    TIL_LOP         reduce using rule 123 (logicOp -> OR_LOP .)
    AND_LOP         reduce using rule 123 (logicOp -> OR_LOP .)
    OR_LOP          reduce using rule 123 (logicOp -> OR_LOP .)
    MI_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    MU_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    QU_UOP          reduce using rule 123 (logicOp -> OR_LOP .)
    OPENING_PARENTHESES reduce using rule 123 (logicOp -> OR_LOP .)
    LETTER          reduce using rule 123 (logicOp -> OR_LOP .)
    CONST_KW        reduce using rule 123 (logicOp -> OR_LOP .)
    TRUE            reduce using rule 123 (logicOp -> OR_LOP .)
    FALSE           reduce using rule 123 (logicOp -> OR_LOP .)
    NUMBER          reduce using rule 123 (logicOp -> OR_LOP .)
    PL_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    DI_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    PE_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    LE_REL          reduce using rule 123 (logicOp -> OR_LOP .)
    GE_REL          reduce using rule 123 (logicOp -> OR_LOP .)
    EQ_REL          reduce using rule 123 (logicOp -> OR_LOP .)
    GT_REL          reduce using rule 123 (logicOp -> OR_LOP .)
    LT_REL          reduce using rule 123 (logicOp -> OR_LOP .)
    NEQ_REL         reduce using rule 123 (logicOp -> OR_LOP .)
    OPENING_BRACKET reduce using rule 123 (logicOp -> OR_LOP .)
    SEMICOLON       reduce using rule 123 (logicOp -> OR_LOP .)
    CLOSING_PARENTHESES reduce using rule 123 (logicOp -> OR_LOP .)
    THEN_KW         reduce using rule 123 (logicOp -> OR_LOP .)
    ELSE_KW         reduce using rule 123 (logicOp -> OR_LOP .)
    COMA            reduce using rule 123 (logicOp -> OR_LOP .)
    CLOSING_BRACKET reduce using rule 123 (logicOp -> OR_LOP .)


state 67

    (82) relExpression -> mathEXP . compareType mathEXP
    (83) relExpression -> mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (86) compareType -> . equal
    (87) compareType -> . nonEqual
    (94) op -> . PL_OP
    (95) op -> . MI_OP
    (96) op -> . MU_OP
    (97) op -> . DI_OP
    (98) op -> . PE_OP
    (88) equal -> . LE_REL
    (89) equal -> . GE_REL
    (90) equal -> . EQ_REL
    (91) nonEqual -> . GT_REL
    (92) nonEqual -> . LT_REL
    (93) nonEqual -> . NEQ_REL

    AA_LOP          reduce using rule 83 (relExpression -> mathEXP .)
    OO_LOP          reduce using rule 83 (relExpression -> mathEXP .)
    TIL_LOP         reduce using rule 83 (relExpression -> mathEXP .)
    AND_LOP         reduce using rule 83 (relExpression -> mathEXP .)
    OR_LOP          reduce using rule 83 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 83 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 83 (relExpression -> mathEXP .)
    COMA            reduce using rule 83 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 83 (relExpression -> mathEXP .)
    PL_OP           shift and go to state 120
    MI_OP           shift and go to state 121
    MU_OP           shift and go to state 122
    DI_OP           shift and go to state 123
    PE_OP           shift and go to state 124
    LE_REL          shift and go to state 125
    GE_REL          shift and go to state 126
    EQ_REL          shift and go to state 127
    GT_REL          shift and go to state 128
    LT_REL          shift and go to state 129
    NEQ_REL         shift and go to state 130

    compareType                    shift and go to state 116
    op                             shift and go to state 117
    equal                          shift and go to state 118
    nonEqual                       shift and go to state 119

state 68

    (85) mathEXP -> unaryExpression .

    PL_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    MI_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    MU_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    DI_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    PE_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    LE_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    GE_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    EQ_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    GT_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    LT_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    NEQ_REL         reduce using rule 85 (mathEXP -> unaryExpression .)
    AA_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    OO_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    TIL_LOP         reduce using rule 85 (mathEXP -> unaryExpression .)
    AND_LOP         reduce using rule 85 (mathEXP -> unaryExpression .)
    OR_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 85 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 85 (mathEXP -> unaryExpression .)
    COMA            reduce using rule 85 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 85 (mathEXP -> unaryExpression .)


state 69

    (99) unaryExpression -> unaryop . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]

    unaryop                        shift and go to state 69
    unaryExpression                shift and go to state 131
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 70

    (100) unaryExpression -> factor .

    PL_OP           reduce using rule 100 (unaryExpression -> factor .)
    MI_OP           reduce using rule 100 (unaryExpression -> factor .)
    MU_OP           reduce using rule 100 (unaryExpression -> factor .)
    DI_OP           reduce using rule 100 (unaryExpression -> factor .)
    PE_OP           reduce using rule 100 (unaryExpression -> factor .)
    LE_REL          reduce using rule 100 (unaryExpression -> factor .)
    GE_REL          reduce using rule 100 (unaryExpression -> factor .)
    EQ_REL          reduce using rule 100 (unaryExpression -> factor .)
    GT_REL          reduce using rule 100 (unaryExpression -> factor .)
    LT_REL          reduce using rule 100 (unaryExpression -> factor .)
    NEQ_REL         reduce using rule 100 (unaryExpression -> factor .)
    AA_LOP          reduce using rule 100 (unaryExpression -> factor .)
    OO_LOP          reduce using rule 100 (unaryExpression -> factor .)
    TIL_LOP         reduce using rule 100 (unaryExpression -> factor .)
    AND_LOP         reduce using rule 100 (unaryExpression -> factor .)
    OR_LOP          reduce using rule 100 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 100 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 100 (unaryExpression -> factor .)
    COMA            reduce using rule 100 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 100 (unaryExpression -> factor .)


state 71

    (101) unaryop -> MI_OP .

    MI_OP           reduce using rule 101 (unaryop -> MI_OP .)
    MU_OP           reduce using rule 101 (unaryop -> MI_OP .)
    QU_UOP          reduce using rule 101 (unaryop -> MI_OP .)
    OPENING_PARENTHESES reduce using rule 101 (unaryop -> MI_OP .)
    LETTER          reduce using rule 101 (unaryop -> MI_OP .)
    CONST_KW        reduce using rule 101 (unaryop -> MI_OP .)
    TRUE            reduce using rule 101 (unaryop -> MI_OP .)
    FALSE           reduce using rule 101 (unaryop -> MI_OP .)
    NUMBER          reduce using rule 101 (unaryop -> MI_OP .)
    OPENING_BRACKET reduce using rule 101 (unaryop -> MI_OP .)
    PL_OP           reduce using rule 101 (unaryop -> MI_OP .)
    DI_OP           reduce using rule 101 (unaryop -> MI_OP .)
    PE_OP           reduce using rule 101 (unaryop -> MI_OP .)
    LE_REL          reduce using rule 101 (unaryop -> MI_OP .)
    GE_REL          reduce using rule 101 (unaryop -> MI_OP .)
    EQ_REL          reduce using rule 101 (unaryop -> MI_OP .)
    GT_REL          reduce using rule 101 (unaryop -> MI_OP .)
    LT_REL          reduce using rule 101 (unaryop -> MI_OP .)
    NEQ_REL         reduce using rule 101 (unaryop -> MI_OP .)
    AA_LOP          reduce using rule 101 (unaryop -> MI_OP .)
    OO_LOP          reduce using rule 101 (unaryop -> MI_OP .)
    TIL_LOP         reduce using rule 101 (unaryop -> MI_OP .)
    AND_LOP         reduce using rule 101 (unaryop -> MI_OP .)
    OR_LOP          reduce using rule 101 (unaryop -> MI_OP .)
    SEMICOLON       reduce using rule 101 (unaryop -> MI_OP .)
    CLOSING_PARENTHESES reduce using rule 101 (unaryop -> MI_OP .)
    COMA            reduce using rule 101 (unaryop -> MI_OP .)
    CLOSING_BRACKET reduce using rule 101 (unaryop -> MI_OP .)


state 72

    (102) unaryop -> MU_OP .

    MI_OP           reduce using rule 102 (unaryop -> MU_OP .)
    MU_OP           reduce using rule 102 (unaryop -> MU_OP .)
    QU_UOP          reduce using rule 102 (unaryop -> MU_OP .)
    OPENING_PARENTHESES reduce using rule 102 (unaryop -> MU_OP .)
    LETTER          reduce using rule 102 (unaryop -> MU_OP .)
    CONST_KW        reduce using rule 102 (unaryop -> MU_OP .)
    TRUE            reduce using rule 102 (unaryop -> MU_OP .)
    FALSE           reduce using rule 102 (unaryop -> MU_OP .)
    NUMBER          reduce using rule 102 (unaryop -> MU_OP .)
    OPENING_BRACKET reduce using rule 102 (unaryop -> MU_OP .)
    PL_OP           reduce using rule 102 (unaryop -> MU_OP .)
    DI_OP           reduce using rule 102 (unaryop -> MU_OP .)
    PE_OP           reduce using rule 102 (unaryop -> MU_OP .)
    LE_REL          reduce using rule 102 (unaryop -> MU_OP .)
    GE_REL          reduce using rule 102 (unaryop -> MU_OP .)
    EQ_REL          reduce using rule 102 (unaryop -> MU_OP .)
    GT_REL          reduce using rule 102 (unaryop -> MU_OP .)
    LT_REL          reduce using rule 102 (unaryop -> MU_OP .)
    NEQ_REL         reduce using rule 102 (unaryop -> MU_OP .)
    AA_LOP          reduce using rule 102 (unaryop -> MU_OP .)
    OO_LOP          reduce using rule 102 (unaryop -> MU_OP .)
    TIL_LOP         reduce using rule 102 (unaryop -> MU_OP .)
    AND_LOP         reduce using rule 102 (unaryop -> MU_OP .)
    OR_LOP          reduce using rule 102 (unaryop -> MU_OP .)
    SEMICOLON       reduce using rule 102 (unaryop -> MU_OP .)
    CLOSING_PARENTHESES reduce using rule 102 (unaryop -> MU_OP .)
    COMA            reduce using rule 102 (unaryop -> MU_OP .)
    CLOSING_BRACKET reduce using rule 102 (unaryop -> MU_OP .)


state 73

    (103) unaryop -> QU_UOP .

    MI_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    MU_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    QU_UOP          reduce using rule 103 (unaryop -> QU_UOP .)
    OPENING_PARENTHESES reduce using rule 103 (unaryop -> QU_UOP .)
    LETTER          reduce using rule 103 (unaryop -> QU_UOP .)
    CONST_KW        reduce using rule 103 (unaryop -> QU_UOP .)
    TRUE            reduce using rule 103 (unaryop -> QU_UOP .)
    FALSE           reduce using rule 103 (unaryop -> QU_UOP .)
    NUMBER          reduce using rule 103 (unaryop -> QU_UOP .)
    OPENING_BRACKET reduce using rule 103 (unaryop -> QU_UOP .)
    PL_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    DI_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    PE_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    LE_REL          reduce using rule 103 (unaryop -> QU_UOP .)
    GE_REL          reduce using rule 103 (unaryop -> QU_UOP .)
    EQ_REL          reduce using rule 103 (unaryop -> QU_UOP .)
    GT_REL          reduce using rule 103 (unaryop -> QU_UOP .)
    LT_REL          reduce using rule 103 (unaryop -> QU_UOP .)
    NEQ_REL         reduce using rule 103 (unaryop -> QU_UOP .)
    AA_LOP          reduce using rule 103 (unaryop -> QU_UOP .)
    OO_LOP          reduce using rule 103 (unaryop -> QU_UOP .)
    TIL_LOP         reduce using rule 103 (unaryop -> QU_UOP .)
    AND_LOP         reduce using rule 103 (unaryop -> QU_UOP .)
    OR_LOP          reduce using rule 103 (unaryop -> QU_UOP .)
    SEMICOLON       reduce using rule 103 (unaryop -> QU_UOP .)
    CLOSING_PARENTHESES reduce using rule 103 (unaryop -> QU_UOP .)
    COMA            reduce using rule 103 (unaryop -> QU_UOP .)
    CLOSING_BRACKET reduce using rule 103 (unaryop -> QU_UOP .)


state 74

    (104) factor -> inalterable .

    PL_OP           reduce using rule 104 (factor -> inalterable .)
    MI_OP           reduce using rule 104 (factor -> inalterable .)
    MU_OP           reduce using rule 104 (factor -> inalterable .)
    DI_OP           reduce using rule 104 (factor -> inalterable .)
    PE_OP           reduce using rule 104 (factor -> inalterable .)
    LE_REL          reduce using rule 104 (factor -> inalterable .)
    GE_REL          reduce using rule 104 (factor -> inalterable .)
    EQ_REL          reduce using rule 104 (factor -> inalterable .)
    GT_REL          reduce using rule 104 (factor -> inalterable .)
    LT_REL          reduce using rule 104 (factor -> inalterable .)
    NEQ_REL         reduce using rule 104 (factor -> inalterable .)
    AA_LOP          reduce using rule 104 (factor -> inalterable .)
    OO_LOP          reduce using rule 104 (factor -> inalterable .)
    TIL_LOP         reduce using rule 104 (factor -> inalterable .)
    AND_LOP         reduce using rule 104 (factor -> inalterable .)
    OR_LOP          reduce using rule 104 (factor -> inalterable .)
    SEMICOLON       reduce using rule 104 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 104 (factor -> inalterable .)
    COMA            reduce using rule 104 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 104 (factor -> inalterable .)


state 75

    (110) inalterable -> constant .

    PL_OP           reduce using rule 110 (inalterable -> constant .)
    MI_OP           reduce using rule 110 (inalterable -> constant .)
    MU_OP           reduce using rule 110 (inalterable -> constant .)
    DI_OP           reduce using rule 110 (inalterable -> constant .)
    PE_OP           reduce using rule 110 (inalterable -> constant .)
    LE_REL          reduce using rule 110 (inalterable -> constant .)
    GE_REL          reduce using rule 110 (inalterable -> constant .)
    EQ_REL          reduce using rule 110 (inalterable -> constant .)
    GT_REL          reduce using rule 110 (inalterable -> constant .)
    LT_REL          reduce using rule 110 (inalterable -> constant .)
    NEQ_REL         reduce using rule 110 (inalterable -> constant .)
    AA_LOP          reduce using rule 110 (inalterable -> constant .)
    OO_LOP          reduce using rule 110 (inalterable -> constant .)
    TIL_LOP         reduce using rule 110 (inalterable -> constant .)
    AND_LOP         reduce using rule 110 (inalterable -> constant .)
    OR_LOP          reduce using rule 110 (inalterable -> constant .)
    SEMICOLON       reduce using rule 110 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 110 (inalterable -> constant .)
    COMA            reduce using rule 110 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 110 (inalterable -> constant .)


state 76

    (116) constant -> CONST_KW .

    PL_OP           reduce using rule 116 (constant -> CONST_KW .)
    MI_OP           reduce using rule 116 (constant -> CONST_KW .)
    MU_OP           reduce using rule 116 (constant -> CONST_KW .)
    DI_OP           reduce using rule 116 (constant -> CONST_KW .)
    PE_OP           reduce using rule 116 (constant -> CONST_KW .)
    LE_REL          reduce using rule 116 (constant -> CONST_KW .)
    GE_REL          reduce using rule 116 (constant -> CONST_KW .)
    EQ_REL          reduce using rule 116 (constant -> CONST_KW .)
    GT_REL          reduce using rule 116 (constant -> CONST_KW .)
    LT_REL          reduce using rule 116 (constant -> CONST_KW .)
    NEQ_REL         reduce using rule 116 (constant -> CONST_KW .)
    AA_LOP          reduce using rule 116 (constant -> CONST_KW .)
    OO_LOP          reduce using rule 116 (constant -> CONST_KW .)
    TIL_LOP         reduce using rule 116 (constant -> CONST_KW .)
    AND_LOP         reduce using rule 116 (constant -> CONST_KW .)
    OR_LOP          reduce using rule 116 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 116 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 116 (constant -> CONST_KW .)
    COMA            reduce using rule 116 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 116 (constant -> CONST_KW .)


state 77

    (117) constant -> TRUE .

    PL_OP           reduce using rule 117 (constant -> TRUE .)
    MI_OP           reduce using rule 117 (constant -> TRUE .)
    MU_OP           reduce using rule 117 (constant -> TRUE .)
    DI_OP           reduce using rule 117 (constant -> TRUE .)
    PE_OP           reduce using rule 117 (constant -> TRUE .)
    LE_REL          reduce using rule 117 (constant -> TRUE .)
    GE_REL          reduce using rule 117 (constant -> TRUE .)
    EQ_REL          reduce using rule 117 (constant -> TRUE .)
    GT_REL          reduce using rule 117 (constant -> TRUE .)
    LT_REL          reduce using rule 117 (constant -> TRUE .)
    NEQ_REL         reduce using rule 117 (constant -> TRUE .)
    AA_LOP          reduce using rule 117 (constant -> TRUE .)
    OO_LOP          reduce using rule 117 (constant -> TRUE .)
    TIL_LOP         reduce using rule 117 (constant -> TRUE .)
    AND_LOP         reduce using rule 117 (constant -> TRUE .)
    OR_LOP          reduce using rule 117 (constant -> TRUE .)
    SEMICOLON       reduce using rule 117 (constant -> TRUE .)
    CLOSING_PARENTHESES reduce using rule 117 (constant -> TRUE .)
    COMA            reduce using rule 117 (constant -> TRUE .)
    CLOSING_BRACKET reduce using rule 117 (constant -> TRUE .)


state 78

    (118) constant -> FALSE .

    PL_OP           reduce using rule 118 (constant -> FALSE .)
    MI_OP           reduce using rule 118 (constant -> FALSE .)
    MU_OP           reduce using rule 118 (constant -> FALSE .)
    DI_OP           reduce using rule 118 (constant -> FALSE .)
    PE_OP           reduce using rule 118 (constant -> FALSE .)
    LE_REL          reduce using rule 118 (constant -> FALSE .)
    GE_REL          reduce using rule 118 (constant -> FALSE .)
    EQ_REL          reduce using rule 118 (constant -> FALSE .)
    GT_REL          reduce using rule 118 (constant -> FALSE .)
    LT_REL          reduce using rule 118 (constant -> FALSE .)
    NEQ_REL         reduce using rule 118 (constant -> FALSE .)
    AA_LOP          reduce using rule 118 (constant -> FALSE .)
    OO_LOP          reduce using rule 118 (constant -> FALSE .)
    TIL_LOP         reduce using rule 118 (constant -> FALSE .)
    AND_LOP         reduce using rule 118 (constant -> FALSE .)
    OR_LOP          reduce using rule 118 (constant -> FALSE .)
    SEMICOLON       reduce using rule 118 (constant -> FALSE .)
    CLOSING_PARENTHESES reduce using rule 118 (constant -> FALSE .)
    COMA            reduce using rule 118 (constant -> FALSE .)
    CLOSING_BRACKET reduce using rule 118 (constant -> FALSE .)


state 79

    (30) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 80

    (33) paramList -> paramList COMA . paramId
    (37) paramId -> . LETTER
    (38) paramId -> . LETTER OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 35

    paramId                        shift and go to state 132

state 81

    (38) paramId -> LETTER OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 133


state 82

    (18) varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .

    COLON           reduce using rule 18 (varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 18 (varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .)
    COMA            reduce using rule 18 (varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .)


state 83

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    NUMBER          reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    PP_OP           reduce using rule 36 (localDeclarations -> .)
    MM_OP           reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACKET reduce using rule 36 (localDeclarations -> .)
    EQ_OP           reduce using rule 36 (localDeclarations -> .)
    PLE_OP          reduce using rule 36 (localDeclarations -> .)
    MIE_OP          reduce using rule 36 (localDeclarations -> .)
    MUE_OP          reduce using rule 36 (localDeclarations -> .)
    DIE_OP          reduce using rule 36 (localDeclarations -> .)
    PL_OP           reduce using rule 36 (localDeclarations -> .)
    DI_OP           reduce using rule 36 (localDeclarations -> .)
    PE_OP           reduce using rule 36 (localDeclarations -> .)
    LE_REL          reduce using rule 36 (localDeclarations -> .)
    GE_REL          reduce using rule 36 (localDeclarations -> .)
    EQ_REL          reduce using rule 36 (localDeclarations -> .)
    GT_REL          reduce using rule 36 (localDeclarations -> .)
    LT_REL          reduce using rule 36 (localDeclarations -> .)
    NEQ_REL         reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 95
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    type                           shift and go to state 96
    localDeclarations              shift and go to state 134
    ScopedVariableDec              shift and go to state 93
    scopedSpecifier                shift and go to state 94

state 84

    (10) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .

    VOID_KW         reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOLEAN_KW      reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHARACTER_KW    reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INTEGER_KW      reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHAR_KW         reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOL_KW         reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INT_KW          reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    $end            reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)


state 85

    (14) variableList -> variableList COMA . variableList
    (14) variableList -> . variableList COMA variableList
    (15) variableList -> . varInitialization
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    LETTER          shift and go to state 16
    NUMBER          shift and go to state 20
    COLON           reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)

    variableList                   shift and go to state 135
    varInitialization              shift and go to state 38
    varForm                        shift and go to state 19
    numOrLetter                    shift and go to state 21

state 86

    (12) declaration -> type LETTER varInitialization COMA variableList SEMICOLON .

    VOID_KW         reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    CHAR_KW         reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    BOOL_KW         reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    INT_KW          reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    $end            reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)


state 87

    (17) varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 136
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

    logicOp                        shift and go to state 99

state 88

    (105) factor -> alterable .
    (107) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> alterable . LETTER

    PL_OP           reduce using rule 105 (factor -> alterable .)
    MI_OP           reduce using rule 105 (factor -> alterable .)
    MU_OP           reduce using rule 105 (factor -> alterable .)
    DI_OP           reduce using rule 105 (factor -> alterable .)
    PE_OP           reduce using rule 105 (factor -> alterable .)
    LE_REL          reduce using rule 105 (factor -> alterable .)
    GE_REL          reduce using rule 105 (factor -> alterable .)
    EQ_REL          reduce using rule 105 (factor -> alterable .)
    GT_REL          reduce using rule 105 (factor -> alterable .)
    LT_REL          reduce using rule 105 (factor -> alterable .)
    NEQ_REL         reduce using rule 105 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 105 (factor -> alterable .)
    AA_LOP          reduce using rule 105 (factor -> alterable .)
    OO_LOP          reduce using rule 105 (factor -> alterable .)
    TIL_LOP         reduce using rule 105 (factor -> alterable .)
    AND_LOP         reduce using rule 105 (factor -> alterable .)
    OR_LOP          reduce using rule 105 (factor -> alterable .)
    SEMICOLON       reduce using rule 105 (factor -> alterable .)
    COMA            reduce using rule 105 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 105 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 108
    LETTER          shift and go to state 109


state 89

    (111) inalterable -> LETTER . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (3) numOrLetter -> LETTER .

    OPENING_PARENTHESES shift and go to state 90
    OPENING_BRACKET reduce using rule 3 (numOrLetter -> LETTER .)
    LETTER          reduce using rule 3 (numOrLetter -> LETTER .)
    PL_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MI_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MU_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    DI_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    PE_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    LE_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    GE_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    EQ_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    GT_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    LT_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    NEQ_REL         reduce using rule 3 (numOrLetter -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 3 (numOrLetter -> LETTER .)
    AA_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    OO_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    TIL_LOP         reduce using rule 3 (numOrLetter -> LETTER .)
    AND_LOP         reduce using rule 3 (numOrLetter -> LETTER .)
    OR_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrLetter -> LETTER .)
    COMA            reduce using rule 3 (numOrLetter -> LETTER .)
    CLOSING_BRACKET reduce using rule 3 (numOrLetter -> LETTER .)


state 90

    (111) inalterable -> LETTER OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (112) args -> . arguments
    (113) args -> .
    (114) arguments -> . arguments COMA allExpression
    (115) arguments -> . allExpression
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! reduce/reduce conflict for CLOSING_PARENTHESES resolved using rule 4 (numOrLetter -> .)
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! CLOSING_PARENTHESES [ reduce using rule 113 (args -> .) ]
  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    args                           shift and go to state 137
    arguments                      shift and go to state 138
    allExpression                  shift and go to state 139
    alterable                      shift and go to state 59
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 91

    (109) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 140


state 92

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    NUMBER          reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)
    PP_OP           reduce using rule 52 (statementList -> .)
    MM_OP           reduce using rule 52 (statementList -> .)
    OPENING_BRACKET reduce using rule 52 (statementList -> .)
    EQ_OP           reduce using rule 52 (statementList -> .)
    PLE_OP          reduce using rule 52 (statementList -> .)
    MIE_OP          reduce using rule 52 (statementList -> .)
    MUE_OP          reduce using rule 52 (statementList -> .)
    DIE_OP          reduce using rule 52 (statementList -> .)
    PL_OP           reduce using rule 52 (statementList -> .)
    DI_OP           reduce using rule 52 (statementList -> .)
    PE_OP           reduce using rule 52 (statementList -> .)
    LE_REL          reduce using rule 52 (statementList -> .)
    GE_REL          reduce using rule 52 (statementList -> .)
    EQ_REL          reduce using rule 52 (statementList -> .)
    GT_REL          reduce using rule 52 (statementList -> .)
    LT_REL          reduce using rule 52 (statementList -> .)
    NEQ_REL         reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 141

state 93

    (35) localDeclarations -> ScopedVariableDec . localDeclarations
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    NUMBER          reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    PP_OP           reduce using rule 36 (localDeclarations -> .)
    MM_OP           reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACKET reduce using rule 36 (localDeclarations -> .)
    EQ_OP           reduce using rule 36 (localDeclarations -> .)
    PLE_OP          reduce using rule 36 (localDeclarations -> .)
    MIE_OP          reduce using rule 36 (localDeclarations -> .)
    MUE_OP          reduce using rule 36 (localDeclarations -> .)
    DIE_OP          reduce using rule 36 (localDeclarations -> .)
    PL_OP           reduce using rule 36 (localDeclarations -> .)
    DI_OP           reduce using rule 36 (localDeclarations -> .)
    PE_OP           reduce using rule 36 (localDeclarations -> .)
    LE_REL          reduce using rule 36 (localDeclarations -> .)
    GE_REL          reduce using rule 36 (localDeclarations -> .)
    EQ_REL          reduce using rule 36 (localDeclarations -> .)
    GT_REL          reduce using rule 36 (localDeclarations -> .)
    LT_REL          reduce using rule 36 (localDeclarations -> .)
    NEQ_REL         reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 95
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    ScopedVariableDec              shift and go to state 93
    localDeclarations              shift and go to state 142
    scopedSpecifier                shift and go to state 94
    type                           shift and go to state 96

state 94

    (13) ScopedVariableDec -> scopedSpecifier . variableList SEMICOLON
    (14) variableList -> . variableList COMA variableList
    (15) variableList -> . varInitialization
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    LETTER          shift and go to state 16
    NUMBER          shift and go to state 20
    COLON           reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

    variableList                   shift and go to state 143
    varInitialization              shift and go to state 38
    varForm                        shift and go to state 19
    numOrLetter                    shift and go to state 21

state 95

    (20) scopedSpecifier -> STATIC_KW . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    type                           shift and go to state 144

state 96

    (21) scopedSpecifier -> type .

    LETTER          reduce using rule 21 (scopedSpecifier -> type .)
    NUMBER          reduce using rule 21 (scopedSpecifier -> type .)
    SEMICOLON       reduce using rule 21 (scopedSpecifier -> type .)
    COMA            reduce using rule 21 (scopedSpecifier -> type .)
    COLON           reduce using rule 21 (scopedSpecifier -> type .)


state 97

    (53) phrase -> allExpression SEMICOLON .

    VOID_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    IF_KW           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    NUMBER          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    LETTER          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    AA_LOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OO_LOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    TIL_LOP         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    AND_LOP         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OR_LOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MI_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MU_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    QU_UOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    TRUE            reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    FALSE           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    PP_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MM_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACKET reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    EQ_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    PLE_OP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MIE_OP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MUE_OP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    DIE_OP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    PL_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    DI_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    PE_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    LE_REL          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    GE_REL          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    EQ_REL          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    GT_REL          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    LT_REL          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    NEQ_REL         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 53 (phrase -> allExpression SEMICOLON .)


state 98

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 145
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 99

    (77) eachExpression -> eachExpression logicOp . eachExpression
    (78) eachExpression -> eachExpression logicOp . THEN_KW eachExpression
    (81) eachExpression -> eachExpression logicOp . ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    THEN_KW         shift and go to state 147
    ELSE_KW         shift and go to state 148
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 146
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 100

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 149
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 101

    (64) returnPhrase -> COMEBACK_KW SEMICOLON .

    VOID_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    IF_KW           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    NUMBER          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LETTER          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AA_LOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OO_LOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIL_LOP         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AND_LOP         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OR_LOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MI_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MU_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QU_UOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE            reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    PP_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MM_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACKET reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    EQ_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    PLE_OP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MIE_OP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MUE_OP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    DIE_OP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    PL_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    DI_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    PE_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LE_REL          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GE_REL          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    EQ_REL          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GT_REL          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LT_REL          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    NEQ_REL         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OTHER_KW        reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 102

    (65) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 150


state 103

    (66) returnPhrase -> GIVEBACK_KW numOrLetter . SEMICOLON
    (106) alterable -> numOrLetter .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 151
    PP_OP           reduce using rule 106 (alterable -> numOrLetter .)
    MM_OP           reduce using rule 106 (alterable -> numOrLetter .)
    OPENING_BRACKET reduce using rule 106 (alterable -> numOrLetter .)
    LETTER          reduce using rule 106 (alterable -> numOrLetter .)
    EQ_OP           reduce using rule 106 (alterable -> numOrLetter .)
    PLE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    MIE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    MUE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    DIE_OP          reduce using rule 106 (alterable -> numOrLetter .)
    PL_OP           reduce using rule 106 (alterable -> numOrLetter .)
    MI_OP           reduce using rule 106 (alterable -> numOrLetter .)
    MU_OP           reduce using rule 106 (alterable -> numOrLetter .)
    DI_OP           reduce using rule 106 (alterable -> numOrLetter .)
    PE_OP           reduce using rule 106 (alterable -> numOrLetter .)
    LE_REL          reduce using rule 106 (alterable -> numOrLetter .)
    GE_REL          reduce using rule 106 (alterable -> numOrLetter .)
    EQ_REL          reduce using rule 106 (alterable -> numOrLetter .)
    GT_REL          reduce using rule 106 (alterable -> numOrLetter .)
    LT_REL          reduce using rule 106 (alterable -> numOrLetter .)
    NEQ_REL         reduce using rule 106 (alterable -> numOrLetter .)
    AA_LOP          reduce using rule 106 (alterable -> numOrLetter .)
    OO_LOP          reduce using rule 106 (alterable -> numOrLetter .)
    TIL_LOP         reduce using rule 106 (alterable -> numOrLetter .)
    AND_LOP         reduce using rule 106 (alterable -> numOrLetter .)
    OR_LOP          reduce using rule 106 (alterable -> numOrLetter .)

  ! SEMICOLON       [ reduce using rule 106 (alterable -> numOrLetter .) ]


state 104

    (67) continue -> CONTINUE_KW SEMICOLON .

    VOID_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    IF_KW           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    NUMBER          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    LETTER          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    AA_LOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OO_LOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    TIL_LOP         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    AND_LOP         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OR_LOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MI_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MU_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    QU_UOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE            reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    PP_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MM_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACKET reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    EQ_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    PLE_OP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MIE_OP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MUE_OP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    DIE_OP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    PL_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    DI_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    PE_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    LE_REL          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    GE_REL          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    EQ_REL          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    GT_REL          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    LT_REL          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    NEQ_REL         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OTHER_KW        reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)


state 105

    (68) allExpression -> alterable mathOp . allExpression
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    alterable                      shift and go to state 59
    allExpression                  shift and go to state 152
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 106

    (69) allExpression -> alterable PP_OP .

    SEMICOLON       reduce using rule 69 (allExpression -> alterable PP_OP .)
    CLOSING_PARENTHESES reduce using rule 69 (allExpression -> alterable PP_OP .)
    COMA            reduce using rule 69 (allExpression -> alterable PP_OP .)
    CLOSING_BRACKET reduce using rule 69 (allExpression -> alterable PP_OP .)


state 107

    (70) allExpression -> alterable MM_OP .

    SEMICOLON       reduce using rule 70 (allExpression -> alterable MM_OP .)
    CLOSING_PARENTHESES reduce using rule 70 (allExpression -> alterable MM_OP .)
    COMA            reduce using rule 70 (allExpression -> alterable MM_OP .)
    CLOSING_BRACKET reduce using rule 70 (allExpression -> alterable MM_OP .)


state 108

    (107) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    alterable                      shift and go to state 59
    allExpression                  shift and go to state 153
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 109

    (108) alterable -> alterable LETTER .

    PP_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    MM_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    OPENING_BRACKET reduce using rule 108 (alterable -> alterable LETTER .)
    LETTER          reduce using rule 108 (alterable -> alterable LETTER .)
    EQ_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    PLE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    MIE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    MUE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    DIE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    PL_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    MI_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    MU_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    DI_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    PE_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    LE_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    GE_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    EQ_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    GT_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    LT_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    NEQ_REL         reduce using rule 108 (alterable -> alterable LETTER .)
    AA_LOP          reduce using rule 108 (alterable -> alterable LETTER .)
    OO_LOP          reduce using rule 108 (alterable -> alterable LETTER .)
    TIL_LOP         reduce using rule 108 (alterable -> alterable LETTER .)
    AND_LOP         reduce using rule 108 (alterable -> alterable LETTER .)
    OR_LOP          reduce using rule 108 (alterable -> alterable LETTER .)
    SEMICOLON       reduce using rule 108 (alterable -> alterable LETTER .)
    CLOSING_PARENTHESES reduce using rule 108 (alterable -> alterable LETTER .)
    COMA            reduce using rule 108 (alterable -> alterable LETTER .)
    CLOSING_BRACKET reduce using rule 108 (alterable -> alterable LETTER .)


state 110

    (72) mathOp -> EQ_OP .

    NUMBER          reduce using rule 72 (mathOp -> EQ_OP .)
    LETTER          reduce using rule 72 (mathOp -> EQ_OP .)
    AA_LOP          reduce using rule 72 (mathOp -> EQ_OP .)
    OO_LOP          reduce using rule 72 (mathOp -> EQ_OP .)
    TIL_LOP         reduce using rule 72 (mathOp -> EQ_OP .)
    AND_LOP         reduce using rule 72 (mathOp -> EQ_OP .)
    OR_LOP          reduce using rule 72 (mathOp -> EQ_OP .)
    MI_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    MU_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    QU_UOP          reduce using rule 72 (mathOp -> EQ_OP .)
    OPENING_PARENTHESES reduce using rule 72 (mathOp -> EQ_OP .)
    CONST_KW        reduce using rule 72 (mathOp -> EQ_OP .)
    TRUE            reduce using rule 72 (mathOp -> EQ_OP .)
    FALSE           reduce using rule 72 (mathOp -> EQ_OP .)
    PP_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    MM_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    OPENING_BRACKET reduce using rule 72 (mathOp -> EQ_OP .)
    EQ_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    PLE_OP          reduce using rule 72 (mathOp -> EQ_OP .)
    MIE_OP          reduce using rule 72 (mathOp -> EQ_OP .)
    MUE_OP          reduce using rule 72 (mathOp -> EQ_OP .)
    DIE_OP          reduce using rule 72 (mathOp -> EQ_OP .)
    PL_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    DI_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    PE_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    LE_REL          reduce using rule 72 (mathOp -> EQ_OP .)
    GE_REL          reduce using rule 72 (mathOp -> EQ_OP .)
    EQ_REL          reduce using rule 72 (mathOp -> EQ_OP .)
    GT_REL          reduce using rule 72 (mathOp -> EQ_OP .)
    LT_REL          reduce using rule 72 (mathOp -> EQ_OP .)
    NEQ_REL         reduce using rule 72 (mathOp -> EQ_OP .)
    SEMICOLON       reduce using rule 72 (mathOp -> EQ_OP .)
    CLOSING_PARENTHESES reduce using rule 72 (mathOp -> EQ_OP .)
    COMA            reduce using rule 72 (mathOp -> EQ_OP .)
    CLOSING_BRACKET reduce using rule 72 (mathOp -> EQ_OP .)


state 111

    (73) mathOp -> PLE_OP .

    NUMBER          reduce using rule 73 (mathOp -> PLE_OP .)
    LETTER          reduce using rule 73 (mathOp -> PLE_OP .)
    AA_LOP          reduce using rule 73 (mathOp -> PLE_OP .)
    OO_LOP          reduce using rule 73 (mathOp -> PLE_OP .)
    TIL_LOP         reduce using rule 73 (mathOp -> PLE_OP .)
    AND_LOP         reduce using rule 73 (mathOp -> PLE_OP .)
    OR_LOP          reduce using rule 73 (mathOp -> PLE_OP .)
    MI_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    MU_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    QU_UOP          reduce using rule 73 (mathOp -> PLE_OP .)
    OPENING_PARENTHESES reduce using rule 73 (mathOp -> PLE_OP .)
    CONST_KW        reduce using rule 73 (mathOp -> PLE_OP .)
    TRUE            reduce using rule 73 (mathOp -> PLE_OP .)
    FALSE           reduce using rule 73 (mathOp -> PLE_OP .)
    PP_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    MM_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    OPENING_BRACKET reduce using rule 73 (mathOp -> PLE_OP .)
    EQ_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    PLE_OP          reduce using rule 73 (mathOp -> PLE_OP .)
    MIE_OP          reduce using rule 73 (mathOp -> PLE_OP .)
    MUE_OP          reduce using rule 73 (mathOp -> PLE_OP .)
    DIE_OP          reduce using rule 73 (mathOp -> PLE_OP .)
    PL_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    DI_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    PE_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    LE_REL          reduce using rule 73 (mathOp -> PLE_OP .)
    GE_REL          reduce using rule 73 (mathOp -> PLE_OP .)
    EQ_REL          reduce using rule 73 (mathOp -> PLE_OP .)
    GT_REL          reduce using rule 73 (mathOp -> PLE_OP .)
    LT_REL          reduce using rule 73 (mathOp -> PLE_OP .)
    NEQ_REL         reduce using rule 73 (mathOp -> PLE_OP .)
    SEMICOLON       reduce using rule 73 (mathOp -> PLE_OP .)
    CLOSING_PARENTHESES reduce using rule 73 (mathOp -> PLE_OP .)
    COMA            reduce using rule 73 (mathOp -> PLE_OP .)
    CLOSING_BRACKET reduce using rule 73 (mathOp -> PLE_OP .)


state 112

    (74) mathOp -> MIE_OP .

    NUMBER          reduce using rule 74 (mathOp -> MIE_OP .)
    LETTER          reduce using rule 74 (mathOp -> MIE_OP .)
    AA_LOP          reduce using rule 74 (mathOp -> MIE_OP .)
    OO_LOP          reduce using rule 74 (mathOp -> MIE_OP .)
    TIL_LOP         reduce using rule 74 (mathOp -> MIE_OP .)
    AND_LOP         reduce using rule 74 (mathOp -> MIE_OP .)
    OR_LOP          reduce using rule 74 (mathOp -> MIE_OP .)
    MI_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    MU_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    QU_UOP          reduce using rule 74 (mathOp -> MIE_OP .)
    OPENING_PARENTHESES reduce using rule 74 (mathOp -> MIE_OP .)
    CONST_KW        reduce using rule 74 (mathOp -> MIE_OP .)
    TRUE            reduce using rule 74 (mathOp -> MIE_OP .)
    FALSE           reduce using rule 74 (mathOp -> MIE_OP .)
    PP_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    MM_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    OPENING_BRACKET reduce using rule 74 (mathOp -> MIE_OP .)
    EQ_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    PLE_OP          reduce using rule 74 (mathOp -> MIE_OP .)
    MIE_OP          reduce using rule 74 (mathOp -> MIE_OP .)
    MUE_OP          reduce using rule 74 (mathOp -> MIE_OP .)
    DIE_OP          reduce using rule 74 (mathOp -> MIE_OP .)
    PL_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    DI_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    PE_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    LE_REL          reduce using rule 74 (mathOp -> MIE_OP .)
    GE_REL          reduce using rule 74 (mathOp -> MIE_OP .)
    EQ_REL          reduce using rule 74 (mathOp -> MIE_OP .)
    GT_REL          reduce using rule 74 (mathOp -> MIE_OP .)
    LT_REL          reduce using rule 74 (mathOp -> MIE_OP .)
    NEQ_REL         reduce using rule 74 (mathOp -> MIE_OP .)
    SEMICOLON       reduce using rule 74 (mathOp -> MIE_OP .)
    CLOSING_PARENTHESES reduce using rule 74 (mathOp -> MIE_OP .)
    COMA            reduce using rule 74 (mathOp -> MIE_OP .)
    CLOSING_BRACKET reduce using rule 74 (mathOp -> MIE_OP .)


state 113

    (75) mathOp -> MUE_OP .

    NUMBER          reduce using rule 75 (mathOp -> MUE_OP .)
    LETTER          reduce using rule 75 (mathOp -> MUE_OP .)
    AA_LOP          reduce using rule 75 (mathOp -> MUE_OP .)
    OO_LOP          reduce using rule 75 (mathOp -> MUE_OP .)
    TIL_LOP         reduce using rule 75 (mathOp -> MUE_OP .)
    AND_LOP         reduce using rule 75 (mathOp -> MUE_OP .)
    OR_LOP          reduce using rule 75 (mathOp -> MUE_OP .)
    MI_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    MU_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    QU_UOP          reduce using rule 75 (mathOp -> MUE_OP .)
    OPENING_PARENTHESES reduce using rule 75 (mathOp -> MUE_OP .)
    CONST_KW        reduce using rule 75 (mathOp -> MUE_OP .)
    TRUE            reduce using rule 75 (mathOp -> MUE_OP .)
    FALSE           reduce using rule 75 (mathOp -> MUE_OP .)
    PP_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    MM_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    OPENING_BRACKET reduce using rule 75 (mathOp -> MUE_OP .)
    EQ_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    PLE_OP          reduce using rule 75 (mathOp -> MUE_OP .)
    MIE_OP          reduce using rule 75 (mathOp -> MUE_OP .)
    MUE_OP          reduce using rule 75 (mathOp -> MUE_OP .)
    DIE_OP          reduce using rule 75 (mathOp -> MUE_OP .)
    PL_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    DI_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    PE_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    LE_REL          reduce using rule 75 (mathOp -> MUE_OP .)
    GE_REL          reduce using rule 75 (mathOp -> MUE_OP .)
    EQ_REL          reduce using rule 75 (mathOp -> MUE_OP .)
    GT_REL          reduce using rule 75 (mathOp -> MUE_OP .)
    LT_REL          reduce using rule 75 (mathOp -> MUE_OP .)
    NEQ_REL         reduce using rule 75 (mathOp -> MUE_OP .)
    SEMICOLON       reduce using rule 75 (mathOp -> MUE_OP .)
    CLOSING_PARENTHESES reduce using rule 75 (mathOp -> MUE_OP .)
    COMA            reduce using rule 75 (mathOp -> MUE_OP .)
    CLOSING_BRACKET reduce using rule 75 (mathOp -> MUE_OP .)


state 114

    (76) mathOp -> DIE_OP .

    NUMBER          reduce using rule 76 (mathOp -> DIE_OP .)
    LETTER          reduce using rule 76 (mathOp -> DIE_OP .)
    AA_LOP          reduce using rule 76 (mathOp -> DIE_OP .)
    OO_LOP          reduce using rule 76 (mathOp -> DIE_OP .)
    TIL_LOP         reduce using rule 76 (mathOp -> DIE_OP .)
    AND_LOP         reduce using rule 76 (mathOp -> DIE_OP .)
    OR_LOP          reduce using rule 76 (mathOp -> DIE_OP .)
    MI_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    MU_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    QU_UOP          reduce using rule 76 (mathOp -> DIE_OP .)
    OPENING_PARENTHESES reduce using rule 76 (mathOp -> DIE_OP .)
    CONST_KW        reduce using rule 76 (mathOp -> DIE_OP .)
    TRUE            reduce using rule 76 (mathOp -> DIE_OP .)
    FALSE           reduce using rule 76 (mathOp -> DIE_OP .)
    PP_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    MM_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    OPENING_BRACKET reduce using rule 76 (mathOp -> DIE_OP .)
    EQ_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    PLE_OP          reduce using rule 76 (mathOp -> DIE_OP .)
    MIE_OP          reduce using rule 76 (mathOp -> DIE_OP .)
    MUE_OP          reduce using rule 76 (mathOp -> DIE_OP .)
    DIE_OP          reduce using rule 76 (mathOp -> DIE_OP .)
    PL_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    DI_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    PE_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    LE_REL          reduce using rule 76 (mathOp -> DIE_OP .)
    GE_REL          reduce using rule 76 (mathOp -> DIE_OP .)
    EQ_REL          reduce using rule 76 (mathOp -> DIE_OP .)
    GT_REL          reduce using rule 76 (mathOp -> DIE_OP .)
    LT_REL          reduce using rule 76 (mathOp -> DIE_OP .)
    NEQ_REL         reduce using rule 76 (mathOp -> DIE_OP .)
    SEMICOLON       reduce using rule 76 (mathOp -> DIE_OP .)
    CLOSING_PARENTHESES reduce using rule 76 (mathOp -> DIE_OP .)
    COMA            reduce using rule 76 (mathOp -> DIE_OP .)
    CLOSING_BRACKET reduce using rule 76 (mathOp -> DIE_OP .)


state 115

    (79) eachExpression -> logicOp eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    SEMICOLON       reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    CLOSING_PARENTHESES reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    COMA            reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

  ! AA_LOP          [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! OO_LOP          [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! AND_LOP         [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! OR_LOP          [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]

    logicOp                        shift and go to state 99

state 116

    (82) relExpression -> mathEXP compareType . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]

    mathEXP                        shift and go to state 154
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 117

    (84) mathEXP -> mathEXP op . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]

    mathEXP                        shift and go to state 155
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 118

    (86) compareType -> equal .

    MI_OP           reduce using rule 86 (compareType -> equal .)
    MU_OP           reduce using rule 86 (compareType -> equal .)
    QU_UOP          reduce using rule 86 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 86 (compareType -> equal .)
    LETTER          reduce using rule 86 (compareType -> equal .)
    CONST_KW        reduce using rule 86 (compareType -> equal .)
    TRUE            reduce using rule 86 (compareType -> equal .)
    FALSE           reduce using rule 86 (compareType -> equal .)
    NUMBER          reduce using rule 86 (compareType -> equal .)
    PL_OP           reduce using rule 86 (compareType -> equal .)
    DI_OP           reduce using rule 86 (compareType -> equal .)
    PE_OP           reduce using rule 86 (compareType -> equal .)
    OPENING_BRACKET reduce using rule 86 (compareType -> equal .)
    AA_LOP          reduce using rule 86 (compareType -> equal .)
    OO_LOP          reduce using rule 86 (compareType -> equal .)
    TIL_LOP         reduce using rule 86 (compareType -> equal .)
    AND_LOP         reduce using rule 86 (compareType -> equal .)
    OR_LOP          reduce using rule 86 (compareType -> equal .)
    SEMICOLON       reduce using rule 86 (compareType -> equal .)
    CLOSING_PARENTHESES reduce using rule 86 (compareType -> equal .)
    COMA            reduce using rule 86 (compareType -> equal .)
    CLOSING_BRACKET reduce using rule 86 (compareType -> equal .)


state 119

    (87) compareType -> nonEqual .

    MI_OP           reduce using rule 87 (compareType -> nonEqual .)
    MU_OP           reduce using rule 87 (compareType -> nonEqual .)
    QU_UOP          reduce using rule 87 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 87 (compareType -> nonEqual .)
    LETTER          reduce using rule 87 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 87 (compareType -> nonEqual .)
    TRUE            reduce using rule 87 (compareType -> nonEqual .)
    FALSE           reduce using rule 87 (compareType -> nonEqual .)
    NUMBER          reduce using rule 87 (compareType -> nonEqual .)
    PL_OP           reduce using rule 87 (compareType -> nonEqual .)
    DI_OP           reduce using rule 87 (compareType -> nonEqual .)
    PE_OP           reduce using rule 87 (compareType -> nonEqual .)
    OPENING_BRACKET reduce using rule 87 (compareType -> nonEqual .)
    AA_LOP          reduce using rule 87 (compareType -> nonEqual .)
    OO_LOP          reduce using rule 87 (compareType -> nonEqual .)
    TIL_LOP         reduce using rule 87 (compareType -> nonEqual .)
    AND_LOP         reduce using rule 87 (compareType -> nonEqual .)
    OR_LOP          reduce using rule 87 (compareType -> nonEqual .)
    SEMICOLON       reduce using rule 87 (compareType -> nonEqual .)
    CLOSING_PARENTHESES reduce using rule 87 (compareType -> nonEqual .)
    COMA            reduce using rule 87 (compareType -> nonEqual .)
    CLOSING_BRACKET reduce using rule 87 (compareType -> nonEqual .)


state 120

    (94) op -> PL_OP .

    MI_OP           reduce using rule 94 (op -> PL_OP .)
    MU_OP           reduce using rule 94 (op -> PL_OP .)
    QU_UOP          reduce using rule 94 (op -> PL_OP .)
    OPENING_PARENTHESES reduce using rule 94 (op -> PL_OP .)
    LETTER          reduce using rule 94 (op -> PL_OP .)
    CONST_KW        reduce using rule 94 (op -> PL_OP .)
    TRUE            reduce using rule 94 (op -> PL_OP .)
    FALSE           reduce using rule 94 (op -> PL_OP .)
    NUMBER          reduce using rule 94 (op -> PL_OP .)
    PL_OP           reduce using rule 94 (op -> PL_OP .)
    DI_OP           reduce using rule 94 (op -> PL_OP .)
    PE_OP           reduce using rule 94 (op -> PL_OP .)
    OPENING_BRACKET reduce using rule 94 (op -> PL_OP .)
    LE_REL          reduce using rule 94 (op -> PL_OP .)
    GE_REL          reduce using rule 94 (op -> PL_OP .)
    EQ_REL          reduce using rule 94 (op -> PL_OP .)
    GT_REL          reduce using rule 94 (op -> PL_OP .)
    LT_REL          reduce using rule 94 (op -> PL_OP .)
    NEQ_REL         reduce using rule 94 (op -> PL_OP .)
    AA_LOP          reduce using rule 94 (op -> PL_OP .)
    OO_LOP          reduce using rule 94 (op -> PL_OP .)
    TIL_LOP         reduce using rule 94 (op -> PL_OP .)
    AND_LOP         reduce using rule 94 (op -> PL_OP .)
    OR_LOP          reduce using rule 94 (op -> PL_OP .)
    SEMICOLON       reduce using rule 94 (op -> PL_OP .)
    CLOSING_PARENTHESES reduce using rule 94 (op -> PL_OP .)
    COMA            reduce using rule 94 (op -> PL_OP .)
    CLOSING_BRACKET reduce using rule 94 (op -> PL_OP .)


state 121

    (95) op -> MI_OP .

    MI_OP           reduce using rule 95 (op -> MI_OP .)
    MU_OP           reduce using rule 95 (op -> MI_OP .)
    QU_UOP          reduce using rule 95 (op -> MI_OP .)
    OPENING_PARENTHESES reduce using rule 95 (op -> MI_OP .)
    LETTER          reduce using rule 95 (op -> MI_OP .)
    CONST_KW        reduce using rule 95 (op -> MI_OP .)
    TRUE            reduce using rule 95 (op -> MI_OP .)
    FALSE           reduce using rule 95 (op -> MI_OP .)
    NUMBER          reduce using rule 95 (op -> MI_OP .)
    PL_OP           reduce using rule 95 (op -> MI_OP .)
    DI_OP           reduce using rule 95 (op -> MI_OP .)
    PE_OP           reduce using rule 95 (op -> MI_OP .)
    OPENING_BRACKET reduce using rule 95 (op -> MI_OP .)
    LE_REL          reduce using rule 95 (op -> MI_OP .)
    GE_REL          reduce using rule 95 (op -> MI_OP .)
    EQ_REL          reduce using rule 95 (op -> MI_OP .)
    GT_REL          reduce using rule 95 (op -> MI_OP .)
    LT_REL          reduce using rule 95 (op -> MI_OP .)
    NEQ_REL         reduce using rule 95 (op -> MI_OP .)
    AA_LOP          reduce using rule 95 (op -> MI_OP .)
    OO_LOP          reduce using rule 95 (op -> MI_OP .)
    TIL_LOP         reduce using rule 95 (op -> MI_OP .)
    AND_LOP         reduce using rule 95 (op -> MI_OP .)
    OR_LOP          reduce using rule 95 (op -> MI_OP .)
    SEMICOLON       reduce using rule 95 (op -> MI_OP .)
    CLOSING_PARENTHESES reduce using rule 95 (op -> MI_OP .)
    COMA            reduce using rule 95 (op -> MI_OP .)
    CLOSING_BRACKET reduce using rule 95 (op -> MI_OP .)


state 122

    (96) op -> MU_OP .

    MI_OP           reduce using rule 96 (op -> MU_OP .)
    MU_OP           reduce using rule 96 (op -> MU_OP .)
    QU_UOP          reduce using rule 96 (op -> MU_OP .)
    OPENING_PARENTHESES reduce using rule 96 (op -> MU_OP .)
    LETTER          reduce using rule 96 (op -> MU_OP .)
    CONST_KW        reduce using rule 96 (op -> MU_OP .)
    TRUE            reduce using rule 96 (op -> MU_OP .)
    FALSE           reduce using rule 96 (op -> MU_OP .)
    NUMBER          reduce using rule 96 (op -> MU_OP .)
    PL_OP           reduce using rule 96 (op -> MU_OP .)
    DI_OP           reduce using rule 96 (op -> MU_OP .)
    PE_OP           reduce using rule 96 (op -> MU_OP .)
    OPENING_BRACKET reduce using rule 96 (op -> MU_OP .)
    LE_REL          reduce using rule 96 (op -> MU_OP .)
    GE_REL          reduce using rule 96 (op -> MU_OP .)
    EQ_REL          reduce using rule 96 (op -> MU_OP .)
    GT_REL          reduce using rule 96 (op -> MU_OP .)
    LT_REL          reduce using rule 96 (op -> MU_OP .)
    NEQ_REL         reduce using rule 96 (op -> MU_OP .)
    AA_LOP          reduce using rule 96 (op -> MU_OP .)
    OO_LOP          reduce using rule 96 (op -> MU_OP .)
    TIL_LOP         reduce using rule 96 (op -> MU_OP .)
    AND_LOP         reduce using rule 96 (op -> MU_OP .)
    OR_LOP          reduce using rule 96 (op -> MU_OP .)
    SEMICOLON       reduce using rule 96 (op -> MU_OP .)
    CLOSING_PARENTHESES reduce using rule 96 (op -> MU_OP .)
    COMA            reduce using rule 96 (op -> MU_OP .)
    CLOSING_BRACKET reduce using rule 96 (op -> MU_OP .)


state 123

    (97) op -> DI_OP .

    MI_OP           reduce using rule 97 (op -> DI_OP .)
    MU_OP           reduce using rule 97 (op -> DI_OP .)
    QU_UOP          reduce using rule 97 (op -> DI_OP .)
    OPENING_PARENTHESES reduce using rule 97 (op -> DI_OP .)
    LETTER          reduce using rule 97 (op -> DI_OP .)
    CONST_KW        reduce using rule 97 (op -> DI_OP .)
    TRUE            reduce using rule 97 (op -> DI_OP .)
    FALSE           reduce using rule 97 (op -> DI_OP .)
    NUMBER          reduce using rule 97 (op -> DI_OP .)
    PL_OP           reduce using rule 97 (op -> DI_OP .)
    DI_OP           reduce using rule 97 (op -> DI_OP .)
    PE_OP           reduce using rule 97 (op -> DI_OP .)
    OPENING_BRACKET reduce using rule 97 (op -> DI_OP .)
    LE_REL          reduce using rule 97 (op -> DI_OP .)
    GE_REL          reduce using rule 97 (op -> DI_OP .)
    EQ_REL          reduce using rule 97 (op -> DI_OP .)
    GT_REL          reduce using rule 97 (op -> DI_OP .)
    LT_REL          reduce using rule 97 (op -> DI_OP .)
    NEQ_REL         reduce using rule 97 (op -> DI_OP .)
    AA_LOP          reduce using rule 97 (op -> DI_OP .)
    OO_LOP          reduce using rule 97 (op -> DI_OP .)
    TIL_LOP         reduce using rule 97 (op -> DI_OP .)
    AND_LOP         reduce using rule 97 (op -> DI_OP .)
    OR_LOP          reduce using rule 97 (op -> DI_OP .)
    SEMICOLON       reduce using rule 97 (op -> DI_OP .)
    CLOSING_PARENTHESES reduce using rule 97 (op -> DI_OP .)
    COMA            reduce using rule 97 (op -> DI_OP .)
    CLOSING_BRACKET reduce using rule 97 (op -> DI_OP .)


state 124

    (98) op -> PE_OP .

    MI_OP           reduce using rule 98 (op -> PE_OP .)
    MU_OP           reduce using rule 98 (op -> PE_OP .)
    QU_UOP          reduce using rule 98 (op -> PE_OP .)
    OPENING_PARENTHESES reduce using rule 98 (op -> PE_OP .)
    LETTER          reduce using rule 98 (op -> PE_OP .)
    CONST_KW        reduce using rule 98 (op -> PE_OP .)
    TRUE            reduce using rule 98 (op -> PE_OP .)
    FALSE           reduce using rule 98 (op -> PE_OP .)
    NUMBER          reduce using rule 98 (op -> PE_OP .)
    PL_OP           reduce using rule 98 (op -> PE_OP .)
    DI_OP           reduce using rule 98 (op -> PE_OP .)
    PE_OP           reduce using rule 98 (op -> PE_OP .)
    OPENING_BRACKET reduce using rule 98 (op -> PE_OP .)
    LE_REL          reduce using rule 98 (op -> PE_OP .)
    GE_REL          reduce using rule 98 (op -> PE_OP .)
    EQ_REL          reduce using rule 98 (op -> PE_OP .)
    GT_REL          reduce using rule 98 (op -> PE_OP .)
    LT_REL          reduce using rule 98 (op -> PE_OP .)
    NEQ_REL         reduce using rule 98 (op -> PE_OP .)
    AA_LOP          reduce using rule 98 (op -> PE_OP .)
    OO_LOP          reduce using rule 98 (op -> PE_OP .)
    TIL_LOP         reduce using rule 98 (op -> PE_OP .)
    AND_LOP         reduce using rule 98 (op -> PE_OP .)
    OR_LOP          reduce using rule 98 (op -> PE_OP .)
    SEMICOLON       reduce using rule 98 (op -> PE_OP .)
    CLOSING_PARENTHESES reduce using rule 98 (op -> PE_OP .)
    COMA            reduce using rule 98 (op -> PE_OP .)
    CLOSING_BRACKET reduce using rule 98 (op -> PE_OP .)


state 125

    (88) equal -> LE_REL .

    MI_OP           reduce using rule 88 (equal -> LE_REL .)
    MU_OP           reduce using rule 88 (equal -> LE_REL .)
    QU_UOP          reduce using rule 88 (equal -> LE_REL .)
    OPENING_PARENTHESES reduce using rule 88 (equal -> LE_REL .)
    LETTER          reduce using rule 88 (equal -> LE_REL .)
    CONST_KW        reduce using rule 88 (equal -> LE_REL .)
    TRUE            reduce using rule 88 (equal -> LE_REL .)
    FALSE           reduce using rule 88 (equal -> LE_REL .)
    NUMBER          reduce using rule 88 (equal -> LE_REL .)
    PL_OP           reduce using rule 88 (equal -> LE_REL .)
    DI_OP           reduce using rule 88 (equal -> LE_REL .)
    PE_OP           reduce using rule 88 (equal -> LE_REL .)
    OPENING_BRACKET reduce using rule 88 (equal -> LE_REL .)
    AA_LOP          reduce using rule 88 (equal -> LE_REL .)
    OO_LOP          reduce using rule 88 (equal -> LE_REL .)
    TIL_LOP         reduce using rule 88 (equal -> LE_REL .)
    AND_LOP         reduce using rule 88 (equal -> LE_REL .)
    OR_LOP          reduce using rule 88 (equal -> LE_REL .)
    SEMICOLON       reduce using rule 88 (equal -> LE_REL .)
    CLOSING_PARENTHESES reduce using rule 88 (equal -> LE_REL .)
    COMA            reduce using rule 88 (equal -> LE_REL .)
    CLOSING_BRACKET reduce using rule 88 (equal -> LE_REL .)


state 126

    (89) equal -> GE_REL .

    MI_OP           reduce using rule 89 (equal -> GE_REL .)
    MU_OP           reduce using rule 89 (equal -> GE_REL .)
    QU_UOP          reduce using rule 89 (equal -> GE_REL .)
    OPENING_PARENTHESES reduce using rule 89 (equal -> GE_REL .)
    LETTER          reduce using rule 89 (equal -> GE_REL .)
    CONST_KW        reduce using rule 89 (equal -> GE_REL .)
    TRUE            reduce using rule 89 (equal -> GE_REL .)
    FALSE           reduce using rule 89 (equal -> GE_REL .)
    NUMBER          reduce using rule 89 (equal -> GE_REL .)
    PL_OP           reduce using rule 89 (equal -> GE_REL .)
    DI_OP           reduce using rule 89 (equal -> GE_REL .)
    PE_OP           reduce using rule 89 (equal -> GE_REL .)
    OPENING_BRACKET reduce using rule 89 (equal -> GE_REL .)
    AA_LOP          reduce using rule 89 (equal -> GE_REL .)
    OO_LOP          reduce using rule 89 (equal -> GE_REL .)
    TIL_LOP         reduce using rule 89 (equal -> GE_REL .)
    AND_LOP         reduce using rule 89 (equal -> GE_REL .)
    OR_LOP          reduce using rule 89 (equal -> GE_REL .)
    SEMICOLON       reduce using rule 89 (equal -> GE_REL .)
    CLOSING_PARENTHESES reduce using rule 89 (equal -> GE_REL .)
    COMA            reduce using rule 89 (equal -> GE_REL .)
    CLOSING_BRACKET reduce using rule 89 (equal -> GE_REL .)


state 127

    (90) equal -> EQ_REL .

    MI_OP           reduce using rule 90 (equal -> EQ_REL .)
    MU_OP           reduce using rule 90 (equal -> EQ_REL .)
    QU_UOP          reduce using rule 90 (equal -> EQ_REL .)
    OPENING_PARENTHESES reduce using rule 90 (equal -> EQ_REL .)
    LETTER          reduce using rule 90 (equal -> EQ_REL .)
    CONST_KW        reduce using rule 90 (equal -> EQ_REL .)
    TRUE            reduce using rule 90 (equal -> EQ_REL .)
    FALSE           reduce using rule 90 (equal -> EQ_REL .)
    NUMBER          reduce using rule 90 (equal -> EQ_REL .)
    PL_OP           reduce using rule 90 (equal -> EQ_REL .)
    DI_OP           reduce using rule 90 (equal -> EQ_REL .)
    PE_OP           reduce using rule 90 (equal -> EQ_REL .)
    OPENING_BRACKET reduce using rule 90 (equal -> EQ_REL .)
    AA_LOP          reduce using rule 90 (equal -> EQ_REL .)
    OO_LOP          reduce using rule 90 (equal -> EQ_REL .)
    TIL_LOP         reduce using rule 90 (equal -> EQ_REL .)
    AND_LOP         reduce using rule 90 (equal -> EQ_REL .)
    OR_LOP          reduce using rule 90 (equal -> EQ_REL .)
    SEMICOLON       reduce using rule 90 (equal -> EQ_REL .)
    CLOSING_PARENTHESES reduce using rule 90 (equal -> EQ_REL .)
    COMA            reduce using rule 90 (equal -> EQ_REL .)
    CLOSING_BRACKET reduce using rule 90 (equal -> EQ_REL .)


state 128

    (91) nonEqual -> GT_REL .

    MI_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    MU_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    QU_UOP          reduce using rule 91 (nonEqual -> GT_REL .)
    OPENING_PARENTHESES reduce using rule 91 (nonEqual -> GT_REL .)
    LETTER          reduce using rule 91 (nonEqual -> GT_REL .)
    CONST_KW        reduce using rule 91 (nonEqual -> GT_REL .)
    TRUE            reduce using rule 91 (nonEqual -> GT_REL .)
    FALSE           reduce using rule 91 (nonEqual -> GT_REL .)
    NUMBER          reduce using rule 91 (nonEqual -> GT_REL .)
    PL_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    DI_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    PE_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    OPENING_BRACKET reduce using rule 91 (nonEqual -> GT_REL .)
    AA_LOP          reduce using rule 91 (nonEqual -> GT_REL .)
    OO_LOP          reduce using rule 91 (nonEqual -> GT_REL .)
    TIL_LOP         reduce using rule 91 (nonEqual -> GT_REL .)
    AND_LOP         reduce using rule 91 (nonEqual -> GT_REL .)
    OR_LOP          reduce using rule 91 (nonEqual -> GT_REL .)
    SEMICOLON       reduce using rule 91 (nonEqual -> GT_REL .)
    CLOSING_PARENTHESES reduce using rule 91 (nonEqual -> GT_REL .)
    COMA            reduce using rule 91 (nonEqual -> GT_REL .)
    CLOSING_BRACKET reduce using rule 91 (nonEqual -> GT_REL .)


state 129

    (92) nonEqual -> LT_REL .

    MI_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    MU_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    QU_UOP          reduce using rule 92 (nonEqual -> LT_REL .)
    OPENING_PARENTHESES reduce using rule 92 (nonEqual -> LT_REL .)
    LETTER          reduce using rule 92 (nonEqual -> LT_REL .)
    CONST_KW        reduce using rule 92 (nonEqual -> LT_REL .)
    TRUE            reduce using rule 92 (nonEqual -> LT_REL .)
    FALSE           reduce using rule 92 (nonEqual -> LT_REL .)
    NUMBER          reduce using rule 92 (nonEqual -> LT_REL .)
    PL_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    DI_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    PE_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    OPENING_BRACKET reduce using rule 92 (nonEqual -> LT_REL .)
    AA_LOP          reduce using rule 92 (nonEqual -> LT_REL .)
    OO_LOP          reduce using rule 92 (nonEqual -> LT_REL .)
    TIL_LOP         reduce using rule 92 (nonEqual -> LT_REL .)
    AND_LOP         reduce using rule 92 (nonEqual -> LT_REL .)
    OR_LOP          reduce using rule 92 (nonEqual -> LT_REL .)
    SEMICOLON       reduce using rule 92 (nonEqual -> LT_REL .)
    CLOSING_PARENTHESES reduce using rule 92 (nonEqual -> LT_REL .)
    COMA            reduce using rule 92 (nonEqual -> LT_REL .)
    CLOSING_BRACKET reduce using rule 92 (nonEqual -> LT_REL .)


state 130

    (93) nonEqual -> NEQ_REL .

    MI_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    MU_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    QU_UOP          reduce using rule 93 (nonEqual -> NEQ_REL .)
    OPENING_PARENTHESES reduce using rule 93 (nonEqual -> NEQ_REL .)
    LETTER          reduce using rule 93 (nonEqual -> NEQ_REL .)
    CONST_KW        reduce using rule 93 (nonEqual -> NEQ_REL .)
    TRUE            reduce using rule 93 (nonEqual -> NEQ_REL .)
    FALSE           reduce using rule 93 (nonEqual -> NEQ_REL .)
    NUMBER          reduce using rule 93 (nonEqual -> NEQ_REL .)
    PL_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    DI_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    PE_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    OPENING_BRACKET reduce using rule 93 (nonEqual -> NEQ_REL .)
    AA_LOP          reduce using rule 93 (nonEqual -> NEQ_REL .)
    OO_LOP          reduce using rule 93 (nonEqual -> NEQ_REL .)
    TIL_LOP         reduce using rule 93 (nonEqual -> NEQ_REL .)
    AND_LOP         reduce using rule 93 (nonEqual -> NEQ_REL .)
    OR_LOP          reduce using rule 93 (nonEqual -> NEQ_REL .)
    SEMICOLON       reduce using rule 93 (nonEqual -> NEQ_REL .)
    CLOSING_PARENTHESES reduce using rule 93 (nonEqual -> NEQ_REL .)
    COMA            reduce using rule 93 (nonEqual -> NEQ_REL .)
    CLOSING_BRACKET reduce using rule 93 (nonEqual -> NEQ_REL .)


state 131

    (99) unaryExpression -> unaryop unaryExpression .

    PL_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    MI_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    MU_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    DI_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    PE_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    LE_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    GE_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    EQ_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    GT_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    LT_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    NEQ_REL         reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    AA_LOP          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    OO_LOP          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    TIL_LOP         reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    AND_LOP         reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    OR_LOP          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    COMA            reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)


state 132

    (33) paramList -> paramList COMA paramId .

    COMA            reduce using rule 33 (paramList -> paramList COMA paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramList COMA paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramList COMA paramId .)


state 133

    (38) paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .

    COMA            reduce using rule 38 (paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 38 (paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 38 (paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .)


state 134

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    NUMBER          reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)
    PP_OP           reduce using rule 52 (statementList -> .)
    MM_OP           reduce using rule 52 (statementList -> .)
    OPENING_BRACKET reduce using rule 52 (statementList -> .)
    EQ_OP           reduce using rule 52 (statementList -> .)
    PLE_OP          reduce using rule 52 (statementList -> .)
    MIE_OP          reduce using rule 52 (statementList -> .)
    MUE_OP          reduce using rule 52 (statementList -> .)
    DIE_OP          reduce using rule 52 (statementList -> .)
    PL_OP           reduce using rule 52 (statementList -> .)
    DI_OP           reduce using rule 52 (statementList -> .)
    PE_OP           reduce using rule 52 (statementList -> .)
    LE_REL          reduce using rule 52 (statementList -> .)
    GE_REL          reduce using rule 52 (statementList -> .)
    EQ_REL          reduce using rule 52 (statementList -> .)
    GT_REL          reduce using rule 52 (statementList -> .)
    LT_REL          reduce using rule 52 (statementList -> .)
    NEQ_REL         reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 156

state 135

    (14) variableList -> variableList COMA variableList .
    (14) variableList -> variableList . COMA variableList

  ! shift/reduce conflict for COMA resolved as shift
    SEMICOLON       reduce using rule 14 (variableList -> variableList COMA variableList .)
    COMA            shift and go to state 85

  ! COMA            [ reduce using rule 14 (variableList -> variableList COMA variableList .) ]


state 136

    (17) varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 17 (varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMA            reduce using rule 17 (varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 137

    (111) inalterable -> LETTER OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 157


state 138

    (112) args -> arguments .
    (114) arguments -> arguments . COMA allExpression

    CLOSING_PARENTHESES reduce using rule 112 (args -> arguments .)
    COMA            shift and go to state 158


state 139

    (115) arguments -> allExpression .

    COMA            reduce using rule 115 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 115 (arguments -> allExpression .)


state 140

    (109) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PL_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MI_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MU_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DI_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PE_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LE_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GE_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQ_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GT_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LT_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NEQ_REL         reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AA_LOP          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OO_LOP          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIL_LOP         reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND_LOP         reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR_LOP          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMA            reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 141

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    CLOSING_BRACE   shift and go to state 160
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 161
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 142

    (35) localDeclarations -> ScopedVariableDec localDeclarations .

    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    IF_KW           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    TILL_KW         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    NUMBER          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    LETTER          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    AA_LOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OO_LOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    TIL_LOP         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    AND_LOP         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OR_LOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MI_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MU_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    QU_UOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    CONST_KW        reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    TRUE            reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    FALSE           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    PP_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MM_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OPENING_BRACKET reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    EQ_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    PLE_OP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MIE_OP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MUE_OP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    DIE_OP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    PL_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    DI_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    PE_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    LE_REL          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    GE_REL          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    EQ_REL          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    GT_REL          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    LT_REL          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    NEQ_REL         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)


state 143

    (13) ScopedVariableDec -> scopedSpecifier variableList . SEMICOLON
    (14) variableList -> variableList . COMA variableList

    SEMICOLON       shift and go to state 168
    COMA            shift and go to state 85


state 144

    (20) scopedSpecifier -> STATIC_KW type .

    LETTER          reduce using rule 20 (scopedSpecifier -> STATIC_KW type .)
    NUMBER          reduce using rule 20 (scopedSpecifier -> STATIC_KW type .)
    SEMICOLON       reduce using rule 20 (scopedSpecifier -> STATIC_KW type .)
    COMA            reduce using rule 20 (scopedSpecifier -> STATIC_KW type .)
    COLON           reduce using rule 20 (scopedSpecifier -> STATIC_KW type .)


state 145

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES ifBodyWithBracket
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 169
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

    logicOp                        shift and go to state 99

state 146

    (77) eachExpression -> eachExpression logicOp eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    SEMICOLON       reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    CLOSING_PARENTHESES reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    COMA            reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

  ! AA_LOP          [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OO_LOP          [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! AND_LOP         [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OR_LOP          [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]

    logicOp                        shift and go to state 99

state 147

    (78) eachExpression -> eachExpression logicOp THEN_KW . eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 170
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 148

    (81) eachExpression -> eachExpression logicOp ELSE_KW . eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    LETTER          shift and go to state 89
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78
    NUMBER          shift and go to state 20
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 171
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    alterable                      shift and go to state 88
    constant                       shift and go to state 75
    numOrLetter                    shift and go to state 57

state 149

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 172
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

    logicOp                        shift and go to state 99

state 150

    (65) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    VOID_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    IF_KW           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    NUMBER          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LETTER          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AA_LOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OO_LOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIL_LOP         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AND_LOP         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OR_LOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MI_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MU_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QU_UOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE            reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    PP_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MM_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACKET reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    EQ_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    PLE_OP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MIE_OP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MUE_OP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    DIE_OP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    PL_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    DI_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    PE_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LE_REL          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GE_REL          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    EQ_REL          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GT_REL          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LT_REL          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    NEQ_REL         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 151

    (66) returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .

    VOID_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    BOOLEAN_KW      reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CHARACTER_KW    reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    INTEGER_KW      reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CHAR_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    BOOL_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    INT_KW          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    $end            reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CLOSING_BRACE   reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    SEMICOLON       reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_BRACE   reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    IF_KW           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TILL_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    COMEBACK_KW     reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    GIVEBACK_KW     reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CONTINUE_KW     reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    NUMBER          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    LETTER          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    AA_LOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OO_LOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TIL_LOP         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    AND_LOP         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OR_LOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MI_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MU_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    QU_UOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CONST_KW        reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TRUE            reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    FALSE           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    PP_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MM_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_BRACKET reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    EQ_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    PLE_OP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MIE_OP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MUE_OP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    DIE_OP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    PL_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    DI_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    PE_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    LE_REL          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    GE_REL          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    EQ_REL          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    GT_REL          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    LT_REL          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    NEQ_REL         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OTHER_KW        reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)


state 152

    (68) allExpression -> alterable mathOp allExpression .

    SEMICOLON       reduce using rule 68 (allExpression -> alterable mathOp allExpression .)
    CLOSING_PARENTHESES reduce using rule 68 (allExpression -> alterable mathOp allExpression .)
    COMA            reduce using rule 68 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 68 (allExpression -> alterable mathOp allExpression .)


state 153

    (107) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 173


state 154

    (82) relExpression -> mathEXP compareType mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (94) op -> . PL_OP
    (95) op -> . MI_OP
    (96) op -> . MU_OP
    (97) op -> . DI_OP
    (98) op -> . PE_OP

    AA_LOP          reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    OO_LOP          reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    TIL_LOP         reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    AND_LOP         reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    OR_LOP          reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    COMA            reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    PL_OP           shift and go to state 120
    MI_OP           shift and go to state 121
    MU_OP           shift and go to state 122
    DI_OP           shift and go to state 123
    PE_OP           shift and go to state 124

    op                             shift and go to state 117

state 155

    (84) mathEXP -> mathEXP op mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (94) op -> . PL_OP
    (95) op -> . MI_OP
    (96) op -> . MU_OP
    (97) op -> . DI_OP
    (98) op -> . PE_OP

  ! shift/reduce conflict for PL_OP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for DI_OP resolved as shift
  ! shift/reduce conflict for PE_OP resolved as shift
    LE_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    GE_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    EQ_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    GT_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    LT_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    NEQ_REL         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    AA_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    OO_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    TIL_LOP         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    AND_LOP         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    OR_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    SEMICOLON       reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_PARENTHESES reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    COMA            reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_BRACKET reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    PL_OP           shift and go to state 120
    MI_OP           shift and go to state 121
    MU_OP           shift and go to state 122
    DI_OP           shift and go to state 123
    PE_OP           shift and go to state 124

  ! PL_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! MI_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! MU_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! DI_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! PE_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]

    op                             shift and go to state 117

state 156

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    CLOSING_BRACE   shift and go to state 174
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 161
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 157

    (111) inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PL_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MI_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MU_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DI_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PE_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LE_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GE_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQ_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GT_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LT_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NEQ_REL         reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AA_LOP          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OO_LOP          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIL_LOP         reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND_LOP         reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR_LOP          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMA            reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 158

    (114) arguments -> arguments COMA . allExpression
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]

    allExpression                  shift and go to state 175
    alterable                      shift and go to state 59
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 159

    (50) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    NUMBER          reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    PP_OP           reduce using rule 36 (localDeclarations -> .)
    MM_OP           reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACKET reduce using rule 36 (localDeclarations -> .)
    EQ_OP           reduce using rule 36 (localDeclarations -> .)
    PLE_OP          reduce using rule 36 (localDeclarations -> .)
    MIE_OP          reduce using rule 36 (localDeclarations -> .)
    MUE_OP          reduce using rule 36 (localDeclarations -> .)
    DIE_OP          reduce using rule 36 (localDeclarations -> .)
    PL_OP           reduce using rule 36 (localDeclarations -> .)
    DI_OP           reduce using rule 36 (localDeclarations -> .)
    PE_OP           reduce using rule 36 (localDeclarations -> .)
    LE_REL          reduce using rule 36 (localDeclarations -> .)
    GE_REL          reduce using rule 36 (localDeclarations -> .)
    EQ_REL          reduce using rule 36 (localDeclarations -> .)
    GT_REL          reduce using rule 36 (localDeclarations -> .)
    LT_REL          reduce using rule 36 (localDeclarations -> .)
    NEQ_REL         reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 95
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    localDeclarations              shift and go to state 176
    ScopedVariableDec              shift and go to state 93
    scopedSpecifier                shift and go to state 94
    type                           shift and go to state 96

state 160

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 161

    (51) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 51 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 51 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 51 (statementList -> statementList statement .)
    IF_KW           reduce using rule 51 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 51 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 51 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 51 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 51 (statementList -> statementList statement .)
    NUMBER          reduce using rule 51 (statementList -> statementList statement .)
    LETTER          reduce using rule 51 (statementList -> statementList statement .)
    AA_LOP          reduce using rule 51 (statementList -> statementList statement .)
    OO_LOP          reduce using rule 51 (statementList -> statementList statement .)
    TIL_LOP         reduce using rule 51 (statementList -> statementList statement .)
    AND_LOP         reduce using rule 51 (statementList -> statementList statement .)
    OR_LOP          reduce using rule 51 (statementList -> statementList statement .)
    MI_OP           reduce using rule 51 (statementList -> statementList statement .)
    MU_OP           reduce using rule 51 (statementList -> statementList statement .)
    QU_UOP          reduce using rule 51 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 51 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 51 (statementList -> statementList statement .)
    TRUE            reduce using rule 51 (statementList -> statementList statement .)
    FALSE           reduce using rule 51 (statementList -> statementList statement .)
    PP_OP           reduce using rule 51 (statementList -> statementList statement .)
    MM_OP           reduce using rule 51 (statementList -> statementList statement .)
    OPENING_BRACKET reduce using rule 51 (statementList -> statementList statement .)
    EQ_OP           reduce using rule 51 (statementList -> statementList statement .)
    PLE_OP          reduce using rule 51 (statementList -> statementList statement .)
    MIE_OP          reduce using rule 51 (statementList -> statementList statement .)
    MUE_OP          reduce using rule 51 (statementList -> statementList statement .)
    DIE_OP          reduce using rule 51 (statementList -> statementList statement .)
    PL_OP           reduce using rule 51 (statementList -> statementList statement .)
    DI_OP           reduce using rule 51 (statementList -> statementList statement .)
    PE_OP           reduce using rule 51 (statementList -> statementList statement .)
    LE_REL          reduce using rule 51 (statementList -> statementList statement .)
    GE_REL          reduce using rule 51 (statementList -> statementList statement .)
    EQ_REL          reduce using rule 51 (statementList -> statementList statement .)
    GT_REL          reduce using rule 51 (statementList -> statementList statement .)
    LT_REL          reduce using rule 51 (statementList -> statementList statement .)
    NEQ_REL         reduce using rule 51 (statementList -> statementList statement .)


state 162

    (39) statement -> phrase .

    CLOSING_BRACE   reduce using rule 39 (statement -> phrase .)
    SEMICOLON       reduce using rule 39 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 39 (statement -> phrase .)
    IF_KW           reduce using rule 39 (statement -> phrase .)
    TILL_KW         reduce using rule 39 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 39 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 39 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 39 (statement -> phrase .)
    NUMBER          reduce using rule 39 (statement -> phrase .)
    LETTER          reduce using rule 39 (statement -> phrase .)
    AA_LOP          reduce using rule 39 (statement -> phrase .)
    OO_LOP          reduce using rule 39 (statement -> phrase .)
    TIL_LOP         reduce using rule 39 (statement -> phrase .)
    AND_LOP         reduce using rule 39 (statement -> phrase .)
    OR_LOP          reduce using rule 39 (statement -> phrase .)
    MI_OP           reduce using rule 39 (statement -> phrase .)
    MU_OP           reduce using rule 39 (statement -> phrase .)
    QU_UOP          reduce using rule 39 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 39 (statement -> phrase .)
    CONST_KW        reduce using rule 39 (statement -> phrase .)
    TRUE            reduce using rule 39 (statement -> phrase .)
    FALSE           reduce using rule 39 (statement -> phrase .)
    PP_OP           reduce using rule 39 (statement -> phrase .)
    MM_OP           reduce using rule 39 (statement -> phrase .)
    OPENING_BRACKET reduce using rule 39 (statement -> phrase .)
    EQ_OP           reduce using rule 39 (statement -> phrase .)
    PLE_OP          reduce using rule 39 (statement -> phrase .)
    MIE_OP          reduce using rule 39 (statement -> phrase .)
    MUE_OP          reduce using rule 39 (statement -> phrase .)
    DIE_OP          reduce using rule 39 (statement -> phrase .)
    PL_OP           reduce using rule 39 (statement -> phrase .)
    DI_OP           reduce using rule 39 (statement -> phrase .)
    PE_OP           reduce using rule 39 (statement -> phrase .)
    LE_REL          reduce using rule 39 (statement -> phrase .)
    GE_REL          reduce using rule 39 (statement -> phrase .)
    EQ_REL          reduce using rule 39 (statement -> phrase .)
    GT_REL          reduce using rule 39 (statement -> phrase .)
    LT_REL          reduce using rule 39 (statement -> phrase .)
    NEQ_REL         reduce using rule 39 (statement -> phrase .)
    OTHER_KW        reduce using rule 39 (statement -> phrase .)
    VOID_KW         reduce using rule 39 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 39 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 39 (statement -> phrase .)
    INTEGER_KW      reduce using rule 39 (statement -> phrase .)
    CHAR_KW         reduce using rule 39 (statement -> phrase .)
    BOOL_KW         reduce using rule 39 (statement -> phrase .)
    INT_KW          reduce using rule 39 (statement -> phrase .)
    $end            reduce using rule 39 (statement -> phrase .)


state 163

    (40) statement -> compoundPhrase .

    CLOSING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    IF_KW           reduce using rule 40 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 40 (statement -> compoundPhrase .)
    NUMBER          reduce using rule 40 (statement -> compoundPhrase .)
    LETTER          reduce using rule 40 (statement -> compoundPhrase .)
    AA_LOP          reduce using rule 40 (statement -> compoundPhrase .)
    OO_LOP          reduce using rule 40 (statement -> compoundPhrase .)
    TIL_LOP         reduce using rule 40 (statement -> compoundPhrase .)
    AND_LOP         reduce using rule 40 (statement -> compoundPhrase .)
    OR_LOP          reduce using rule 40 (statement -> compoundPhrase .)
    MI_OP           reduce using rule 40 (statement -> compoundPhrase .)
    MU_OP           reduce using rule 40 (statement -> compoundPhrase .)
    QU_UOP          reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 40 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 40 (statement -> compoundPhrase .)
    TRUE            reduce using rule 40 (statement -> compoundPhrase .)
    FALSE           reduce using rule 40 (statement -> compoundPhrase .)
    PP_OP           reduce using rule 40 (statement -> compoundPhrase .)
    MM_OP           reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_BRACKET reduce using rule 40 (statement -> compoundPhrase .)
    EQ_OP           reduce using rule 40 (statement -> compoundPhrase .)
    PLE_OP          reduce using rule 40 (statement -> compoundPhrase .)
    MIE_OP          reduce using rule 40 (statement -> compoundPhrase .)
    MUE_OP          reduce using rule 40 (statement -> compoundPhrase .)
    DIE_OP          reduce using rule 40 (statement -> compoundPhrase .)
    PL_OP           reduce using rule 40 (statement -> compoundPhrase .)
    DI_OP           reduce using rule 40 (statement -> compoundPhrase .)
    PE_OP           reduce using rule 40 (statement -> compoundPhrase .)
    LE_REL          reduce using rule 40 (statement -> compoundPhrase .)
    GE_REL          reduce using rule 40 (statement -> compoundPhrase .)
    EQ_REL          reduce using rule 40 (statement -> compoundPhrase .)
    GT_REL          reduce using rule 40 (statement -> compoundPhrase .)
    LT_REL          reduce using rule 40 (statement -> compoundPhrase .)
    NEQ_REL         reduce using rule 40 (statement -> compoundPhrase .)
    OTHER_KW        reduce using rule 40 (statement -> compoundPhrase .)
    VOID_KW         reduce using rule 40 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 40 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 40 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 40 (statement -> compoundPhrase .)
    $end            reduce using rule 40 (statement -> compoundPhrase .)


state 164

    (41) statement -> selectPhrase .

    CLOSING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    SEMICOLON       reduce using rule 41 (statement -> selectPhrase .)
    OPENING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    IF_KW           reduce using rule 41 (statement -> selectPhrase .)
    TILL_KW         reduce using rule 41 (statement -> selectPhrase .)
    COMEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    CONTINUE_KW     reduce using rule 41 (statement -> selectPhrase .)
    NUMBER          reduce using rule 41 (statement -> selectPhrase .)
    LETTER          reduce using rule 41 (statement -> selectPhrase .)
    AA_LOP          reduce using rule 41 (statement -> selectPhrase .)
    OO_LOP          reduce using rule 41 (statement -> selectPhrase .)
    TIL_LOP         reduce using rule 41 (statement -> selectPhrase .)
    AND_LOP         reduce using rule 41 (statement -> selectPhrase .)
    OR_LOP          reduce using rule 41 (statement -> selectPhrase .)
    MI_OP           reduce using rule 41 (statement -> selectPhrase .)
    MU_OP           reduce using rule 41 (statement -> selectPhrase .)
    QU_UOP          reduce using rule 41 (statement -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 41 (statement -> selectPhrase .)
    CONST_KW        reduce using rule 41 (statement -> selectPhrase .)
    TRUE            reduce using rule 41 (statement -> selectPhrase .)
    FALSE           reduce using rule 41 (statement -> selectPhrase .)
    PP_OP           reduce using rule 41 (statement -> selectPhrase .)
    MM_OP           reduce using rule 41 (statement -> selectPhrase .)
    OPENING_BRACKET reduce using rule 41 (statement -> selectPhrase .)
    EQ_OP           reduce using rule 41 (statement -> selectPhrase .)
    PLE_OP          reduce using rule 41 (statement -> selectPhrase .)
    MIE_OP          reduce using rule 41 (statement -> selectPhrase .)
    MUE_OP          reduce using rule 41 (statement -> selectPhrase .)
    DIE_OP          reduce using rule 41 (statement -> selectPhrase .)
    PL_OP           reduce using rule 41 (statement -> selectPhrase .)
    DI_OP           reduce using rule 41 (statement -> selectPhrase .)
    PE_OP           reduce using rule 41 (statement -> selectPhrase .)
    LE_REL          reduce using rule 41 (statement -> selectPhrase .)
    GE_REL          reduce using rule 41 (statement -> selectPhrase .)
    EQ_REL          reduce using rule 41 (statement -> selectPhrase .)
    GT_REL          reduce using rule 41 (statement -> selectPhrase .)
    LT_REL          reduce using rule 41 (statement -> selectPhrase .)
    NEQ_REL         reduce using rule 41 (statement -> selectPhrase .)
    OTHER_KW        reduce using rule 41 (statement -> selectPhrase .)
    VOID_KW         reduce using rule 41 (statement -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHARACTER_KW    reduce using rule 41 (statement -> selectPhrase .)
    INTEGER_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHAR_KW         reduce using rule 41 (statement -> selectPhrase .)
    BOOL_KW         reduce using rule 41 (statement -> selectPhrase .)
    INT_KW          reduce using rule 41 (statement -> selectPhrase .)
    $end            reduce using rule 41 (statement -> selectPhrase .)


state 165

    (42) statement -> iterationPhrase .

    CLOSING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    IF_KW           reduce using rule 42 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 42 (statement -> iterationPhrase .)
    NUMBER          reduce using rule 42 (statement -> iterationPhrase .)
    LETTER          reduce using rule 42 (statement -> iterationPhrase .)
    AA_LOP          reduce using rule 42 (statement -> iterationPhrase .)
    OO_LOP          reduce using rule 42 (statement -> iterationPhrase .)
    TIL_LOP         reduce using rule 42 (statement -> iterationPhrase .)
    AND_LOP         reduce using rule 42 (statement -> iterationPhrase .)
    OR_LOP          reduce using rule 42 (statement -> iterationPhrase .)
    MI_OP           reduce using rule 42 (statement -> iterationPhrase .)
    MU_OP           reduce using rule 42 (statement -> iterationPhrase .)
    QU_UOP          reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 42 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 42 (statement -> iterationPhrase .)
    TRUE            reduce using rule 42 (statement -> iterationPhrase .)
    FALSE           reduce using rule 42 (statement -> iterationPhrase .)
    PP_OP           reduce using rule 42 (statement -> iterationPhrase .)
    MM_OP           reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_BRACKET reduce using rule 42 (statement -> iterationPhrase .)
    EQ_OP           reduce using rule 42 (statement -> iterationPhrase .)
    PLE_OP          reduce using rule 42 (statement -> iterationPhrase .)
    MIE_OP          reduce using rule 42 (statement -> iterationPhrase .)
    MUE_OP          reduce using rule 42 (statement -> iterationPhrase .)
    DIE_OP          reduce using rule 42 (statement -> iterationPhrase .)
    PL_OP           reduce using rule 42 (statement -> iterationPhrase .)
    DI_OP           reduce using rule 42 (statement -> iterationPhrase .)
    PE_OP           reduce using rule 42 (statement -> iterationPhrase .)
    LE_REL          reduce using rule 42 (statement -> iterationPhrase .)
    GE_REL          reduce using rule 42 (statement -> iterationPhrase .)
    EQ_REL          reduce using rule 42 (statement -> iterationPhrase .)
    GT_REL          reduce using rule 42 (statement -> iterationPhrase .)
    LT_REL          reduce using rule 42 (statement -> iterationPhrase .)
    NEQ_REL         reduce using rule 42 (statement -> iterationPhrase .)
    OTHER_KW        reduce using rule 42 (statement -> iterationPhrase .)
    VOID_KW         reduce using rule 42 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 42 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 42 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 42 (statement -> iterationPhrase .)
    $end            reduce using rule 42 (statement -> iterationPhrase .)


state 166

    (43) statement -> returnPhrase .

    CLOSING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 43 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    IF_KW           reduce using rule 43 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 43 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 43 (statement -> returnPhrase .)
    NUMBER          reduce using rule 43 (statement -> returnPhrase .)
    LETTER          reduce using rule 43 (statement -> returnPhrase .)
    AA_LOP          reduce using rule 43 (statement -> returnPhrase .)
    OO_LOP          reduce using rule 43 (statement -> returnPhrase .)
    TIL_LOP         reduce using rule 43 (statement -> returnPhrase .)
    AND_LOP         reduce using rule 43 (statement -> returnPhrase .)
    OR_LOP          reduce using rule 43 (statement -> returnPhrase .)
    MI_OP           reduce using rule 43 (statement -> returnPhrase .)
    MU_OP           reduce using rule 43 (statement -> returnPhrase .)
    QU_UOP          reduce using rule 43 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 43 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 43 (statement -> returnPhrase .)
    TRUE            reduce using rule 43 (statement -> returnPhrase .)
    FALSE           reduce using rule 43 (statement -> returnPhrase .)
    PP_OP           reduce using rule 43 (statement -> returnPhrase .)
    MM_OP           reduce using rule 43 (statement -> returnPhrase .)
    OPENING_BRACKET reduce using rule 43 (statement -> returnPhrase .)
    EQ_OP           reduce using rule 43 (statement -> returnPhrase .)
    PLE_OP          reduce using rule 43 (statement -> returnPhrase .)
    MIE_OP          reduce using rule 43 (statement -> returnPhrase .)
    MUE_OP          reduce using rule 43 (statement -> returnPhrase .)
    DIE_OP          reduce using rule 43 (statement -> returnPhrase .)
    PL_OP           reduce using rule 43 (statement -> returnPhrase .)
    DI_OP           reduce using rule 43 (statement -> returnPhrase .)
    PE_OP           reduce using rule 43 (statement -> returnPhrase .)
    LE_REL          reduce using rule 43 (statement -> returnPhrase .)
    GE_REL          reduce using rule 43 (statement -> returnPhrase .)
    EQ_REL          reduce using rule 43 (statement -> returnPhrase .)
    GT_REL          reduce using rule 43 (statement -> returnPhrase .)
    LT_REL          reduce using rule 43 (statement -> returnPhrase .)
    NEQ_REL         reduce using rule 43 (statement -> returnPhrase .)
    OTHER_KW        reduce using rule 43 (statement -> returnPhrase .)
    VOID_KW         reduce using rule 43 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 43 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 43 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 43 (statement -> returnPhrase .)
    INT_KW          reduce using rule 43 (statement -> returnPhrase .)
    $end            reduce using rule 43 (statement -> returnPhrase .)


state 167

    (44) statement -> continue .

    CLOSING_BRACE   reduce using rule 44 (statement -> continue .)
    SEMICOLON       reduce using rule 44 (statement -> continue .)
    OPENING_BRACE   reduce using rule 44 (statement -> continue .)
    IF_KW           reduce using rule 44 (statement -> continue .)
    TILL_KW         reduce using rule 44 (statement -> continue .)
    COMEBACK_KW     reduce using rule 44 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 44 (statement -> continue .)
    CONTINUE_KW     reduce using rule 44 (statement -> continue .)
    NUMBER          reduce using rule 44 (statement -> continue .)
    LETTER          reduce using rule 44 (statement -> continue .)
    AA_LOP          reduce using rule 44 (statement -> continue .)
    OO_LOP          reduce using rule 44 (statement -> continue .)
    TIL_LOP         reduce using rule 44 (statement -> continue .)
    AND_LOP         reduce using rule 44 (statement -> continue .)
    OR_LOP          reduce using rule 44 (statement -> continue .)
    MI_OP           reduce using rule 44 (statement -> continue .)
    MU_OP           reduce using rule 44 (statement -> continue .)
    QU_UOP          reduce using rule 44 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 44 (statement -> continue .)
    CONST_KW        reduce using rule 44 (statement -> continue .)
    TRUE            reduce using rule 44 (statement -> continue .)
    FALSE           reduce using rule 44 (statement -> continue .)
    PP_OP           reduce using rule 44 (statement -> continue .)
    MM_OP           reduce using rule 44 (statement -> continue .)
    OPENING_BRACKET reduce using rule 44 (statement -> continue .)
    EQ_OP           reduce using rule 44 (statement -> continue .)
    PLE_OP          reduce using rule 44 (statement -> continue .)
    MIE_OP          reduce using rule 44 (statement -> continue .)
    MUE_OP          reduce using rule 44 (statement -> continue .)
    DIE_OP          reduce using rule 44 (statement -> continue .)
    PL_OP           reduce using rule 44 (statement -> continue .)
    DI_OP           reduce using rule 44 (statement -> continue .)
    PE_OP           reduce using rule 44 (statement -> continue .)
    LE_REL          reduce using rule 44 (statement -> continue .)
    GE_REL          reduce using rule 44 (statement -> continue .)
    EQ_REL          reduce using rule 44 (statement -> continue .)
    GT_REL          reduce using rule 44 (statement -> continue .)
    LT_REL          reduce using rule 44 (statement -> continue .)
    NEQ_REL         reduce using rule 44 (statement -> continue .)
    OTHER_KW        reduce using rule 44 (statement -> continue .)
    VOID_KW         reduce using rule 44 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 44 (statement -> continue .)
    CHARACTER_KW    reduce using rule 44 (statement -> continue .)
    INTEGER_KW      reduce using rule 44 (statement -> continue .)
    CHAR_KW         reduce using rule 44 (statement -> continue .)
    BOOL_KW         reduce using rule 44 (statement -> continue .)
    INT_KW          reduce using rule 44 (statement -> continue .)
    $end            reduce using rule 44 (statement -> continue .)


state 168

    (13) ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .

    STATIC_KW       reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CHAR_KW         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    BOOL_KW         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    INT_KW          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CLOSING_BRACE   reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    SEMICOLON       reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_BRACE   reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    IF_KW           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TILL_KW         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    COMEBACK_KW     reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    GIVEBACK_KW     reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CONTINUE_KW     reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    NUMBER          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    LETTER          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    AA_LOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OO_LOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TIL_LOP         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    AND_LOP         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OR_LOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MI_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MU_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    QU_UOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CONST_KW        reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TRUE            reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    FALSE           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    PP_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MM_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_BRACKET reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    EQ_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    PLE_OP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MIE_OP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MUE_OP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    DIE_OP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    PL_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    DI_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    PE_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    LE_REL          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    GE_REL          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    EQ_REL          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    GT_REL          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    LT_REL          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    NEQ_REL         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)


state 169

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statementWithoutBracket
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . ifBodyWithBracket
    (45) statementWithoutBracket -> . phrase
    (46) statementWithoutBracket -> . selectPhrase
    (47) statementWithoutBracket -> . iterationPhrase
    (48) statementWithoutBracket -> . returnPhrase
    (49) statementWithoutBracket -> . continue
    (58) ifBodyWithBracket -> . OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE
    (59) ifBodyWithBracket -> . OPENING_BRACE statement statement statementList CLOSING_BRACE
    (60) ifBodyWithBracket -> . OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE
    (61) ifBodyWithBracket -> . OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE
    (62) ifBodyWithBracket -> . OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    OPENING_BRACE   shift and go to state 179
    SEMICOLON       shift and go to state 51
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 53
    statementWithoutBracket        shift and go to state 177
    ifBodyWithBracket              shift and go to state 178
    phrase                         shift and go to state 45
    selectPhrase                   shift and go to state 46
    iterationPhrase                shift and go to state 47
    returnPhrase                   shift and go to state 48
    continue                       shift and go to state 49
    allExpression                  shift and go to state 50
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 170

    (78) eachExpression -> eachExpression logicOp THEN_KW eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    SEMICOLON       reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    COMA            reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

  ! AA_LOP          [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! OO_LOP          [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! AND_LOP         [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! OR_LOP          [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]

    logicOp                        shift and go to state 99

state 171

    (81) eachExpression -> eachExpression logicOp ELSE_KW eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    SEMICOLON       reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    COMA            reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66

  ! AA_LOP          [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OO_LOP          [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! AND_LOP         [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OR_LOP          [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]

    logicOp                        shift and go to state 99

state 172

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 53
    statement                      shift and go to state 180
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 173

    (107) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    PP_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MM_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OPENING_BRACKET reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LETTER          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQ_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MIE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MUE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PL_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MI_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MU_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DI_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PE_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LE_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GE_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQ_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GT_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LT_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NEQ_REL         reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AA_LOP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OO_LOP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIL_LOP         reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND_LOP         reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR_LOP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMA            reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 174

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 175

    (114) arguments -> arguments COMA allExpression .

    COMA            reduce using rule 114 (arguments -> arguments COMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 114 (arguments -> arguments COMA allExpression .)


state 176

    (50) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    NUMBER          reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)
    PP_OP           reduce using rule 52 (statementList -> .)
    MM_OP           reduce using rule 52 (statementList -> .)
    OPENING_BRACKET reduce using rule 52 (statementList -> .)
    EQ_OP           reduce using rule 52 (statementList -> .)
    PLE_OP          reduce using rule 52 (statementList -> .)
    MIE_OP          reduce using rule 52 (statementList -> .)
    MUE_OP          reduce using rule 52 (statementList -> .)
    DIE_OP          reduce using rule 52 (statementList -> .)
    PL_OP           reduce using rule 52 (statementList -> .)
    DI_OP           reduce using rule 52 (statementList -> .)
    PE_OP           reduce using rule 52 (statementList -> .)
    LE_REL          reduce using rule 52 (statementList -> .)
    GE_REL          reduce using rule 52 (statementList -> .)
    EQ_REL          reduce using rule 52 (statementList -> .)
    GT_REL          reduce using rule 52 (statementList -> .)
    LT_REL          reduce using rule 52 (statementList -> .)
    NEQ_REL         reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 181

state 177

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket . OTHER_KW statement

  ! shift/reduce conflict for OTHER_KW resolved as shift
    VOID_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    BOOLEAN_KW      reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CHARACTER_KW    reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    INTEGER_KW      reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CHAR_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    BOOL_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    INT_KW          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    $end            reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CLOSING_BRACE   reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    SEMICOLON       reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OPENING_BRACE   reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    IF_KW           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    TILL_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    COMEBACK_KW     reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    GIVEBACK_KW     reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CONTINUE_KW     reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    NUMBER          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    LETTER          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    AA_LOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OO_LOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    TIL_LOP         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    AND_LOP         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OR_LOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MI_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MU_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    QU_UOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OPENING_PARENTHESES reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CONST_KW        reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    TRUE            reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    FALSE           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    PP_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MM_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OPENING_BRACKET reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    EQ_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    PLE_OP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MIE_OP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MUE_OP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    DIE_OP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    PL_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    DI_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    PE_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    LE_REL          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    GE_REL          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    EQ_REL          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    GT_REL          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    LT_REL          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    NEQ_REL         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OTHER_KW        shift and go to state 182

  ! OTHER_KW        [ reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .) ]


state 178

    (57) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .

    VOID_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    BOOLEAN_KW      reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CHARACTER_KW    reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    INTEGER_KW      reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CHAR_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    BOOL_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    INT_KW          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    $end            reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CLOSING_BRACE   reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    SEMICOLON       reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OPENING_BRACE   reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    IF_KW           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    TILL_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    COMEBACK_KW     reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    GIVEBACK_KW     reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CONTINUE_KW     reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    NUMBER          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    LETTER          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    AA_LOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OO_LOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    TIL_LOP         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    AND_LOP         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OR_LOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MI_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MU_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    QU_UOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OPENING_PARENTHESES reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CONST_KW        reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    TRUE            reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    FALSE           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    PP_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MM_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OPENING_BRACKET reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    EQ_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    PLE_OP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MIE_OP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MUE_OP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    DIE_OP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    PL_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    DI_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    PE_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    LE_REL          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    GE_REL          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    EQ_REL          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    GT_REL          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    LT_REL          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    NEQ_REL         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OTHER_KW        reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)


state 179

    (58) ifBodyWithBracket -> OPENING_BRACE . ScopedVariableDec localDeclarations statementList CLOSING_BRACE
    (59) ifBodyWithBracket -> OPENING_BRACE . statement statement statementList CLOSING_BRACE
    (60) ifBodyWithBracket -> OPENING_BRACE . statement OTHER_KW statement statement CLOSING_BRACE
    (61) ifBodyWithBracket -> OPENING_BRACE . statement statement OTHER_KW statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE . statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    STATIC_KW       shift and go to state 95
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    ScopedVariableDec              shift and go to state 183
    statement                      shift and go to state 184
    scopedSpecifier                shift and go to state 94
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    type                           shift and go to state 96
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 180

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    IF_KW           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    NUMBER          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AA_LOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OO_LOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIL_LOP         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AND_LOP         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OR_LOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MI_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MU_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QU_UOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE            reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    PP_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MM_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACKET reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    EQ_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    PLE_OP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MIE_OP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MUE_OP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    DIE_OP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    PL_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    DI_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    PE_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LE_REL          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GE_REL          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    EQ_REL          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GT_REL          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LT_REL          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    NEQ_REL         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OTHER_KW        reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)


state 181

    (50) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    CLOSING_BRACE   shift and go to state 185
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 161
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 182

    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    eachExpression                 shift and go to state 53
    statement                      shift and go to state 186
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 183

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    NUMBER          reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    PP_OP           reduce using rule 36 (localDeclarations -> .)
    MM_OP           reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACKET reduce using rule 36 (localDeclarations -> .)
    EQ_OP           reduce using rule 36 (localDeclarations -> .)
    PLE_OP          reduce using rule 36 (localDeclarations -> .)
    MIE_OP          reduce using rule 36 (localDeclarations -> .)
    MUE_OP          reduce using rule 36 (localDeclarations -> .)
    DIE_OP          reduce using rule 36 (localDeclarations -> .)
    PL_OP           reduce using rule 36 (localDeclarations -> .)
    DI_OP           reduce using rule 36 (localDeclarations -> .)
    PE_OP           reduce using rule 36 (localDeclarations -> .)
    LE_REL          reduce using rule 36 (localDeclarations -> .)
    GE_REL          reduce using rule 36 (localDeclarations -> .)
    EQ_REL          reduce using rule 36 (localDeclarations -> .)
    GT_REL          reduce using rule 36 (localDeclarations -> .)
    LT_REL          reduce using rule 36 (localDeclarations -> .)
    NEQ_REL         reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 95
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    ScopedVariableDec              shift and go to state 93
    localDeclarations              shift and go to state 187
    scopedSpecifier                shift and go to state 94
    type                           shift and go to state 96

state 184

    (59) ifBodyWithBracket -> OPENING_BRACE statement . statement statementList CLOSING_BRACE
    (60) ifBodyWithBracket -> OPENING_BRACE statement . OTHER_KW statement statement CLOSING_BRACE
    (61) ifBodyWithBracket -> OPENING_BRACE statement . statement OTHER_KW statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement . OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    OTHER_KW        shift and go to state 189
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 188
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 185

    (50) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    CLOSING_BRACE   reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    NUMBER          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE            reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    PP_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MM_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACKET reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    EQ_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    PLE_OP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MIE_OP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MUE_OP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    DIE_OP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    PL_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    DI_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    PE_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LE_REL          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GE_REL          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    EQ_REL          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GT_REL          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LT_REL          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    NEQ_REL         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 186

    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .

    VOID_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    BOOLEAN_KW      reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CHARACTER_KW    reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    INTEGER_KW      reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CHAR_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    BOOL_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    INT_KW          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    $end            reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CLOSING_BRACE   reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    SEMICOLON       reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OPENING_BRACE   reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    IF_KW           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    TILL_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    COMEBACK_KW     reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    GIVEBACK_KW     reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CONTINUE_KW     reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    NUMBER          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    LETTER          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    AA_LOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OO_LOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    TIL_LOP         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    AND_LOP         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OR_LOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MI_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MU_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    QU_UOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OPENING_PARENTHESES reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CONST_KW        reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    TRUE            reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    FALSE           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    PP_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MM_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OPENING_BRACKET reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    EQ_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    PLE_OP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MIE_OP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MUE_OP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    DIE_OP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    PL_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    DI_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    PE_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    LE_REL          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    GE_REL          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    EQ_REL          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    GT_REL          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    LT_REL          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    NEQ_REL         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OTHER_KW        reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)


state 187

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    NUMBER          reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)
    PP_OP           reduce using rule 52 (statementList -> .)
    MM_OP           reduce using rule 52 (statementList -> .)
    OPENING_BRACKET reduce using rule 52 (statementList -> .)
    EQ_OP           reduce using rule 52 (statementList -> .)
    PLE_OP          reduce using rule 52 (statementList -> .)
    MIE_OP          reduce using rule 52 (statementList -> .)
    MUE_OP          reduce using rule 52 (statementList -> .)
    DIE_OP          reduce using rule 52 (statementList -> .)
    PL_OP           reduce using rule 52 (statementList -> .)
    DI_OP           reduce using rule 52 (statementList -> .)
    PE_OP           reduce using rule 52 (statementList -> .)
    LE_REL          reduce using rule 52 (statementList -> .)
    GE_REL          reduce using rule 52 (statementList -> .)
    EQ_REL          reduce using rule 52 (statementList -> .)
    GT_REL          reduce using rule 52 (statementList -> .)
    LT_REL          reduce using rule 52 (statementList -> .)
    NEQ_REL         reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 190

state 188

    (59) ifBodyWithBracket -> OPENING_BRACE statement statement . statementList CLOSING_BRACE
    (61) ifBodyWithBracket -> OPENING_BRACE statement statement . OTHER_KW statement CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    OTHER_KW        shift and go to state 192
    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    NUMBER          reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)
    PP_OP           reduce using rule 52 (statementList -> .)
    MM_OP           reduce using rule 52 (statementList -> .)
    OPENING_BRACKET reduce using rule 52 (statementList -> .)
    EQ_OP           reduce using rule 52 (statementList -> .)
    PLE_OP          reduce using rule 52 (statementList -> .)
    MIE_OP          reduce using rule 52 (statementList -> .)
    MUE_OP          reduce using rule 52 (statementList -> .)
    DIE_OP          reduce using rule 52 (statementList -> .)
    PL_OP           reduce using rule 52 (statementList -> .)
    DI_OP           reduce using rule 52 (statementList -> .)
    PE_OP           reduce using rule 52 (statementList -> .)
    LE_REL          reduce using rule 52 (statementList -> .)
    GE_REL          reduce using rule 52 (statementList -> .)
    EQ_REL          reduce using rule 52 (statementList -> .)
    GT_REL          reduce using rule 52 (statementList -> .)
    LT_REL          reduce using rule 52 (statementList -> .)
    NEQ_REL         reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 191

state 189

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW . statement statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW . statement statement OTHER_KW statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 193
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 190

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    CLOSING_BRACE   shift and go to state 194
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 161
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 191

    (59) ifBodyWithBracket -> OPENING_BRACE statement statement statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    CLOSING_BRACE   shift and go to state 195
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 161
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 192

    (61) ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW . statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 196
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 193

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement . statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement . statement OTHER_KW statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 197
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 194

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    NUMBER          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    TRUE            reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    FALSE           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    PP_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MM_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACKET reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    EQ_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    PLE_OP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MIE_OP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MUE_OP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    DIE_OP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    PL_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    DI_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    PE_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    LE_REL          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    GE_REL          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    EQ_REL          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    GT_REL          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    LT_REL          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    NEQ_REL         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)


state 195

    (59) ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    $end            reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    NUMBER          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    LETTER          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    TRUE            reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    FALSE           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    PP_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MM_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OPENING_BRACKET reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    EQ_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    PLE_OP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MIE_OP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MUE_OP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    DIE_OP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    PL_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    DI_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    PE_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    LE_REL          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    GE_REL          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    EQ_REL          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    GT_REL          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    LT_REL          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    NEQ_REL         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)


state 196

    (61) ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 198


state 197

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement . CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement . OTHER_KW statement CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 200
    OTHER_KW        shift and go to state 199


state 198

    (61) ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .

    VOID_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    INT_KW          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    $end            reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    SEMICOLON       reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    IF_KW           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    TILL_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    NUMBER          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    LETTER          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    AA_LOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OO_LOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    TIL_LOP         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    AND_LOP         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OR_LOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MI_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MU_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    QU_UOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CONST_KW        reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    TRUE            reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    FALSE           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    PP_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MM_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_BRACKET reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    EQ_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    PLE_OP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MIE_OP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MUE_OP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    DIE_OP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    PL_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    DI_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    PE_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    LE_REL          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    GE_REL          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    EQ_REL          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    GT_REL          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    LT_REL          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    NEQ_REL         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OTHER_KW        reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)


state 199

    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW . statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . numOrLetter
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
    SEMICOLON       shift and go to state 51
    OPENING_BRACE   shift and go to state 159
    IF_KW           shift and go to state 52
    TILL_KW         shift and go to state 54
    COMEBACK_KW     shift and go to state 55
    GIVEBACK_KW     shift and go to state 56
    CONTINUE_KW     shift and go to state 58
    NUMBER          shift and go to state 20
    LETTER          shift and go to state 41
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 62
    OO_LOP          shift and go to state 63
    TIL_LOP         shift and go to state 64
    AND_LOP         shift and go to state 65
    OR_LOP          shift and go to state 66
    MI_OP           shift and go to state 71
    MU_OP           shift and go to state 72
    QU_UOP          shift and go to state 73
    OPENING_PARENTHESES shift and go to state 42
    CONST_KW        shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! MI_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! MU_OP           [ reduce using rule 4 (numOrLetter -> .) ]
  ! AA_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! OO_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! TIL_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! AND_LOP         [ reduce using rule 4 (numOrLetter -> .) ]
  ! OR_LOP          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    statement                      shift and go to state 201
    phrase                         shift and go to state 162
    compoundPhrase                 shift and go to state 163
    selectPhrase                   shift and go to state 164
    iterationPhrase                shift and go to state 165
    returnPhrase                   shift and go to state 166
    continue                       shift and go to state 167
    allExpression                  shift and go to state 50
    eachExpression                 shift and go to state 53
    numOrLetter                    shift and go to state 57
    alterable                      shift and go to state 59
    logicOp                        shift and go to state 60
    relExpression                  shift and go to state 61
    mathEXP                        shift and go to state 67
    unaryExpression                shift and go to state 68
    unaryop                        shift and go to state 69
    factor                         shift and go to state 70
    inalterable                    shift and go to state 74
    constant                       shift and go to state 75

state 200

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .

    VOID_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    INT_KW          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    $end            reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    SEMICOLON       reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    IF_KW           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    TILL_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    NUMBER          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    LETTER          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    AA_LOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OO_LOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    TIL_LOP         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    AND_LOP         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OR_LOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MI_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MU_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    QU_UOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CONST_KW        reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    TRUE            reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    FALSE           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    PP_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MM_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OPENING_BRACKET reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    EQ_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    PLE_OP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MIE_OP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MUE_OP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    DIE_OP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    PL_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    DI_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    PE_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    LE_REL          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    GE_REL          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    EQ_REL          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    GT_REL          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    LT_REL          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    NEQ_REL         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OTHER_KW        reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)


state 201

    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 202


state 202

    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .

    VOID_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    INT_KW          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    $end            reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    SEMICOLON       reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    IF_KW           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    TILL_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    NUMBER          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    LETTER          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    AA_LOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OO_LOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    TIL_LOP         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    AND_LOP         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OR_LOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MI_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MU_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    QU_UOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CONST_KW        reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    TRUE            reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    FALSE           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    PP_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MM_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_BRACKET reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    EQ_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    PLE_OP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MIE_OP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MUE_OP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    DIE_OP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    PL_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    DI_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    PE_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    LE_REL          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    GE_REL          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    EQ_REL          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    GT_REL          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    LT_REL          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    NEQ_REL         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OTHER_KW        reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LETTER in state 31 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 31 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 31 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 31 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 31 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 31 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 31 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 37 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 37 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 37 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 37 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 37 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 37 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 37 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 37 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 37 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 40 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 40 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 40 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 40 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 40 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 40 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 40 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 40 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 42 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 42 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 42 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 42 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 42 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 42 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 42 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 42 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 56 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 56 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 56 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 56 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 56 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 56 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 56 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 56 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 60 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 60 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 60 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 60 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 60 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 60 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 60 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 60 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 69 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 69 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 69 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 90 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 90 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 90 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 90 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 90 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 90 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 90 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 90 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 98 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 98 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 98 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 98 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 98 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 98 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 98 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 98 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 99 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 99 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 99 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 99 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 99 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 99 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 99 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 99 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 100 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 100 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 100 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 100 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 100 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 100 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 100 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 100 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 103 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 105 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 105 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 105 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 105 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 105 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 105 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 105 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 105 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 108 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 108 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 108 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 108 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 108 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 108 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 108 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 108 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 115 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 115 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 115 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 115 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 115 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 116 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 117 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 117 resolved as shift
WARNING: shift/reduce conflict for COMA in state 135 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 141 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 141 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 141 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 141 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 141 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 141 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 141 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 141 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 141 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 146 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 146 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 146 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 146 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 146 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 147 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 147 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 147 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 147 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 147 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 147 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 147 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 147 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 148 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 148 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 148 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for PL_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for DI_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for PE_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 156 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 156 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 156 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 156 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 156 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 156 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 156 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 156 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 156 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 158 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 158 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 158 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 158 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 158 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 158 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 158 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 158 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 169 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 169 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 169 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 169 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 169 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 169 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 169 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 169 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 169 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 172 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 172 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 172 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 172 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 172 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 172 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 172 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 172 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 172 resolved as shift
WARNING: shift/reduce conflict for OTHER_KW in state 177 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 179 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 179 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 179 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 179 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 179 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 179 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 179 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 179 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 179 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 181 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 181 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 181 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 181 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 181 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 181 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 181 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 181 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 181 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 182 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 182 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 182 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 182 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 182 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 182 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 182 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 182 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 182 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 184 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 184 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 184 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 184 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 184 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 184 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 184 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 184 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 184 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 189 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 189 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 189 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 189 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 189 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 189 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 189 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 189 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 190 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 190 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 190 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 190 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 190 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 190 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 190 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 190 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 191 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 191 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 191 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 191 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 191 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 191 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 191 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 191 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 192 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 192 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 192 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 192 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 192 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 192 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 192 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 192 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 193 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 193 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 193 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 193 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 193 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 193 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 193 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 193 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 199 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 199 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 199 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 199 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 199 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 199 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 199 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 199 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 90 resolved using rule (numOrLetter -> <empty>)
WARNING: rejected rule (args -> <empty>) in state 90
WARNING: Rule (args -> <empty>) is never reduced
