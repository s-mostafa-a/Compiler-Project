Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrLetter -> NUMBER
Rule 3     numOrLetter -> LETTER
Rule 4     numOrLetter -> <empty>
Rule 5     list -> list declaration
Rule 6     list -> declaration
Rule 7     declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 8     declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
Rule 9     declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 10    declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
Rule 11    declaration -> type LETTER varInitialization SEMICOLON
Rule 12    declaration -> type LETTER varInitialization COMA variableList SEMICOLON
Rule 13    ScopedVariableDec -> scopedSpecifier variableList SEMICOLON
Rule 14    variableList -> variableList COMA variableList
Rule 15    variableList -> varInitialization
Rule 16    varInitialization -> varForm
Rule 17    varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 18    varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
Rule 19    varForm -> LETTER
Rule 20    scopedSpecifier -> STATIC_KW type
Rule 21    scopedSpecifier -> type
Rule 22    type -> BOOLEAN_KW
Rule 23    type -> CHARACTER_KW
Rule 24    type -> INTEGER_KW
Rule 25    type -> CHAR_KW
Rule 26    type -> BOOL_KW
Rule 27    type -> INT_KW
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> <empty>
Rule 30    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList COMA paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> ScopedVariableDec localDeclarations
Rule 36    localDeclarations -> <empty>
Rule 37    paramId -> LETTER
Rule 38    paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET
Rule 39    statement -> phrase
Rule 40    statement -> compoundPhrase
Rule 41    statement -> selectPhrase
Rule 42    statement -> iterationPhrase
Rule 43    statement -> returnPhrase
Rule 44    statement -> continue
Rule 45    statementWithoutBracket -> phrase
Rule 46    statementWithoutBracket -> selectPhrase
Rule 47    statementWithoutBracket -> iterationPhrase
Rule 48    statementWithoutBracket -> returnPhrase
Rule 49    statementWithoutBracket -> continue
Rule 50    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 51    statementList -> statementList statement
Rule 52    statementList -> <empty>
Rule 53    phrase -> allExpression SEMICOLON
Rule 54    phrase -> SEMICOLON
Rule 55    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
Rule 56    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
Rule 57    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
Rule 58    ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE
Rule 59    ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE
Rule 60    ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE
Rule 61    ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE
Rule 62    ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
Rule 63    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 64    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 65    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 66    returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON
Rule 67    continue -> CONTINUE_KW SEMICOLON
Rule 68    allExpression -> alterable mathOp allExpression
Rule 69    allExpression -> alterable PP_OP
Rule 70    allExpression -> alterable MM_OP
Rule 71    allExpression -> eachExpression
Rule 72    mathOp -> EQ_OP
Rule 73    mathOp -> PLE_OP
Rule 74    mathOp -> MIE_OP
Rule 75    mathOp -> MUE_OP
Rule 76    mathOp -> DIE_OP
Rule 77    eachExpression -> eachExpression logicOp eachExpression
Rule 78    eachExpression -> eachExpression logicOp THEN_KW eachExpression
Rule 79    eachExpression -> logicOp eachExpression
Rule 80    eachExpression -> relExpression
Rule 81    eachExpression -> eachExpression logicOp ELSE_KW eachExpression
Rule 82    relExpression -> mathEXP compareType mathEXP
Rule 83    relExpression -> mathEXP
Rule 84    mathEXP -> mathEXP op mathEXP
Rule 85    mathEXP -> unaryExpression
Rule 86    compareType -> equal
Rule 87    compareType -> nonEqual
Rule 88    equal -> LE_REL
Rule 89    equal -> GE_REL
Rule 90    equal -> EQ_REL
Rule 91    nonEqual -> GT_REL
Rule 92    nonEqual -> LT_REL
Rule 93    nonEqual -> NEQ_REL
Rule 94    op -> PL_OP
Rule 95    op -> MI_OP
Rule 96    op -> MU_OP
Rule 97    op -> DI_OP
Rule 98    op -> PE_OP
Rule 99    unaryExpression -> unaryop unaryExpression
Rule 100   unaryExpression -> factor
Rule 101   unaryop -> MI_OP
Rule 102   unaryop -> MU_OP
Rule 103   unaryop -> QU_UOP
Rule 104   factor -> inalterable
Rule 105   factor -> alterable
Rule 106   alterable -> LETTER
Rule 107   alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 108   alterable -> alterable LETTER
Rule 109   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 110   inalterable -> constant
Rule 111   inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 112   args -> arguments
Rule 113   args -> <empty>
Rule 114   arguments -> arguments COMA allExpression
Rule 115   arguments -> allExpression
Rule 116   constant -> CONST_KW
Rule 117   constant -> TRUE
Rule 118   constant -> FALSE
Rule 119   logicOp -> AA_LOP
Rule 120   logicOp -> OO_LOP
Rule 121   logicOp -> TIL_LOP
Rule 122   logicOp -> AND_LOP
Rule 123   logicOp -> OR_LOP

Terminals, with rules where they appear

AA_LOP               : 119
AND_LOP              : 122
BOOLEAN_KW           : 22
BOOL_KW              : 26
CHARACTER_KW         : 23
CHAR_KW              : 25
CLOSING_BRACE        : 7 9 50 58 59 60 61 62
CLOSING_BRACKET      : 18 38 107
CLOSING_PARENTHESES  : 7 8 9 10 17 55 56 57 63 109 111
COLON                : 17
COMA                 : 12 14 33 114
COMEBACK_KW          : 64
COMMENT              : 
CONST_KW             : 116
CONTINUE_KW          : 67
DIE_OP               : 76
DI_OP                : 97
ELSE_KW              : 81
EQ_OP                : 72
EQ_REL               : 90
FALSE                : 118
GE_REL               : 89
GIVEBACK_KW          : 65 66
GT_REL               : 91
IF_KW                : 55 56 57
INTEGER_KW           : 24
INT_KW               : 27
LETTER               : 3 7 8 9 10 11 12 18 19 37 38 106 108 111
LE_REL               : 88
LT_REL               : 92
MIE_OP               : 74
MI_OP                : 95 101
MM_OP                : 70
MUE_OP               : 75
MU_OP                : 96 102
NEQ_REL              : 93
NUMBER               : 2 18
OO_LOP               : 120
OPENING_BRACE        : 7 9 50 58 59 60 61 62
OPENING_BRACKET      : 18 38 107
OPENING_PARENTHESES  : 7 8 9 10 17 55 56 57 63 109 111
OR_LOP               : 123
OTHER_KW             : 56 60 61 62 62
PE_OP                : 98
PLE_OP               : 73
PL_OP                : 94
PP_OP                : 69
QU_UOP               : 103
SEMICOLON            : 11 12 13 30 53 54 64 65 66 67
STATIC_KW            : 20
THEN_KW              : 78
TILL_KW              : 63
TIL_LOP              : 121
TRUE                 : 117
VOID_KW              : 7 8
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 35 58
allExpression        : 53 65 68 107 109 114 115
alterable            : 68 69 70 105 107 108
args                 : 111
arguments            : 112 114
compareType          : 82
compoundPhrase       : 40
constant             : 110
continue             : 44 49
declaration          : 5 6
eachExpression       : 17 55 56 57 63 71 77 77 78 78 79 81 81
equal                : 86
factor               : 100
ifBodyWithBracket    : 57
inalterable          : 104
iterationPhrase      : 42 47
list                 : 1 5
listOfParameters     : 28 30
localDeclarations    : 7 9 35 50 58
logicOp              : 77 78 79 81
mathEXP              : 82 82 83 84 84
mathOp               : 68
nonEqual             : 87
numOrLetter          : 66
op                   : 84
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 7 8 9 10
phrase               : 39 45
program              : 0
relExpression        : 80
returnPhrase         : 43 48
scopedSpecifier      : 13
selectPhrase         : 41 46
statement            : 51 56 59 59 60 60 60 61 61 61 62 62 62 62 63
statementList        : 7 9 50 51 58 59
statementWithoutBracket : 8 10 55 56
type                 : 9 10 11 12 20 21 32
unaryExpression      : 85 99
unaryop              : 99
varForm              : 16 17
varInitialization    : 11 12 15
variableList         : 12 13 14 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (5) list -> . list declaration
    (6) list -> . declaration
    (7) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (9) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> . type LETTER varInitialization SEMICOLON
    (12) declaration -> . type LETTER varInitialization COMA variableList SEMICOLON
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    VOID_KW         shift and go to state 4
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    program                        shift and go to state 1
    list                           shift and go to state 2
    declaration                    shift and go to state 3
    type                           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> list .
    (5) list -> list . declaration
    (7) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> . VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (9) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> . type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> . type LETTER varInitialization SEMICOLON
    (12) declaration -> . type LETTER varInitialization COMA variableList SEMICOLON
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 4
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    declaration                    shift and go to state 12
    type                           shift and go to state 5

state 3

    (6) list -> declaration .

    VOID_KW         reduce using rule 6 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 6 (list -> declaration .)
    CHARACTER_KW    reduce using rule 6 (list -> declaration .)
    INTEGER_KW      reduce using rule 6 (list -> declaration .)
    CHAR_KW         reduce using rule 6 (list -> declaration .)
    BOOL_KW         reduce using rule 6 (list -> declaration .)
    INT_KW          reduce using rule 6 (list -> declaration .)
    $end            reduce using rule 6 (list -> declaration .)


state 4

    (7) declaration -> VOID_KW . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket

    LETTER          shift and go to state 13


state 5

    (9) declaration -> type . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type . LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> type . LETTER varInitialization SEMICOLON
    (12) declaration -> type . LETTER varInitialization COMA variableList SEMICOLON

    LETTER          shift and go to state 14


state 6

    (22) type -> BOOLEAN_KW .

    LETTER          reduce using rule 22 (type -> BOOLEAN_KW .)


state 7

    (23) type -> CHARACTER_KW .

    LETTER          reduce using rule 23 (type -> CHARACTER_KW .)


state 8

    (24) type -> INTEGER_KW .

    LETTER          reduce using rule 24 (type -> INTEGER_KW .)


state 9

    (25) type -> CHAR_KW .

    LETTER          reduce using rule 25 (type -> CHAR_KW .)


state 10

    (26) type -> BOOL_KW .

    LETTER          reduce using rule 26 (type -> BOOL_KW .)


state 11

    (27) type -> INT_KW .

    LETTER          reduce using rule 27 (type -> INT_KW .)


state 12

    (5) list -> list declaration .

    VOID_KW         reduce using rule 5 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> list declaration .)
    INTEGER_KW      reduce using rule 5 (list -> list declaration .)
    CHAR_KW         reduce using rule 5 (list -> list declaration .)
    BOOL_KW         reduce using rule 5 (list -> list declaration .)
    INT_KW          reduce using rule 5 (list -> list declaration .)
    $end            reduce using rule 5 (list -> list declaration .)


state 13

    (7) declaration -> VOID_KW LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket

    OPENING_PARENTHESES shift and go to state 15


state 14

    (9) declaration -> type LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket
    (11) declaration -> type LETTER . varInitialization SEMICOLON
    (12) declaration -> type LETTER . varInitialization COMA variableList SEMICOLON
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . LETTER

    OPENING_PARENTHESES shift and go to state 17
    LETTER          shift and go to state 16

    varInitialization              shift and go to state 18
    varForm                        shift and go to state 19

state 15

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statementWithoutBracket
    (28) parameter -> . listOfParameters
    (29) parameter -> .
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (32) paramTypeList -> . type paramList
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> .)
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    parameter                      shift and go to state 20
    listOfParameters               shift and go to state 21
    paramTypeList                  shift and go to state 22
    type                           shift and go to state 23

state 16

    (18) varForm -> LETTER . OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> LETTER .

    OPENING_BRACKET shift and go to state 24
    COLON           reduce using rule 19 (varForm -> LETTER .)
    SEMICOLON       reduce using rule 19 (varForm -> LETTER .)
    COMA            reduce using rule 19 (varForm -> LETTER .)


state 17

    (9) declaration -> type LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statementWithoutBracket
    (28) parameter -> . listOfParameters
    (29) parameter -> .
    (30) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (31) listOfParameters -> . paramTypeList
    (32) paramTypeList -> . type paramList
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 29 (parameter -> .)
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    type                           shift and go to state 23
    parameter                      shift and go to state 25
    listOfParameters               shift and go to state 21
    paramTypeList                  shift and go to state 22

state 18

    (11) declaration -> type LETTER varInitialization . SEMICOLON
    (12) declaration -> type LETTER varInitialization . COMA variableList SEMICOLON

    SEMICOLON       shift and go to state 26
    COMA            shift and go to state 27


state 19

    (16) varInitialization -> varForm .
    (17) varInitialization -> varForm . COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    SEMICOLON       reduce using rule 16 (varInitialization -> varForm .)
    COMA            reduce using rule 16 (varInitialization -> varForm .)
    COLON           shift and go to state 28


state 20

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statementWithoutBracket

    CLOSING_PARENTHESES shift and go to state 29


state 21

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 30


state 22

    (31) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 31 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 31 (listOfParameters -> paramTypeList .)


state 23

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList COMA paramId
    (34) paramList -> . paramId
    (37) paramId -> . LETTER
    (38) paramId -> . LETTER OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 33

    paramList                      shift and go to state 31
    paramId                        shift and go to state 32

state 24

    (18) varForm -> LETTER OPENING_BRACKET . NUMBER CLOSING_BRACKET

    NUMBER          shift and go to state 34


state 25

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statementWithoutBracket

    CLOSING_PARENTHESES shift and go to state 35


state 26

    (11) declaration -> type LETTER varInitialization SEMICOLON .

    VOID_KW         reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    BOOLEAN_KW      reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    CHARACTER_KW    reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    INTEGER_KW      reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    CHAR_KW         reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    BOOL_KW         reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    INT_KW          reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)
    $end            reduce using rule 11 (declaration -> type LETTER varInitialization SEMICOLON .)


state 27

    (12) declaration -> type LETTER varInitialization COMA . variableList SEMICOLON
    (14) variableList -> . variableList COMA variableList
    (15) variableList -> . varInitialization
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . LETTER

    LETTER          shift and go to state 16

    varInitialization              shift and go to state 36
    variableList                   shift and go to state 37
    varForm                        shift and go to state 19

state 28

    (17) varInitialization -> varForm COLON . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 38


state 29

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statementWithoutBracket
    (45) statementWithoutBracket -> . phrase
    (46) statementWithoutBracket -> . selectPhrase
    (47) statementWithoutBracket -> . iterationPhrase
    (48) statementWithoutBracket -> . returnPhrase
    (49) statementWithoutBracket -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    OPENING_BRACE   shift and go to state 41
    SEMICOLON       shift and go to state 49
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statementWithoutBracket        shift and go to state 42
    phrase                         shift and go to state 43
    selectPhrase                   shift and go to state 44
    iterationPhrase                shift and go to state 45
    returnPhrase                   shift and go to state 46
    continue                       shift and go to state 47
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 30

    (30) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (32) paramTypeList -> . type paramList
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    paramTypeList                  shift and go to state 76
    type                           shift and go to state 23

state 31

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . COMA paramId

    SEMICOLON       reduce using rule 32 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 32 (paramTypeList -> type paramList .)
    COMA            shift and go to state 77


state 32

    (34) paramList -> paramId .

    COMA            reduce using rule 34 (paramList -> paramId .)
    SEMICOLON       reduce using rule 34 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 34 (paramList -> paramId .)


state 33

    (37) paramId -> LETTER .
    (38) paramId -> LETTER . OPENING_BRACKET CLOSING_BRACKET

    COMA            reduce using rule 37 (paramId -> LETTER .)
    SEMICOLON       reduce using rule 37 (paramId -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> LETTER .)
    OPENING_BRACKET shift and go to state 78


state 34

    (18) varForm -> LETTER OPENING_BRACKET NUMBER . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 79


state 35

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (10) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statementWithoutBracket
    (45) statementWithoutBracket -> . phrase
    (46) statementWithoutBracket -> . selectPhrase
    (47) statementWithoutBracket -> . iterationPhrase
    (48) statementWithoutBracket -> . returnPhrase
    (49) statementWithoutBracket -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    OPENING_BRACE   shift and go to state 80
    SEMICOLON       shift and go to state 49
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statementWithoutBracket        shift and go to state 81
    phrase                         shift and go to state 43
    selectPhrase                   shift and go to state 44
    iterationPhrase                shift and go to state 45
    returnPhrase                   shift and go to state 46
    continue                       shift and go to state 47
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 36

    (15) variableList -> varInitialization .

    SEMICOLON       reduce using rule 15 (variableList -> varInitialization .)
    COMA            reduce using rule 15 (variableList -> varInitialization .)


state 37

    (12) declaration -> type LETTER varInitialization COMA variableList . SEMICOLON
    (14) variableList -> variableList . COMA variableList

    SEMICOLON       shift and go to state 83
    COMA            shift and go to state 82


state 38

    (17) varInitialization -> varForm COLON OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 84
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 39

    (106) alterable -> LETTER .
    (111) inalterable -> LETTER . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PP_OP           reduce using rule 106 (alterable -> LETTER .)
    MM_OP           reduce using rule 106 (alterable -> LETTER .)
    OPENING_BRACKET reduce using rule 106 (alterable -> LETTER .)
    LETTER          reduce using rule 106 (alterable -> LETTER .)
    EQ_OP           reduce using rule 106 (alterable -> LETTER .)
    PLE_OP          reduce using rule 106 (alterable -> LETTER .)
    MIE_OP          reduce using rule 106 (alterable -> LETTER .)
    MUE_OP          reduce using rule 106 (alterable -> LETTER .)
    DIE_OP          reduce using rule 106 (alterable -> LETTER .)
    PL_OP           reduce using rule 106 (alterable -> LETTER .)
    MI_OP           reduce using rule 106 (alterable -> LETTER .)
    MU_OP           reduce using rule 106 (alterable -> LETTER .)
    DI_OP           reduce using rule 106 (alterable -> LETTER .)
    PE_OP           reduce using rule 106 (alterable -> LETTER .)
    LE_REL          reduce using rule 106 (alterable -> LETTER .)
    GE_REL          reduce using rule 106 (alterable -> LETTER .)
    EQ_REL          reduce using rule 106 (alterable -> LETTER .)
    GT_REL          reduce using rule 106 (alterable -> LETTER .)
    LT_REL          reduce using rule 106 (alterable -> LETTER .)
    NEQ_REL         reduce using rule 106 (alterable -> LETTER .)
    AA_LOP          reduce using rule 106 (alterable -> LETTER .)
    OO_LOP          reduce using rule 106 (alterable -> LETTER .)
    TIL_LOP         reduce using rule 106 (alterable -> LETTER .)
    AND_LOP         reduce using rule 106 (alterable -> LETTER .)
    OR_LOP          reduce using rule 106 (alterable -> LETTER .)
    SEMICOLON       reduce using rule 106 (alterable -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 106 (alterable -> LETTER .)
    COMA            reduce using rule 106 (alterable -> LETTER .)
    CLOSING_BRACKET reduce using rule 106 (alterable -> LETTER .)
    OPENING_PARENTHESES shift and go to state 87


state 40

    (109) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    allExpression                  shift and go to state 88
    alterable                      shift and go to state 56
    eachExpression                 shift and go to state 51
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 41

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 92
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    localDeclarations              shift and go to state 89
    ScopedVariableDec              shift and go to state 90
    scopedSpecifier                shift and go to state 91
    type                           shift and go to state 93

state 42

    (8) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .

    VOID_KW         reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOLEAN_KW      reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHARACTER_KW    reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INTEGER_KW      reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHAR_KW         reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOL_KW         reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INT_KW          reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    $end            reduce using rule 8 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)


state 43

    (45) statementWithoutBracket -> phrase .

    VOID_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    BOOLEAN_KW      reduce using rule 45 (statementWithoutBracket -> phrase .)
    CHARACTER_KW    reduce using rule 45 (statementWithoutBracket -> phrase .)
    INTEGER_KW      reduce using rule 45 (statementWithoutBracket -> phrase .)
    CHAR_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    BOOL_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    INT_KW          reduce using rule 45 (statementWithoutBracket -> phrase .)
    $end            reduce using rule 45 (statementWithoutBracket -> phrase .)
    OTHER_KW        reduce using rule 45 (statementWithoutBracket -> phrase .)
    CLOSING_BRACE   reduce using rule 45 (statementWithoutBracket -> phrase .)
    SEMICOLON       reduce using rule 45 (statementWithoutBracket -> phrase .)
    OPENING_BRACE   reduce using rule 45 (statementWithoutBracket -> phrase .)
    IF_KW           reduce using rule 45 (statementWithoutBracket -> phrase .)
    TILL_KW         reduce using rule 45 (statementWithoutBracket -> phrase .)
    COMEBACK_KW     reduce using rule 45 (statementWithoutBracket -> phrase .)
    GIVEBACK_KW     reduce using rule 45 (statementWithoutBracket -> phrase .)
    CONTINUE_KW     reduce using rule 45 (statementWithoutBracket -> phrase .)
    LETTER          reduce using rule 45 (statementWithoutBracket -> phrase .)
    AA_LOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    OO_LOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    TIL_LOP         reduce using rule 45 (statementWithoutBracket -> phrase .)
    AND_LOP         reduce using rule 45 (statementWithoutBracket -> phrase .)
    OR_LOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    MI_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    MU_OP           reduce using rule 45 (statementWithoutBracket -> phrase .)
    QU_UOP          reduce using rule 45 (statementWithoutBracket -> phrase .)
    OPENING_PARENTHESES reduce using rule 45 (statementWithoutBracket -> phrase .)
    CONST_KW        reduce using rule 45 (statementWithoutBracket -> phrase .)
    TRUE            reduce using rule 45 (statementWithoutBracket -> phrase .)
    FALSE           reduce using rule 45 (statementWithoutBracket -> phrase .)


state 44

    (46) statementWithoutBracket -> selectPhrase .

    VOID_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CHARACTER_KW    reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    INTEGER_KW      reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CHAR_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    BOOL_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    INT_KW          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    $end            reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OTHER_KW        reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CLOSING_BRACE   reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    SEMICOLON       reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OPENING_BRACE   reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    IF_KW           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    TILL_KW         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    COMEBACK_KW     reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CONTINUE_KW     reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    LETTER          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    AA_LOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OO_LOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    TIL_LOP         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    AND_LOP         reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OR_LOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MI_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    MU_OP           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    QU_UOP          reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    CONST_KW        reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    TRUE            reduce using rule 46 (statementWithoutBracket -> selectPhrase .)
    FALSE           reduce using rule 46 (statementWithoutBracket -> selectPhrase .)


state 45

    (47) statementWithoutBracket -> iterationPhrase .

    VOID_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    INTEGER_KW      reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CHAR_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    BOOL_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    INT_KW          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    $end            reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OTHER_KW        reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CLOSING_BRACE   reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    SEMICOLON       reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    IF_KW           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    TILL_KW         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    LETTER          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    AA_LOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OO_LOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    TIL_LOP         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    AND_LOP         reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OR_LOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MI_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    MU_OP           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    QU_UOP          reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    CONST_KW        reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    TRUE            reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)
    FALSE           reduce using rule 47 (statementWithoutBracket -> iterationPhrase .)


state 46

    (48) statementWithoutBracket -> returnPhrase .

    VOID_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CHARACTER_KW    reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    INTEGER_KW      reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CHAR_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    BOOL_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    INT_KW          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    $end            reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OTHER_KW        reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CLOSING_BRACE   reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    SEMICOLON       reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OPENING_BRACE   reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    IF_KW           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    TILL_KW         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    COMEBACK_KW     reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CONTINUE_KW     reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    LETTER          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    AA_LOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OO_LOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    TIL_LOP         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    AND_LOP         reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OR_LOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MI_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    MU_OP           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    QU_UOP          reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    CONST_KW        reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    TRUE            reduce using rule 48 (statementWithoutBracket -> returnPhrase .)
    FALSE           reduce using rule 48 (statementWithoutBracket -> returnPhrase .)


state 47

    (49) statementWithoutBracket -> continue .

    VOID_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    BOOLEAN_KW      reduce using rule 49 (statementWithoutBracket -> continue .)
    CHARACTER_KW    reduce using rule 49 (statementWithoutBracket -> continue .)
    INTEGER_KW      reduce using rule 49 (statementWithoutBracket -> continue .)
    CHAR_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    BOOL_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    INT_KW          reduce using rule 49 (statementWithoutBracket -> continue .)
    $end            reduce using rule 49 (statementWithoutBracket -> continue .)
    OTHER_KW        reduce using rule 49 (statementWithoutBracket -> continue .)
    CLOSING_BRACE   reduce using rule 49 (statementWithoutBracket -> continue .)
    SEMICOLON       reduce using rule 49 (statementWithoutBracket -> continue .)
    OPENING_BRACE   reduce using rule 49 (statementWithoutBracket -> continue .)
    IF_KW           reduce using rule 49 (statementWithoutBracket -> continue .)
    TILL_KW         reduce using rule 49 (statementWithoutBracket -> continue .)
    COMEBACK_KW     reduce using rule 49 (statementWithoutBracket -> continue .)
    GIVEBACK_KW     reduce using rule 49 (statementWithoutBracket -> continue .)
    CONTINUE_KW     reduce using rule 49 (statementWithoutBracket -> continue .)
    LETTER          reduce using rule 49 (statementWithoutBracket -> continue .)
    AA_LOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    OO_LOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    TIL_LOP         reduce using rule 49 (statementWithoutBracket -> continue .)
    AND_LOP         reduce using rule 49 (statementWithoutBracket -> continue .)
    OR_LOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    MI_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    MU_OP           reduce using rule 49 (statementWithoutBracket -> continue .)
    QU_UOP          reduce using rule 49 (statementWithoutBracket -> continue .)
    OPENING_PARENTHESES reduce using rule 49 (statementWithoutBracket -> continue .)
    CONST_KW        reduce using rule 49 (statementWithoutBracket -> continue .)
    TRUE            reduce using rule 49 (statementWithoutBracket -> continue .)
    FALSE           reduce using rule 49 (statementWithoutBracket -> continue .)


state 48

    (53) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 94


state 49

    (54) phrase -> SEMICOLON .

    VOID_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 54 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 54 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 54 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 54 (phrase -> SEMICOLON .)
    $end            reduce using rule 54 (phrase -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 54 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 54 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 54 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 54 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 54 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 54 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 54 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 54 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 54 (phrase -> SEMICOLON .)
    AA_LOP          reduce using rule 54 (phrase -> SEMICOLON .)
    OO_LOP          reduce using rule 54 (phrase -> SEMICOLON .)
    TIL_LOP         reduce using rule 54 (phrase -> SEMICOLON .)
    AND_LOP         reduce using rule 54 (phrase -> SEMICOLON .)
    OR_LOP          reduce using rule 54 (phrase -> SEMICOLON .)
    MI_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    MU_OP           reduce using rule 54 (phrase -> SEMICOLON .)
    QU_UOP          reduce using rule 54 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 54 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 54 (phrase -> SEMICOLON .)
    TRUE            reduce using rule 54 (phrase -> SEMICOLON .)
    FALSE           reduce using rule 54 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 54 (phrase -> SEMICOLON .)


state 50

    (55) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket

    OPENING_PARENTHESES shift and go to state 95


state 51

    (71) allExpression -> eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    SEMICOLON       reduce using rule 71 (allExpression -> eachExpression .)
    CLOSING_PARENTHESES reduce using rule 71 (allExpression -> eachExpression .)
    COMA            reduce using rule 71 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 71 (allExpression -> eachExpression .)
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

    logicOp                        shift and go to state 96

state 52

    (63) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 97


state 53

    (64) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 98


state 54

    (65) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (66) returnPhrase -> GIVEBACK_KW . numOrLetter SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    NUMBER          shift and go to state 101
    LETTER          shift and go to state 102
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    allExpression                  shift and go to state 99
    numOrLetter                    shift and go to state 100
    alterable                      shift and go to state 56
    eachExpression                 shift and go to state 51
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 55

    (67) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 103


state 56

    (68) allExpression -> alterable . mathOp allExpression
    (69) allExpression -> alterable . PP_OP
    (70) allExpression -> alterable . MM_OP
    (107) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> alterable . LETTER
    (105) factor -> alterable .
    (72) mathOp -> . EQ_OP
    (73) mathOp -> . PLE_OP
    (74) mathOp -> . MIE_OP
    (75) mathOp -> . MUE_OP
    (76) mathOp -> . DIE_OP

    PP_OP           shift and go to state 105
    MM_OP           shift and go to state 106
    OPENING_BRACKET shift and go to state 107
    LETTER          shift and go to state 108
    PL_OP           reduce using rule 105 (factor -> alterable .)
    MI_OP           reduce using rule 105 (factor -> alterable .)
    MU_OP           reduce using rule 105 (factor -> alterable .)
    DI_OP           reduce using rule 105 (factor -> alterable .)
    PE_OP           reduce using rule 105 (factor -> alterable .)
    LE_REL          reduce using rule 105 (factor -> alterable .)
    GE_REL          reduce using rule 105 (factor -> alterable .)
    EQ_REL          reduce using rule 105 (factor -> alterable .)
    GT_REL          reduce using rule 105 (factor -> alterable .)
    LT_REL          reduce using rule 105 (factor -> alterable .)
    NEQ_REL         reduce using rule 105 (factor -> alterable .)
    AA_LOP          reduce using rule 105 (factor -> alterable .)
    OO_LOP          reduce using rule 105 (factor -> alterable .)
    TIL_LOP         reduce using rule 105 (factor -> alterable .)
    AND_LOP         reduce using rule 105 (factor -> alterable .)
    OR_LOP          reduce using rule 105 (factor -> alterable .)
    SEMICOLON       reduce using rule 105 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 105 (factor -> alterable .)
    COMA            reduce using rule 105 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 105 (factor -> alterable .)
    EQ_OP           shift and go to state 109
    PLE_OP          shift and go to state 110
    MIE_OP          shift and go to state 111
    MUE_OP          shift and go to state 112
    DIE_OP          shift and go to state 113

    mathOp                         shift and go to state 104

state 57

    (79) eachExpression -> logicOp . eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    logicOp                        shift and go to state 57
    eachExpression                 shift and go to state 114
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 58

    (80) eachExpression -> relExpression .

    AA_LOP          reduce using rule 80 (eachExpression -> relExpression .)
    OO_LOP          reduce using rule 80 (eachExpression -> relExpression .)
    TIL_LOP         reduce using rule 80 (eachExpression -> relExpression .)
    AND_LOP         reduce using rule 80 (eachExpression -> relExpression .)
    OR_LOP          reduce using rule 80 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 80 (eachExpression -> relExpression .)
    CLOSING_PARENTHESES reduce using rule 80 (eachExpression -> relExpression .)
    COMA            reduce using rule 80 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 80 (eachExpression -> relExpression .)


state 59

    (119) logicOp -> AA_LOP .

    AA_LOP          reduce using rule 119 (logicOp -> AA_LOP .)
    OO_LOP          reduce using rule 119 (logicOp -> AA_LOP .)
    TIL_LOP         reduce using rule 119 (logicOp -> AA_LOP .)
    AND_LOP         reduce using rule 119 (logicOp -> AA_LOP .)
    OR_LOP          reduce using rule 119 (logicOp -> AA_LOP .)
    MI_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    MU_OP           reduce using rule 119 (logicOp -> AA_LOP .)
    QU_UOP          reduce using rule 119 (logicOp -> AA_LOP .)
    OPENING_PARENTHESES reduce using rule 119 (logicOp -> AA_LOP .)
    LETTER          reduce using rule 119 (logicOp -> AA_LOP .)
    CONST_KW        reduce using rule 119 (logicOp -> AA_LOP .)
    TRUE            reduce using rule 119 (logicOp -> AA_LOP .)
    FALSE           reduce using rule 119 (logicOp -> AA_LOP .)
    THEN_KW         reduce using rule 119 (logicOp -> AA_LOP .)
    ELSE_KW         reduce using rule 119 (logicOp -> AA_LOP .)


state 60

    (120) logicOp -> OO_LOP .

    AA_LOP          reduce using rule 120 (logicOp -> OO_LOP .)
    OO_LOP          reduce using rule 120 (logicOp -> OO_LOP .)
    TIL_LOP         reduce using rule 120 (logicOp -> OO_LOP .)
    AND_LOP         reduce using rule 120 (logicOp -> OO_LOP .)
    OR_LOP          reduce using rule 120 (logicOp -> OO_LOP .)
    MI_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    MU_OP           reduce using rule 120 (logicOp -> OO_LOP .)
    QU_UOP          reduce using rule 120 (logicOp -> OO_LOP .)
    OPENING_PARENTHESES reduce using rule 120 (logicOp -> OO_LOP .)
    LETTER          reduce using rule 120 (logicOp -> OO_LOP .)
    CONST_KW        reduce using rule 120 (logicOp -> OO_LOP .)
    TRUE            reduce using rule 120 (logicOp -> OO_LOP .)
    FALSE           reduce using rule 120 (logicOp -> OO_LOP .)
    THEN_KW         reduce using rule 120 (logicOp -> OO_LOP .)
    ELSE_KW         reduce using rule 120 (logicOp -> OO_LOP .)


state 61

    (121) logicOp -> TIL_LOP .

    AA_LOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    OO_LOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    TIL_LOP         reduce using rule 121 (logicOp -> TIL_LOP .)
    AND_LOP         reduce using rule 121 (logicOp -> TIL_LOP .)
    OR_LOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    MI_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    MU_OP           reduce using rule 121 (logicOp -> TIL_LOP .)
    QU_UOP          reduce using rule 121 (logicOp -> TIL_LOP .)
    OPENING_PARENTHESES reduce using rule 121 (logicOp -> TIL_LOP .)
    LETTER          reduce using rule 121 (logicOp -> TIL_LOP .)
    CONST_KW        reduce using rule 121 (logicOp -> TIL_LOP .)
    TRUE            reduce using rule 121 (logicOp -> TIL_LOP .)
    FALSE           reduce using rule 121 (logicOp -> TIL_LOP .)
    THEN_KW         reduce using rule 121 (logicOp -> TIL_LOP .)
    ELSE_KW         reduce using rule 121 (logicOp -> TIL_LOP .)


state 62

    (122) logicOp -> AND_LOP .

    AA_LOP          reduce using rule 122 (logicOp -> AND_LOP .)
    OO_LOP          reduce using rule 122 (logicOp -> AND_LOP .)
    TIL_LOP         reduce using rule 122 (logicOp -> AND_LOP .)
    AND_LOP         reduce using rule 122 (logicOp -> AND_LOP .)
    OR_LOP          reduce using rule 122 (logicOp -> AND_LOP .)
    MI_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    MU_OP           reduce using rule 122 (logicOp -> AND_LOP .)
    QU_UOP          reduce using rule 122 (logicOp -> AND_LOP .)
    OPENING_PARENTHESES reduce using rule 122 (logicOp -> AND_LOP .)
    LETTER          reduce using rule 122 (logicOp -> AND_LOP .)
    CONST_KW        reduce using rule 122 (logicOp -> AND_LOP .)
    TRUE            reduce using rule 122 (logicOp -> AND_LOP .)
    FALSE           reduce using rule 122 (logicOp -> AND_LOP .)
    THEN_KW         reduce using rule 122 (logicOp -> AND_LOP .)
    ELSE_KW         reduce using rule 122 (logicOp -> AND_LOP .)


state 63

    (123) logicOp -> OR_LOP .

    AA_LOP          reduce using rule 123 (logicOp -> OR_LOP .)
    OO_LOP          reduce using rule 123 (logicOp -> OR_LOP .)
    TIL_LOP         reduce using rule 123 (logicOp -> OR_LOP .)
    AND_LOP         reduce using rule 123 (logicOp -> OR_LOP .)
    OR_LOP          reduce using rule 123 (logicOp -> OR_LOP .)
    MI_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    MU_OP           reduce using rule 123 (logicOp -> OR_LOP .)
    QU_UOP          reduce using rule 123 (logicOp -> OR_LOP .)
    OPENING_PARENTHESES reduce using rule 123 (logicOp -> OR_LOP .)
    LETTER          reduce using rule 123 (logicOp -> OR_LOP .)
    CONST_KW        reduce using rule 123 (logicOp -> OR_LOP .)
    TRUE            reduce using rule 123 (logicOp -> OR_LOP .)
    FALSE           reduce using rule 123 (logicOp -> OR_LOP .)
    THEN_KW         reduce using rule 123 (logicOp -> OR_LOP .)
    ELSE_KW         reduce using rule 123 (logicOp -> OR_LOP .)


state 64

    (82) relExpression -> mathEXP . compareType mathEXP
    (83) relExpression -> mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (86) compareType -> . equal
    (87) compareType -> . nonEqual
    (94) op -> . PL_OP
    (95) op -> . MI_OP
    (96) op -> . MU_OP
    (97) op -> . DI_OP
    (98) op -> . PE_OP
    (88) equal -> . LE_REL
    (89) equal -> . GE_REL
    (90) equal -> . EQ_REL
    (91) nonEqual -> . GT_REL
    (92) nonEqual -> . LT_REL
    (93) nonEqual -> . NEQ_REL

    AA_LOP          reduce using rule 83 (relExpression -> mathEXP .)
    OO_LOP          reduce using rule 83 (relExpression -> mathEXP .)
    TIL_LOP         reduce using rule 83 (relExpression -> mathEXP .)
    AND_LOP         reduce using rule 83 (relExpression -> mathEXP .)
    OR_LOP          reduce using rule 83 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 83 (relExpression -> mathEXP .)
    CLOSING_PARENTHESES reduce using rule 83 (relExpression -> mathEXP .)
    COMA            reduce using rule 83 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 83 (relExpression -> mathEXP .)
    PL_OP           shift and go to state 119
    MI_OP           shift and go to state 120
    MU_OP           shift and go to state 121
    DI_OP           shift and go to state 122
    PE_OP           shift and go to state 123
    LE_REL          shift and go to state 124
    GE_REL          shift and go to state 125
    EQ_REL          shift and go to state 126
    GT_REL          shift and go to state 127
    LT_REL          shift and go to state 128
    NEQ_REL         shift and go to state 129

    compareType                    shift and go to state 115
    op                             shift and go to state 116
    equal                          shift and go to state 117
    nonEqual                       shift and go to state 118

state 65

    (85) mathEXP -> unaryExpression .

    PL_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    MI_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    MU_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    DI_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    PE_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    LE_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    GE_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    EQ_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    GT_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    LT_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    NEQ_REL         reduce using rule 85 (mathEXP -> unaryExpression .)
    AA_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    OO_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    TIL_LOP         reduce using rule 85 (mathEXP -> unaryExpression .)
    AND_LOP         reduce using rule 85 (mathEXP -> unaryExpression .)
    OR_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 85 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 85 (mathEXP -> unaryExpression .)
    COMA            reduce using rule 85 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 85 (mathEXP -> unaryExpression .)


state 66

    (99) unaryExpression -> unaryop . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    unaryop                        shift and go to state 66
    unaryExpression                shift and go to state 130
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 67

    (100) unaryExpression -> factor .

    PL_OP           reduce using rule 100 (unaryExpression -> factor .)
    MI_OP           reduce using rule 100 (unaryExpression -> factor .)
    MU_OP           reduce using rule 100 (unaryExpression -> factor .)
    DI_OP           reduce using rule 100 (unaryExpression -> factor .)
    PE_OP           reduce using rule 100 (unaryExpression -> factor .)
    LE_REL          reduce using rule 100 (unaryExpression -> factor .)
    GE_REL          reduce using rule 100 (unaryExpression -> factor .)
    EQ_REL          reduce using rule 100 (unaryExpression -> factor .)
    GT_REL          reduce using rule 100 (unaryExpression -> factor .)
    LT_REL          reduce using rule 100 (unaryExpression -> factor .)
    NEQ_REL         reduce using rule 100 (unaryExpression -> factor .)
    AA_LOP          reduce using rule 100 (unaryExpression -> factor .)
    OO_LOP          reduce using rule 100 (unaryExpression -> factor .)
    TIL_LOP         reduce using rule 100 (unaryExpression -> factor .)
    AND_LOP         reduce using rule 100 (unaryExpression -> factor .)
    OR_LOP          reduce using rule 100 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 100 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 100 (unaryExpression -> factor .)
    COMA            reduce using rule 100 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 100 (unaryExpression -> factor .)


state 68

    (101) unaryop -> MI_OP .

    MI_OP           reduce using rule 101 (unaryop -> MI_OP .)
    MU_OP           reduce using rule 101 (unaryop -> MI_OP .)
    QU_UOP          reduce using rule 101 (unaryop -> MI_OP .)
    OPENING_PARENTHESES reduce using rule 101 (unaryop -> MI_OP .)
    LETTER          reduce using rule 101 (unaryop -> MI_OP .)
    CONST_KW        reduce using rule 101 (unaryop -> MI_OP .)
    TRUE            reduce using rule 101 (unaryop -> MI_OP .)
    FALSE           reduce using rule 101 (unaryop -> MI_OP .)


state 69

    (102) unaryop -> MU_OP .

    MI_OP           reduce using rule 102 (unaryop -> MU_OP .)
    MU_OP           reduce using rule 102 (unaryop -> MU_OP .)
    QU_UOP          reduce using rule 102 (unaryop -> MU_OP .)
    OPENING_PARENTHESES reduce using rule 102 (unaryop -> MU_OP .)
    LETTER          reduce using rule 102 (unaryop -> MU_OP .)
    CONST_KW        reduce using rule 102 (unaryop -> MU_OP .)
    TRUE            reduce using rule 102 (unaryop -> MU_OP .)
    FALSE           reduce using rule 102 (unaryop -> MU_OP .)


state 70

    (103) unaryop -> QU_UOP .

    MI_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    MU_OP           reduce using rule 103 (unaryop -> QU_UOP .)
    QU_UOP          reduce using rule 103 (unaryop -> QU_UOP .)
    OPENING_PARENTHESES reduce using rule 103 (unaryop -> QU_UOP .)
    LETTER          reduce using rule 103 (unaryop -> QU_UOP .)
    CONST_KW        reduce using rule 103 (unaryop -> QU_UOP .)
    TRUE            reduce using rule 103 (unaryop -> QU_UOP .)
    FALSE           reduce using rule 103 (unaryop -> QU_UOP .)


state 71

    (104) factor -> inalterable .

    PL_OP           reduce using rule 104 (factor -> inalterable .)
    MI_OP           reduce using rule 104 (factor -> inalterable .)
    MU_OP           reduce using rule 104 (factor -> inalterable .)
    DI_OP           reduce using rule 104 (factor -> inalterable .)
    PE_OP           reduce using rule 104 (factor -> inalterable .)
    LE_REL          reduce using rule 104 (factor -> inalterable .)
    GE_REL          reduce using rule 104 (factor -> inalterable .)
    EQ_REL          reduce using rule 104 (factor -> inalterable .)
    GT_REL          reduce using rule 104 (factor -> inalterable .)
    LT_REL          reduce using rule 104 (factor -> inalterable .)
    NEQ_REL         reduce using rule 104 (factor -> inalterable .)
    AA_LOP          reduce using rule 104 (factor -> inalterable .)
    OO_LOP          reduce using rule 104 (factor -> inalterable .)
    TIL_LOP         reduce using rule 104 (factor -> inalterable .)
    AND_LOP         reduce using rule 104 (factor -> inalterable .)
    OR_LOP          reduce using rule 104 (factor -> inalterable .)
    SEMICOLON       reduce using rule 104 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 104 (factor -> inalterable .)
    COMA            reduce using rule 104 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 104 (factor -> inalterable .)


state 72

    (110) inalterable -> constant .

    PL_OP           reduce using rule 110 (inalterable -> constant .)
    MI_OP           reduce using rule 110 (inalterable -> constant .)
    MU_OP           reduce using rule 110 (inalterable -> constant .)
    DI_OP           reduce using rule 110 (inalterable -> constant .)
    PE_OP           reduce using rule 110 (inalterable -> constant .)
    LE_REL          reduce using rule 110 (inalterable -> constant .)
    GE_REL          reduce using rule 110 (inalterable -> constant .)
    EQ_REL          reduce using rule 110 (inalterable -> constant .)
    GT_REL          reduce using rule 110 (inalterable -> constant .)
    LT_REL          reduce using rule 110 (inalterable -> constant .)
    NEQ_REL         reduce using rule 110 (inalterable -> constant .)
    AA_LOP          reduce using rule 110 (inalterable -> constant .)
    OO_LOP          reduce using rule 110 (inalterable -> constant .)
    TIL_LOP         reduce using rule 110 (inalterable -> constant .)
    AND_LOP         reduce using rule 110 (inalterable -> constant .)
    OR_LOP          reduce using rule 110 (inalterable -> constant .)
    SEMICOLON       reduce using rule 110 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 110 (inalterable -> constant .)
    COMA            reduce using rule 110 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 110 (inalterable -> constant .)


state 73

    (116) constant -> CONST_KW .

    PL_OP           reduce using rule 116 (constant -> CONST_KW .)
    MI_OP           reduce using rule 116 (constant -> CONST_KW .)
    MU_OP           reduce using rule 116 (constant -> CONST_KW .)
    DI_OP           reduce using rule 116 (constant -> CONST_KW .)
    PE_OP           reduce using rule 116 (constant -> CONST_KW .)
    LE_REL          reduce using rule 116 (constant -> CONST_KW .)
    GE_REL          reduce using rule 116 (constant -> CONST_KW .)
    EQ_REL          reduce using rule 116 (constant -> CONST_KW .)
    GT_REL          reduce using rule 116 (constant -> CONST_KW .)
    LT_REL          reduce using rule 116 (constant -> CONST_KW .)
    NEQ_REL         reduce using rule 116 (constant -> CONST_KW .)
    AA_LOP          reduce using rule 116 (constant -> CONST_KW .)
    OO_LOP          reduce using rule 116 (constant -> CONST_KW .)
    TIL_LOP         reduce using rule 116 (constant -> CONST_KW .)
    AND_LOP         reduce using rule 116 (constant -> CONST_KW .)
    OR_LOP          reduce using rule 116 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 116 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 116 (constant -> CONST_KW .)
    COMA            reduce using rule 116 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 116 (constant -> CONST_KW .)


state 74

    (117) constant -> TRUE .

    PL_OP           reduce using rule 117 (constant -> TRUE .)
    MI_OP           reduce using rule 117 (constant -> TRUE .)
    MU_OP           reduce using rule 117 (constant -> TRUE .)
    DI_OP           reduce using rule 117 (constant -> TRUE .)
    PE_OP           reduce using rule 117 (constant -> TRUE .)
    LE_REL          reduce using rule 117 (constant -> TRUE .)
    GE_REL          reduce using rule 117 (constant -> TRUE .)
    EQ_REL          reduce using rule 117 (constant -> TRUE .)
    GT_REL          reduce using rule 117 (constant -> TRUE .)
    LT_REL          reduce using rule 117 (constant -> TRUE .)
    NEQ_REL         reduce using rule 117 (constant -> TRUE .)
    AA_LOP          reduce using rule 117 (constant -> TRUE .)
    OO_LOP          reduce using rule 117 (constant -> TRUE .)
    TIL_LOP         reduce using rule 117 (constant -> TRUE .)
    AND_LOP         reduce using rule 117 (constant -> TRUE .)
    OR_LOP          reduce using rule 117 (constant -> TRUE .)
    SEMICOLON       reduce using rule 117 (constant -> TRUE .)
    CLOSING_PARENTHESES reduce using rule 117 (constant -> TRUE .)
    COMA            reduce using rule 117 (constant -> TRUE .)
    CLOSING_BRACKET reduce using rule 117 (constant -> TRUE .)


state 75

    (118) constant -> FALSE .

    PL_OP           reduce using rule 118 (constant -> FALSE .)
    MI_OP           reduce using rule 118 (constant -> FALSE .)
    MU_OP           reduce using rule 118 (constant -> FALSE .)
    DI_OP           reduce using rule 118 (constant -> FALSE .)
    PE_OP           reduce using rule 118 (constant -> FALSE .)
    LE_REL          reduce using rule 118 (constant -> FALSE .)
    GE_REL          reduce using rule 118 (constant -> FALSE .)
    EQ_REL          reduce using rule 118 (constant -> FALSE .)
    GT_REL          reduce using rule 118 (constant -> FALSE .)
    LT_REL          reduce using rule 118 (constant -> FALSE .)
    NEQ_REL         reduce using rule 118 (constant -> FALSE .)
    AA_LOP          reduce using rule 118 (constant -> FALSE .)
    OO_LOP          reduce using rule 118 (constant -> FALSE .)
    TIL_LOP         reduce using rule 118 (constant -> FALSE .)
    AND_LOP         reduce using rule 118 (constant -> FALSE .)
    OR_LOP          reduce using rule 118 (constant -> FALSE .)
    SEMICOLON       reduce using rule 118 (constant -> FALSE .)
    CLOSING_PARENTHESES reduce using rule 118 (constant -> FALSE .)
    COMA            reduce using rule 118 (constant -> FALSE .)
    CLOSING_BRACKET reduce using rule 118 (constant -> FALSE .)


state 76

    (30) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 77

    (33) paramList -> paramList COMA . paramId
    (37) paramId -> . LETTER
    (38) paramId -> . LETTER OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 33

    paramId                        shift and go to state 131

state 78

    (38) paramId -> LETTER OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 132


state 79

    (18) varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .

    COLON           reduce using rule 18 (varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 18 (varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .)
    COMA            reduce using rule 18 (varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET .)


state 80

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 92
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    type                           shift and go to state 93
    localDeclarations              shift and go to state 133
    ScopedVariableDec              shift and go to state 90
    scopedSpecifier                shift and go to state 91

state 81

    (10) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .

    VOID_KW         reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOLEAN_KW      reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHARACTER_KW    reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INTEGER_KW      reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    CHAR_KW         reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    BOOL_KW         reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    INT_KW          reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)
    $end            reduce using rule 10 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket .)


state 82

    (14) variableList -> variableList COMA . variableList
    (14) variableList -> . variableList COMA variableList
    (15) variableList -> . varInitialization
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . LETTER

    LETTER          shift and go to state 16

    variableList                   shift and go to state 134
    varInitialization              shift and go to state 36
    varForm                        shift and go to state 19

state 83

    (12) declaration -> type LETTER varInitialization COMA variableList SEMICOLON .

    VOID_KW         reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    CHAR_KW         reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    BOOL_KW         reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    INT_KW          reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)
    $end            reduce using rule 12 (declaration -> type LETTER varInitialization COMA variableList SEMICOLON .)


state 84

    (17) varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 135
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

    logicOp                        shift and go to state 96

state 85

    (105) factor -> alterable .
    (107) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> alterable . LETTER

    PL_OP           reduce using rule 105 (factor -> alterable .)
    MI_OP           reduce using rule 105 (factor -> alterable .)
    MU_OP           reduce using rule 105 (factor -> alterable .)
    DI_OP           reduce using rule 105 (factor -> alterable .)
    PE_OP           reduce using rule 105 (factor -> alterable .)
    LE_REL          reduce using rule 105 (factor -> alterable .)
    GE_REL          reduce using rule 105 (factor -> alterable .)
    EQ_REL          reduce using rule 105 (factor -> alterable .)
    GT_REL          reduce using rule 105 (factor -> alterable .)
    LT_REL          reduce using rule 105 (factor -> alterable .)
    NEQ_REL         reduce using rule 105 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 105 (factor -> alterable .)
    AA_LOP          reduce using rule 105 (factor -> alterable .)
    OO_LOP          reduce using rule 105 (factor -> alterable .)
    TIL_LOP         reduce using rule 105 (factor -> alterable .)
    AND_LOP         reduce using rule 105 (factor -> alterable .)
    OR_LOP          reduce using rule 105 (factor -> alterable .)
    SEMICOLON       reduce using rule 105 (factor -> alterable .)
    COMA            reduce using rule 105 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 105 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 107
    LETTER          shift and go to state 108


state 86

    (111) inalterable -> LETTER . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> LETTER .

    OPENING_PARENTHESES shift and go to state 87
    OPENING_BRACKET reduce using rule 106 (alterable -> LETTER .)
    LETTER          reduce using rule 106 (alterable -> LETTER .)
    PL_OP           reduce using rule 106 (alterable -> LETTER .)
    MI_OP           reduce using rule 106 (alterable -> LETTER .)
    MU_OP           reduce using rule 106 (alterable -> LETTER .)
    DI_OP           reduce using rule 106 (alterable -> LETTER .)
    PE_OP           reduce using rule 106 (alterable -> LETTER .)
    LE_REL          reduce using rule 106 (alterable -> LETTER .)
    GE_REL          reduce using rule 106 (alterable -> LETTER .)
    EQ_REL          reduce using rule 106 (alterable -> LETTER .)
    GT_REL          reduce using rule 106 (alterable -> LETTER .)
    LT_REL          reduce using rule 106 (alterable -> LETTER .)
    NEQ_REL         reduce using rule 106 (alterable -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 106 (alterable -> LETTER .)
    AA_LOP          reduce using rule 106 (alterable -> LETTER .)
    OO_LOP          reduce using rule 106 (alterable -> LETTER .)
    TIL_LOP         reduce using rule 106 (alterable -> LETTER .)
    AND_LOP         reduce using rule 106 (alterable -> LETTER .)
    OR_LOP          reduce using rule 106 (alterable -> LETTER .)
    SEMICOLON       reduce using rule 106 (alterable -> LETTER .)
    COMA            reduce using rule 106 (alterable -> LETTER .)
    CLOSING_BRACKET reduce using rule 106 (alterable -> LETTER .)


state 87

    (111) inalterable -> LETTER OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (112) args -> . arguments
    (113) args -> .
    (114) arguments -> . arguments COMA allExpression
    (115) arguments -> . allExpression
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    CLOSING_PARENTHESES reduce using rule 113 (args -> .)
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    args                           shift and go to state 136
    arguments                      shift and go to state 137
    allExpression                  shift and go to state 138
    alterable                      shift and go to state 56
    eachExpression                 shift and go to state 51
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 88

    (109) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 139


state 89

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 140

state 90

    (35) localDeclarations -> ScopedVariableDec . localDeclarations
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 92
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    ScopedVariableDec              shift and go to state 90
    localDeclarations              shift and go to state 141
    scopedSpecifier                shift and go to state 91
    type                           shift and go to state 93

state 91

    (13) ScopedVariableDec -> scopedSpecifier . variableList SEMICOLON
    (14) variableList -> . variableList COMA variableList
    (15) variableList -> . varInitialization
    (16) varInitialization -> . varForm
    (17) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (18) varForm -> . LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET
    (19) varForm -> . LETTER

    LETTER          shift and go to state 16

    variableList                   shift and go to state 142
    varInitialization              shift and go to state 36
    varForm                        shift and go to state 19

state 92

    (20) scopedSpecifier -> STATIC_KW . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    type                           shift and go to state 143

state 93

    (21) scopedSpecifier -> type .

    LETTER          reduce using rule 21 (scopedSpecifier -> type .)


state 94

    (53) phrase -> allExpression SEMICOLON .

    VOID_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    IF_KW           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    LETTER          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    AA_LOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OO_LOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    TIL_LOP         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    AND_LOP         reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OR_LOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MI_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    MU_OP           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    QU_UOP          reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    TRUE            reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    FALSE           reduce using rule 53 (phrase -> allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 53 (phrase -> allExpression SEMICOLON .)


state 95

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 144
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 96

    (77) eachExpression -> eachExpression logicOp . eachExpression
    (78) eachExpression -> eachExpression logicOp . THEN_KW eachExpression
    (81) eachExpression -> eachExpression logicOp . ELSE_KW eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    THEN_KW         shift and go to state 146
    ELSE_KW         shift and go to state 147
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 145
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 97

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 148
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 98

    (64) returnPhrase -> COMEBACK_KW SEMICOLON .

    VOID_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    IF_KW           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LETTER          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AA_LOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OO_LOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIL_LOP         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AND_LOP         reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OR_LOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MI_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MU_OP           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QU_UOP          reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE            reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE           reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OTHER_KW        reduce using rule 64 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 99

    (65) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 149


state 100

    (66) returnPhrase -> GIVEBACK_KW numOrLetter . SEMICOLON

    SEMICOLON       shift and go to state 150


state 101

    (2) numOrLetter -> NUMBER .

    SEMICOLON       reduce using rule 2 (numOrLetter -> NUMBER .)


state 102

    (3) numOrLetter -> LETTER .
    (106) alterable -> LETTER .
    (111) inalterable -> LETTER . OPENING_PARENTHESES args CLOSING_PARENTHESES

  ! reduce/reduce conflict for SEMICOLON resolved using rule 3 (numOrLetter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrLetter -> LETTER .)
    PP_OP           reduce using rule 106 (alterable -> LETTER .)
    MM_OP           reduce using rule 106 (alterable -> LETTER .)
    OPENING_BRACKET reduce using rule 106 (alterable -> LETTER .)
    LETTER          reduce using rule 106 (alterable -> LETTER .)
    EQ_OP           reduce using rule 106 (alterable -> LETTER .)
    PLE_OP          reduce using rule 106 (alterable -> LETTER .)
    MIE_OP          reduce using rule 106 (alterable -> LETTER .)
    MUE_OP          reduce using rule 106 (alterable -> LETTER .)
    DIE_OP          reduce using rule 106 (alterable -> LETTER .)
    PL_OP           reduce using rule 106 (alterable -> LETTER .)
    MI_OP           reduce using rule 106 (alterable -> LETTER .)
    MU_OP           reduce using rule 106 (alterable -> LETTER .)
    DI_OP           reduce using rule 106 (alterable -> LETTER .)
    PE_OP           reduce using rule 106 (alterable -> LETTER .)
    LE_REL          reduce using rule 106 (alterable -> LETTER .)
    GE_REL          reduce using rule 106 (alterable -> LETTER .)
    EQ_REL          reduce using rule 106 (alterable -> LETTER .)
    GT_REL          reduce using rule 106 (alterable -> LETTER .)
    LT_REL          reduce using rule 106 (alterable -> LETTER .)
    NEQ_REL         reduce using rule 106 (alterable -> LETTER .)
    AA_LOP          reduce using rule 106 (alterable -> LETTER .)
    OO_LOP          reduce using rule 106 (alterable -> LETTER .)
    TIL_LOP         reduce using rule 106 (alterable -> LETTER .)
    AND_LOP         reduce using rule 106 (alterable -> LETTER .)
    OR_LOP          reduce using rule 106 (alterable -> LETTER .)
    OPENING_PARENTHESES shift and go to state 87

  ! SEMICOLON       [ reduce using rule 106 (alterable -> LETTER .) ]


state 103

    (67) continue -> CONTINUE_KW SEMICOLON .

    VOID_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    IF_KW           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    LETTER          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    AA_LOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OO_LOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    TIL_LOP         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    AND_LOP         reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OR_LOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MI_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    MU_OP           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    QU_UOP          reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE            reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE           reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)
    OTHER_KW        reduce using rule 67 (continue -> CONTINUE_KW SEMICOLON .)


state 104

    (68) allExpression -> alterable mathOp . allExpression
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    alterable                      shift and go to state 56
    allExpression                  shift and go to state 151
    eachExpression                 shift and go to state 51
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 105

    (69) allExpression -> alterable PP_OP .

    SEMICOLON       reduce using rule 69 (allExpression -> alterable PP_OP .)
    CLOSING_PARENTHESES reduce using rule 69 (allExpression -> alterable PP_OP .)
    COMA            reduce using rule 69 (allExpression -> alterable PP_OP .)
    CLOSING_BRACKET reduce using rule 69 (allExpression -> alterable PP_OP .)


state 106

    (70) allExpression -> alterable MM_OP .

    SEMICOLON       reduce using rule 70 (allExpression -> alterable MM_OP .)
    CLOSING_PARENTHESES reduce using rule 70 (allExpression -> alterable MM_OP .)
    COMA            reduce using rule 70 (allExpression -> alterable MM_OP .)
    CLOSING_BRACKET reduce using rule 70 (allExpression -> alterable MM_OP .)


state 107

    (107) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    alterable                      shift and go to state 56
    allExpression                  shift and go to state 152
    eachExpression                 shift and go to state 51
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 108

    (108) alterable -> alterable LETTER .

    PP_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    MM_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    OPENING_BRACKET reduce using rule 108 (alterable -> alterable LETTER .)
    LETTER          reduce using rule 108 (alterable -> alterable LETTER .)
    EQ_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    PLE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    MIE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    MUE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    DIE_OP          reduce using rule 108 (alterable -> alterable LETTER .)
    PL_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    MI_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    MU_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    DI_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    PE_OP           reduce using rule 108 (alterable -> alterable LETTER .)
    LE_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    GE_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    EQ_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    GT_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    LT_REL          reduce using rule 108 (alterable -> alterable LETTER .)
    NEQ_REL         reduce using rule 108 (alterable -> alterable LETTER .)
    AA_LOP          reduce using rule 108 (alterable -> alterable LETTER .)
    OO_LOP          reduce using rule 108 (alterable -> alterable LETTER .)
    TIL_LOP         reduce using rule 108 (alterable -> alterable LETTER .)
    AND_LOP         reduce using rule 108 (alterable -> alterable LETTER .)
    OR_LOP          reduce using rule 108 (alterable -> alterable LETTER .)
    SEMICOLON       reduce using rule 108 (alterable -> alterable LETTER .)
    CLOSING_PARENTHESES reduce using rule 108 (alterable -> alterable LETTER .)
    COMA            reduce using rule 108 (alterable -> alterable LETTER .)
    CLOSING_BRACKET reduce using rule 108 (alterable -> alterable LETTER .)


state 109

    (72) mathOp -> EQ_OP .

    LETTER          reduce using rule 72 (mathOp -> EQ_OP .)
    AA_LOP          reduce using rule 72 (mathOp -> EQ_OP .)
    OO_LOP          reduce using rule 72 (mathOp -> EQ_OP .)
    TIL_LOP         reduce using rule 72 (mathOp -> EQ_OP .)
    AND_LOP         reduce using rule 72 (mathOp -> EQ_OP .)
    OR_LOP          reduce using rule 72 (mathOp -> EQ_OP .)
    MI_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    MU_OP           reduce using rule 72 (mathOp -> EQ_OP .)
    QU_UOP          reduce using rule 72 (mathOp -> EQ_OP .)
    OPENING_PARENTHESES reduce using rule 72 (mathOp -> EQ_OP .)
    CONST_KW        reduce using rule 72 (mathOp -> EQ_OP .)
    TRUE            reduce using rule 72 (mathOp -> EQ_OP .)
    FALSE           reduce using rule 72 (mathOp -> EQ_OP .)


state 110

    (73) mathOp -> PLE_OP .

    LETTER          reduce using rule 73 (mathOp -> PLE_OP .)
    AA_LOP          reduce using rule 73 (mathOp -> PLE_OP .)
    OO_LOP          reduce using rule 73 (mathOp -> PLE_OP .)
    TIL_LOP         reduce using rule 73 (mathOp -> PLE_OP .)
    AND_LOP         reduce using rule 73 (mathOp -> PLE_OP .)
    OR_LOP          reduce using rule 73 (mathOp -> PLE_OP .)
    MI_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    MU_OP           reduce using rule 73 (mathOp -> PLE_OP .)
    QU_UOP          reduce using rule 73 (mathOp -> PLE_OP .)
    OPENING_PARENTHESES reduce using rule 73 (mathOp -> PLE_OP .)
    CONST_KW        reduce using rule 73 (mathOp -> PLE_OP .)
    TRUE            reduce using rule 73 (mathOp -> PLE_OP .)
    FALSE           reduce using rule 73 (mathOp -> PLE_OP .)


state 111

    (74) mathOp -> MIE_OP .

    LETTER          reduce using rule 74 (mathOp -> MIE_OP .)
    AA_LOP          reduce using rule 74 (mathOp -> MIE_OP .)
    OO_LOP          reduce using rule 74 (mathOp -> MIE_OP .)
    TIL_LOP         reduce using rule 74 (mathOp -> MIE_OP .)
    AND_LOP         reduce using rule 74 (mathOp -> MIE_OP .)
    OR_LOP          reduce using rule 74 (mathOp -> MIE_OP .)
    MI_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    MU_OP           reduce using rule 74 (mathOp -> MIE_OP .)
    QU_UOP          reduce using rule 74 (mathOp -> MIE_OP .)
    OPENING_PARENTHESES reduce using rule 74 (mathOp -> MIE_OP .)
    CONST_KW        reduce using rule 74 (mathOp -> MIE_OP .)
    TRUE            reduce using rule 74 (mathOp -> MIE_OP .)
    FALSE           reduce using rule 74 (mathOp -> MIE_OP .)


state 112

    (75) mathOp -> MUE_OP .

    LETTER          reduce using rule 75 (mathOp -> MUE_OP .)
    AA_LOP          reduce using rule 75 (mathOp -> MUE_OP .)
    OO_LOP          reduce using rule 75 (mathOp -> MUE_OP .)
    TIL_LOP         reduce using rule 75 (mathOp -> MUE_OP .)
    AND_LOP         reduce using rule 75 (mathOp -> MUE_OP .)
    OR_LOP          reduce using rule 75 (mathOp -> MUE_OP .)
    MI_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    MU_OP           reduce using rule 75 (mathOp -> MUE_OP .)
    QU_UOP          reduce using rule 75 (mathOp -> MUE_OP .)
    OPENING_PARENTHESES reduce using rule 75 (mathOp -> MUE_OP .)
    CONST_KW        reduce using rule 75 (mathOp -> MUE_OP .)
    TRUE            reduce using rule 75 (mathOp -> MUE_OP .)
    FALSE           reduce using rule 75 (mathOp -> MUE_OP .)


state 113

    (76) mathOp -> DIE_OP .

    LETTER          reduce using rule 76 (mathOp -> DIE_OP .)
    AA_LOP          reduce using rule 76 (mathOp -> DIE_OP .)
    OO_LOP          reduce using rule 76 (mathOp -> DIE_OP .)
    TIL_LOP         reduce using rule 76 (mathOp -> DIE_OP .)
    AND_LOP         reduce using rule 76 (mathOp -> DIE_OP .)
    OR_LOP          reduce using rule 76 (mathOp -> DIE_OP .)
    MI_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    MU_OP           reduce using rule 76 (mathOp -> DIE_OP .)
    QU_UOP          reduce using rule 76 (mathOp -> DIE_OP .)
    OPENING_PARENTHESES reduce using rule 76 (mathOp -> DIE_OP .)
    CONST_KW        reduce using rule 76 (mathOp -> DIE_OP .)
    TRUE            reduce using rule 76 (mathOp -> DIE_OP .)
    FALSE           reduce using rule 76 (mathOp -> DIE_OP .)


state 114

    (79) eachExpression -> logicOp eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    SEMICOLON       reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    CLOSING_PARENTHESES reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    COMA            reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 79 (eachExpression -> logicOp eachExpression .)
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

  ! AA_LOP          [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! OO_LOP          [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! AND_LOP         [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]
  ! OR_LOP          [ reduce using rule 79 (eachExpression -> logicOp eachExpression .) ]

    logicOp                        shift and go to state 96

state 115

    (82) relExpression -> mathEXP compareType . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    mathEXP                        shift and go to state 153
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 116

    (84) mathEXP -> mathEXP op . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    mathEXP                        shift and go to state 154
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 117

    (86) compareType -> equal .

    MI_OP           reduce using rule 86 (compareType -> equal .)
    MU_OP           reduce using rule 86 (compareType -> equal .)
    QU_UOP          reduce using rule 86 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 86 (compareType -> equal .)
    LETTER          reduce using rule 86 (compareType -> equal .)
    CONST_KW        reduce using rule 86 (compareType -> equal .)
    TRUE            reduce using rule 86 (compareType -> equal .)
    FALSE           reduce using rule 86 (compareType -> equal .)


state 118

    (87) compareType -> nonEqual .

    MI_OP           reduce using rule 87 (compareType -> nonEqual .)
    MU_OP           reduce using rule 87 (compareType -> nonEqual .)
    QU_UOP          reduce using rule 87 (compareType -> nonEqual .)
    OPENING_PARENTHESES reduce using rule 87 (compareType -> nonEqual .)
    LETTER          reduce using rule 87 (compareType -> nonEqual .)
    CONST_KW        reduce using rule 87 (compareType -> nonEqual .)
    TRUE            reduce using rule 87 (compareType -> nonEqual .)
    FALSE           reduce using rule 87 (compareType -> nonEqual .)


state 119

    (94) op -> PL_OP .

    MI_OP           reduce using rule 94 (op -> PL_OP .)
    MU_OP           reduce using rule 94 (op -> PL_OP .)
    QU_UOP          reduce using rule 94 (op -> PL_OP .)
    OPENING_PARENTHESES reduce using rule 94 (op -> PL_OP .)
    LETTER          reduce using rule 94 (op -> PL_OP .)
    CONST_KW        reduce using rule 94 (op -> PL_OP .)
    TRUE            reduce using rule 94 (op -> PL_OP .)
    FALSE           reduce using rule 94 (op -> PL_OP .)


state 120

    (95) op -> MI_OP .

    MI_OP           reduce using rule 95 (op -> MI_OP .)
    MU_OP           reduce using rule 95 (op -> MI_OP .)
    QU_UOP          reduce using rule 95 (op -> MI_OP .)
    OPENING_PARENTHESES reduce using rule 95 (op -> MI_OP .)
    LETTER          reduce using rule 95 (op -> MI_OP .)
    CONST_KW        reduce using rule 95 (op -> MI_OP .)
    TRUE            reduce using rule 95 (op -> MI_OP .)
    FALSE           reduce using rule 95 (op -> MI_OP .)


state 121

    (96) op -> MU_OP .

    MI_OP           reduce using rule 96 (op -> MU_OP .)
    MU_OP           reduce using rule 96 (op -> MU_OP .)
    QU_UOP          reduce using rule 96 (op -> MU_OP .)
    OPENING_PARENTHESES reduce using rule 96 (op -> MU_OP .)
    LETTER          reduce using rule 96 (op -> MU_OP .)
    CONST_KW        reduce using rule 96 (op -> MU_OP .)
    TRUE            reduce using rule 96 (op -> MU_OP .)
    FALSE           reduce using rule 96 (op -> MU_OP .)


state 122

    (97) op -> DI_OP .

    MI_OP           reduce using rule 97 (op -> DI_OP .)
    MU_OP           reduce using rule 97 (op -> DI_OP .)
    QU_UOP          reduce using rule 97 (op -> DI_OP .)
    OPENING_PARENTHESES reduce using rule 97 (op -> DI_OP .)
    LETTER          reduce using rule 97 (op -> DI_OP .)
    CONST_KW        reduce using rule 97 (op -> DI_OP .)
    TRUE            reduce using rule 97 (op -> DI_OP .)
    FALSE           reduce using rule 97 (op -> DI_OP .)


state 123

    (98) op -> PE_OP .

    MI_OP           reduce using rule 98 (op -> PE_OP .)
    MU_OP           reduce using rule 98 (op -> PE_OP .)
    QU_UOP          reduce using rule 98 (op -> PE_OP .)
    OPENING_PARENTHESES reduce using rule 98 (op -> PE_OP .)
    LETTER          reduce using rule 98 (op -> PE_OP .)
    CONST_KW        reduce using rule 98 (op -> PE_OP .)
    TRUE            reduce using rule 98 (op -> PE_OP .)
    FALSE           reduce using rule 98 (op -> PE_OP .)


state 124

    (88) equal -> LE_REL .

    MI_OP           reduce using rule 88 (equal -> LE_REL .)
    MU_OP           reduce using rule 88 (equal -> LE_REL .)
    QU_UOP          reduce using rule 88 (equal -> LE_REL .)
    OPENING_PARENTHESES reduce using rule 88 (equal -> LE_REL .)
    LETTER          reduce using rule 88 (equal -> LE_REL .)
    CONST_KW        reduce using rule 88 (equal -> LE_REL .)
    TRUE            reduce using rule 88 (equal -> LE_REL .)
    FALSE           reduce using rule 88 (equal -> LE_REL .)


state 125

    (89) equal -> GE_REL .

    MI_OP           reduce using rule 89 (equal -> GE_REL .)
    MU_OP           reduce using rule 89 (equal -> GE_REL .)
    QU_UOP          reduce using rule 89 (equal -> GE_REL .)
    OPENING_PARENTHESES reduce using rule 89 (equal -> GE_REL .)
    LETTER          reduce using rule 89 (equal -> GE_REL .)
    CONST_KW        reduce using rule 89 (equal -> GE_REL .)
    TRUE            reduce using rule 89 (equal -> GE_REL .)
    FALSE           reduce using rule 89 (equal -> GE_REL .)


state 126

    (90) equal -> EQ_REL .

    MI_OP           reduce using rule 90 (equal -> EQ_REL .)
    MU_OP           reduce using rule 90 (equal -> EQ_REL .)
    QU_UOP          reduce using rule 90 (equal -> EQ_REL .)
    OPENING_PARENTHESES reduce using rule 90 (equal -> EQ_REL .)
    LETTER          reduce using rule 90 (equal -> EQ_REL .)
    CONST_KW        reduce using rule 90 (equal -> EQ_REL .)
    TRUE            reduce using rule 90 (equal -> EQ_REL .)
    FALSE           reduce using rule 90 (equal -> EQ_REL .)


state 127

    (91) nonEqual -> GT_REL .

    MI_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    MU_OP           reduce using rule 91 (nonEqual -> GT_REL .)
    QU_UOP          reduce using rule 91 (nonEqual -> GT_REL .)
    OPENING_PARENTHESES reduce using rule 91 (nonEqual -> GT_REL .)
    LETTER          reduce using rule 91 (nonEqual -> GT_REL .)
    CONST_KW        reduce using rule 91 (nonEqual -> GT_REL .)
    TRUE            reduce using rule 91 (nonEqual -> GT_REL .)
    FALSE           reduce using rule 91 (nonEqual -> GT_REL .)


state 128

    (92) nonEqual -> LT_REL .

    MI_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    MU_OP           reduce using rule 92 (nonEqual -> LT_REL .)
    QU_UOP          reduce using rule 92 (nonEqual -> LT_REL .)
    OPENING_PARENTHESES reduce using rule 92 (nonEqual -> LT_REL .)
    LETTER          reduce using rule 92 (nonEqual -> LT_REL .)
    CONST_KW        reduce using rule 92 (nonEqual -> LT_REL .)
    TRUE            reduce using rule 92 (nonEqual -> LT_REL .)
    FALSE           reduce using rule 92 (nonEqual -> LT_REL .)


state 129

    (93) nonEqual -> NEQ_REL .

    MI_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    MU_OP           reduce using rule 93 (nonEqual -> NEQ_REL .)
    QU_UOP          reduce using rule 93 (nonEqual -> NEQ_REL .)
    OPENING_PARENTHESES reduce using rule 93 (nonEqual -> NEQ_REL .)
    LETTER          reduce using rule 93 (nonEqual -> NEQ_REL .)
    CONST_KW        reduce using rule 93 (nonEqual -> NEQ_REL .)
    TRUE            reduce using rule 93 (nonEqual -> NEQ_REL .)
    FALSE           reduce using rule 93 (nonEqual -> NEQ_REL .)


state 130

    (99) unaryExpression -> unaryop unaryExpression .

    PL_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    MI_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    MU_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    DI_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    PE_OP           reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    LE_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    GE_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    EQ_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    GT_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    LT_REL          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    NEQ_REL         reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    AA_LOP          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    OO_LOP          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    TIL_LOP         reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    AND_LOP         reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    OR_LOP          reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    COMA            reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 99 (unaryExpression -> unaryop unaryExpression .)


state 131

    (33) paramList -> paramList COMA paramId .

    COMA            reduce using rule 33 (paramList -> paramList COMA paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramList COMA paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramList COMA paramId .)


state 132

    (38) paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .

    COMA            reduce using rule 38 (paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 38 (paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 38 (paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET .)


state 133

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 155

state 134

    (14) variableList -> variableList COMA variableList .
    (14) variableList -> variableList . COMA variableList

  ! shift/reduce conflict for COMA resolved as shift
    SEMICOLON       reduce using rule 14 (variableList -> variableList COMA variableList .)
    COMA            shift and go to state 82

  ! COMA            [ reduce using rule 14 (variableList -> variableList COMA variableList .) ]


state 135

    (17) varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 17 (varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMA            reduce using rule 17 (varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 136

    (111) inalterable -> LETTER OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 156


state 137

    (112) args -> arguments .
    (114) arguments -> arguments . COMA allExpression

    CLOSING_PARENTHESES reduce using rule 112 (args -> arguments .)
    COMA            shift and go to state 157


state 138

    (115) arguments -> allExpression .

    COMA            reduce using rule 115 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 115 (arguments -> allExpression .)


state 139

    (109) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PL_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MI_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MU_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DI_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PE_OP           reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LE_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GE_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQ_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GT_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LT_REL          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NEQ_REL         reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AA_LOP          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OO_LOP          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIL_LOP         reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND_LOP         reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR_LOP          reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMA            reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 109 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 140

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    CLOSING_BRACE   shift and go to state 159
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 160
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 141

    (35) localDeclarations -> ScopedVariableDec localDeclarations .

    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    IF_KW           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    TILL_KW         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    LETTER          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    AA_LOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OO_LOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    TIL_LOP         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    AND_LOP         reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OR_LOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MI_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    MU_OP           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    QU_UOP          reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    CONST_KW        reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    TRUE            reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)
    FALSE           reduce using rule 35 (localDeclarations -> ScopedVariableDec localDeclarations .)


state 142

    (13) ScopedVariableDec -> scopedSpecifier variableList . SEMICOLON
    (14) variableList -> variableList . COMA variableList

    SEMICOLON       shift and go to state 167
    COMA            shift and go to state 82


state 143

    (20) scopedSpecifier -> STATIC_KW type .

    LETTER          reduce using rule 20 (scopedSpecifier -> STATIC_KW type .)


state 144

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES ifBodyWithBracket
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 168
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

    logicOp                        shift and go to state 96

state 145

    (77) eachExpression -> eachExpression logicOp eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    SEMICOLON       reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    CLOSING_PARENTHESES reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    COMA            reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .)
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

  ! AA_LOP          [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OO_LOP          [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! AND_LOP         [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OR_LOP          [ reduce using rule 77 (eachExpression -> eachExpression logicOp eachExpression .) ]

    logicOp                        shift and go to state 96

state 146

    (78) eachExpression -> eachExpression logicOp THEN_KW . eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 169
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 147

    (81) eachExpression -> eachExpression logicOp ELSE_KW . eachExpression
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    LETTER          shift and go to state 86
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 170
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    alterable                      shift and go to state 85
    constant                       shift and go to state 72

state 148

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 171
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

    logicOp                        shift and go to state 96

state 149

    (65) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    VOID_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    IF_KW           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LETTER          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AA_LOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OO_LOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIL_LOP         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AND_LOP         reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OR_LOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MI_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MU_OP           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QU_UOP          reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE            reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE           reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 65 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 150

    (66) returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .

    VOID_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    BOOLEAN_KW      reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CHARACTER_KW    reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    INTEGER_KW      reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CHAR_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    BOOL_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    INT_KW          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    $end            reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CLOSING_BRACE   reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    SEMICOLON       reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_BRACE   reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    IF_KW           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TILL_KW         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    COMEBACK_KW     reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    GIVEBACK_KW     reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CONTINUE_KW     reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    LETTER          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    AA_LOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OO_LOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TIL_LOP         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    AND_LOP         reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OR_LOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MI_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MU_OP           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    QU_UOP          reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CONST_KW        reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TRUE            reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    FALSE           reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OTHER_KW        reduce using rule 66 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)


state 151

    (68) allExpression -> alterable mathOp allExpression .

    SEMICOLON       reduce using rule 68 (allExpression -> alterable mathOp allExpression .)
    CLOSING_PARENTHESES reduce using rule 68 (allExpression -> alterable mathOp allExpression .)
    COMA            reduce using rule 68 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 68 (allExpression -> alterable mathOp allExpression .)


state 152

    (107) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 172


state 153

    (82) relExpression -> mathEXP compareType mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (94) op -> . PL_OP
    (95) op -> . MI_OP
    (96) op -> . MU_OP
    (97) op -> . DI_OP
    (98) op -> . PE_OP

    AA_LOP          reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    OO_LOP          reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    TIL_LOP         reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    AND_LOP         reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    OR_LOP          reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_PARENTHESES reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    COMA            reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 82 (relExpression -> mathEXP compareType mathEXP .)
    PL_OP           shift and go to state 119
    MI_OP           shift and go to state 120
    MU_OP           shift and go to state 121
    DI_OP           shift and go to state 122
    PE_OP           shift and go to state 123

    op                             shift and go to state 116

state 154

    (84) mathEXP -> mathEXP op mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (94) op -> . PL_OP
    (95) op -> . MI_OP
    (96) op -> . MU_OP
    (97) op -> . DI_OP
    (98) op -> . PE_OP

  ! shift/reduce conflict for PL_OP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for DI_OP resolved as shift
  ! shift/reduce conflict for PE_OP resolved as shift
    LE_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    GE_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    EQ_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    GT_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    LT_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    NEQ_REL         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    AA_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    OO_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    TIL_LOP         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    AND_LOP         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    OR_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    SEMICOLON       reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_PARENTHESES reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    COMA            reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_BRACKET reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    PL_OP           shift and go to state 119
    MI_OP           shift and go to state 120
    MU_OP           shift and go to state 121
    DI_OP           shift and go to state 122
    PE_OP           shift and go to state 123

  ! PL_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! MI_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! MU_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! DI_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! PE_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]

    op                             shift and go to state 116

state 155

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    CLOSING_BRACE   shift and go to state 173
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 160
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 156

    (111) inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PL_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MI_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MU_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DI_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PE_OP           reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LE_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GE_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQ_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GT_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LT_REL          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NEQ_REL         reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AA_LOP          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OO_LOP          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIL_LOP         reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND_LOP         reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR_LOP          reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMA            reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 111 (inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 157

    (114) arguments -> arguments COMA . allExpression
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    allExpression                  shift and go to state 174
    alterable                      shift and go to state 56
    eachExpression                 shift and go to state 51
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 158

    (50) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 92
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    localDeclarations              shift and go to state 175
    ScopedVariableDec              shift and go to state 90
    scopedSpecifier                shift and go to state 91
    type                           shift and go to state 93

state 159

    (7) declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 7 (declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 160

    (51) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 51 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 51 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 51 (statementList -> statementList statement .)
    IF_KW           reduce using rule 51 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 51 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 51 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 51 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 51 (statementList -> statementList statement .)
    LETTER          reduce using rule 51 (statementList -> statementList statement .)
    AA_LOP          reduce using rule 51 (statementList -> statementList statement .)
    OO_LOP          reduce using rule 51 (statementList -> statementList statement .)
    TIL_LOP         reduce using rule 51 (statementList -> statementList statement .)
    AND_LOP         reduce using rule 51 (statementList -> statementList statement .)
    OR_LOP          reduce using rule 51 (statementList -> statementList statement .)
    MI_OP           reduce using rule 51 (statementList -> statementList statement .)
    MU_OP           reduce using rule 51 (statementList -> statementList statement .)
    QU_UOP          reduce using rule 51 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 51 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 51 (statementList -> statementList statement .)
    TRUE            reduce using rule 51 (statementList -> statementList statement .)
    FALSE           reduce using rule 51 (statementList -> statementList statement .)


state 161

    (39) statement -> phrase .

    CLOSING_BRACE   reduce using rule 39 (statement -> phrase .)
    SEMICOLON       reduce using rule 39 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 39 (statement -> phrase .)
    IF_KW           reduce using rule 39 (statement -> phrase .)
    TILL_KW         reduce using rule 39 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 39 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 39 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 39 (statement -> phrase .)
    LETTER          reduce using rule 39 (statement -> phrase .)
    AA_LOP          reduce using rule 39 (statement -> phrase .)
    OO_LOP          reduce using rule 39 (statement -> phrase .)
    TIL_LOP         reduce using rule 39 (statement -> phrase .)
    AND_LOP         reduce using rule 39 (statement -> phrase .)
    OR_LOP          reduce using rule 39 (statement -> phrase .)
    MI_OP           reduce using rule 39 (statement -> phrase .)
    MU_OP           reduce using rule 39 (statement -> phrase .)
    QU_UOP          reduce using rule 39 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 39 (statement -> phrase .)
    CONST_KW        reduce using rule 39 (statement -> phrase .)
    TRUE            reduce using rule 39 (statement -> phrase .)
    FALSE           reduce using rule 39 (statement -> phrase .)
    OTHER_KW        reduce using rule 39 (statement -> phrase .)
    VOID_KW         reduce using rule 39 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 39 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 39 (statement -> phrase .)
    INTEGER_KW      reduce using rule 39 (statement -> phrase .)
    CHAR_KW         reduce using rule 39 (statement -> phrase .)
    BOOL_KW         reduce using rule 39 (statement -> phrase .)
    INT_KW          reduce using rule 39 (statement -> phrase .)
    $end            reduce using rule 39 (statement -> phrase .)


state 162

    (40) statement -> compoundPhrase .

    CLOSING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 40 (statement -> compoundPhrase .)
    IF_KW           reduce using rule 40 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 40 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 40 (statement -> compoundPhrase .)
    LETTER          reduce using rule 40 (statement -> compoundPhrase .)
    AA_LOP          reduce using rule 40 (statement -> compoundPhrase .)
    OO_LOP          reduce using rule 40 (statement -> compoundPhrase .)
    TIL_LOP         reduce using rule 40 (statement -> compoundPhrase .)
    AND_LOP         reduce using rule 40 (statement -> compoundPhrase .)
    OR_LOP          reduce using rule 40 (statement -> compoundPhrase .)
    MI_OP           reduce using rule 40 (statement -> compoundPhrase .)
    MU_OP           reduce using rule 40 (statement -> compoundPhrase .)
    QU_UOP          reduce using rule 40 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 40 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 40 (statement -> compoundPhrase .)
    TRUE            reduce using rule 40 (statement -> compoundPhrase .)
    FALSE           reduce using rule 40 (statement -> compoundPhrase .)
    OTHER_KW        reduce using rule 40 (statement -> compoundPhrase .)
    VOID_KW         reduce using rule 40 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 40 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 40 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 40 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 40 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 40 (statement -> compoundPhrase .)
    $end            reduce using rule 40 (statement -> compoundPhrase .)


state 163

    (41) statement -> selectPhrase .

    CLOSING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    SEMICOLON       reduce using rule 41 (statement -> selectPhrase .)
    OPENING_BRACE   reduce using rule 41 (statement -> selectPhrase .)
    IF_KW           reduce using rule 41 (statement -> selectPhrase .)
    TILL_KW         reduce using rule 41 (statement -> selectPhrase .)
    COMEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 41 (statement -> selectPhrase .)
    CONTINUE_KW     reduce using rule 41 (statement -> selectPhrase .)
    LETTER          reduce using rule 41 (statement -> selectPhrase .)
    AA_LOP          reduce using rule 41 (statement -> selectPhrase .)
    OO_LOP          reduce using rule 41 (statement -> selectPhrase .)
    TIL_LOP         reduce using rule 41 (statement -> selectPhrase .)
    AND_LOP         reduce using rule 41 (statement -> selectPhrase .)
    OR_LOP          reduce using rule 41 (statement -> selectPhrase .)
    MI_OP           reduce using rule 41 (statement -> selectPhrase .)
    MU_OP           reduce using rule 41 (statement -> selectPhrase .)
    QU_UOP          reduce using rule 41 (statement -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 41 (statement -> selectPhrase .)
    CONST_KW        reduce using rule 41 (statement -> selectPhrase .)
    TRUE            reduce using rule 41 (statement -> selectPhrase .)
    FALSE           reduce using rule 41 (statement -> selectPhrase .)
    OTHER_KW        reduce using rule 41 (statement -> selectPhrase .)
    VOID_KW         reduce using rule 41 (statement -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHARACTER_KW    reduce using rule 41 (statement -> selectPhrase .)
    INTEGER_KW      reduce using rule 41 (statement -> selectPhrase .)
    CHAR_KW         reduce using rule 41 (statement -> selectPhrase .)
    BOOL_KW         reduce using rule 41 (statement -> selectPhrase .)
    INT_KW          reduce using rule 41 (statement -> selectPhrase .)
    $end            reduce using rule 41 (statement -> selectPhrase .)


state 164

    (42) statement -> iterationPhrase .

    CLOSING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 42 (statement -> iterationPhrase .)
    IF_KW           reduce using rule 42 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 42 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 42 (statement -> iterationPhrase .)
    LETTER          reduce using rule 42 (statement -> iterationPhrase .)
    AA_LOP          reduce using rule 42 (statement -> iterationPhrase .)
    OO_LOP          reduce using rule 42 (statement -> iterationPhrase .)
    TIL_LOP         reduce using rule 42 (statement -> iterationPhrase .)
    AND_LOP         reduce using rule 42 (statement -> iterationPhrase .)
    OR_LOP          reduce using rule 42 (statement -> iterationPhrase .)
    MI_OP           reduce using rule 42 (statement -> iterationPhrase .)
    MU_OP           reduce using rule 42 (statement -> iterationPhrase .)
    QU_UOP          reduce using rule 42 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 42 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 42 (statement -> iterationPhrase .)
    TRUE            reduce using rule 42 (statement -> iterationPhrase .)
    FALSE           reduce using rule 42 (statement -> iterationPhrase .)
    OTHER_KW        reduce using rule 42 (statement -> iterationPhrase .)
    VOID_KW         reduce using rule 42 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 42 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 42 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 42 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 42 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 42 (statement -> iterationPhrase .)
    $end            reduce using rule 42 (statement -> iterationPhrase .)


state 165

    (43) statement -> returnPhrase .

    CLOSING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 43 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 43 (statement -> returnPhrase .)
    IF_KW           reduce using rule 43 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 43 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 43 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 43 (statement -> returnPhrase .)
    LETTER          reduce using rule 43 (statement -> returnPhrase .)
    AA_LOP          reduce using rule 43 (statement -> returnPhrase .)
    OO_LOP          reduce using rule 43 (statement -> returnPhrase .)
    TIL_LOP         reduce using rule 43 (statement -> returnPhrase .)
    AND_LOP         reduce using rule 43 (statement -> returnPhrase .)
    OR_LOP          reduce using rule 43 (statement -> returnPhrase .)
    MI_OP           reduce using rule 43 (statement -> returnPhrase .)
    MU_OP           reduce using rule 43 (statement -> returnPhrase .)
    QU_UOP          reduce using rule 43 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 43 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 43 (statement -> returnPhrase .)
    TRUE            reduce using rule 43 (statement -> returnPhrase .)
    FALSE           reduce using rule 43 (statement -> returnPhrase .)
    OTHER_KW        reduce using rule 43 (statement -> returnPhrase .)
    VOID_KW         reduce using rule 43 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 43 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 43 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 43 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 43 (statement -> returnPhrase .)
    INT_KW          reduce using rule 43 (statement -> returnPhrase .)
    $end            reduce using rule 43 (statement -> returnPhrase .)


state 166

    (44) statement -> continue .

    CLOSING_BRACE   reduce using rule 44 (statement -> continue .)
    SEMICOLON       reduce using rule 44 (statement -> continue .)
    OPENING_BRACE   reduce using rule 44 (statement -> continue .)
    IF_KW           reduce using rule 44 (statement -> continue .)
    TILL_KW         reduce using rule 44 (statement -> continue .)
    COMEBACK_KW     reduce using rule 44 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 44 (statement -> continue .)
    CONTINUE_KW     reduce using rule 44 (statement -> continue .)
    LETTER          reduce using rule 44 (statement -> continue .)
    AA_LOP          reduce using rule 44 (statement -> continue .)
    OO_LOP          reduce using rule 44 (statement -> continue .)
    TIL_LOP         reduce using rule 44 (statement -> continue .)
    AND_LOP         reduce using rule 44 (statement -> continue .)
    OR_LOP          reduce using rule 44 (statement -> continue .)
    MI_OP           reduce using rule 44 (statement -> continue .)
    MU_OP           reduce using rule 44 (statement -> continue .)
    QU_UOP          reduce using rule 44 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 44 (statement -> continue .)
    CONST_KW        reduce using rule 44 (statement -> continue .)
    TRUE            reduce using rule 44 (statement -> continue .)
    FALSE           reduce using rule 44 (statement -> continue .)
    OTHER_KW        reduce using rule 44 (statement -> continue .)
    VOID_KW         reduce using rule 44 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 44 (statement -> continue .)
    CHARACTER_KW    reduce using rule 44 (statement -> continue .)
    INTEGER_KW      reduce using rule 44 (statement -> continue .)
    CHAR_KW         reduce using rule 44 (statement -> continue .)
    BOOL_KW         reduce using rule 44 (statement -> continue .)
    INT_KW          reduce using rule 44 (statement -> continue .)
    $end            reduce using rule 44 (statement -> continue .)


state 167

    (13) ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .

    STATIC_KW       reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CHAR_KW         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    BOOL_KW         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    INT_KW          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CLOSING_BRACE   reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    SEMICOLON       reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_BRACE   reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    IF_KW           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TILL_KW         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    COMEBACK_KW     reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    GIVEBACK_KW     reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CONTINUE_KW     reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    LETTER          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    AA_LOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OO_LOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TIL_LOP         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    AND_LOP         reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OR_LOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MI_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MU_OP           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    QU_UOP          reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CONST_KW        reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TRUE            reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    FALSE           reduce using rule 13 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)


state 168

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statementWithoutBracket
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . ifBodyWithBracket
    (45) statementWithoutBracket -> . phrase
    (46) statementWithoutBracket -> . selectPhrase
    (47) statementWithoutBracket -> . iterationPhrase
    (48) statementWithoutBracket -> . returnPhrase
    (49) statementWithoutBracket -> . continue
    (58) ifBodyWithBracket -> . OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE
    (59) ifBodyWithBracket -> . OPENING_BRACE statement statement statementList CLOSING_BRACE
    (60) ifBodyWithBracket -> . OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE
    (61) ifBodyWithBracket -> . OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE
    (62) ifBodyWithBracket -> . OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    OPENING_BRACE   shift and go to state 178
    SEMICOLON       shift and go to state 49
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 51
    statementWithoutBracket        shift and go to state 176
    ifBodyWithBracket              shift and go to state 177
    phrase                         shift and go to state 43
    selectPhrase                   shift and go to state 44
    iterationPhrase                shift and go to state 45
    returnPhrase                   shift and go to state 46
    continue                       shift and go to state 47
    allExpression                  shift and go to state 48
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 169

    (78) eachExpression -> eachExpression logicOp THEN_KW eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    SEMICOLON       reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    COMA            reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

  ! AA_LOP          [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! OO_LOP          [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! AND_LOP         [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! OR_LOP          [ reduce using rule 78 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]

    logicOp                        shift and go to state 96

state 170

    (81) eachExpression -> eachExpression logicOp ELSE_KW eachExpression .
    (77) eachExpression -> eachExpression . logicOp eachExpression
    (78) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (81) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP

    SEMICOLON       reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    CLOSING_PARENTHESES reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    COMA            reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63

  ! AA_LOP          [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OO_LOP          [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! AND_LOP         [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OR_LOP          [ reduce using rule 81 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]

    logicOp                        shift and go to state 96

state 171

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 51
    statement                      shift and go to state 179
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 172

    (107) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    PP_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MM_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OPENING_BRACKET reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LETTER          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQ_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MIE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MUE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIE_OP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PL_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MI_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MU_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DI_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PE_OP           reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LE_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GE_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQ_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GT_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LT_REL          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NEQ_REL         reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AA_LOP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OO_LOP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIL_LOP         reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND_LOP         reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR_LOP          reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMA            reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 107 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 173

    (9) declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 9 (declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 174

    (114) arguments -> arguments COMA allExpression .

    COMA            reduce using rule 114 (arguments -> arguments COMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 114 (arguments -> arguments COMA allExpression .)


state 175

    (50) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 180

state 176

    (55) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .
    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket . OTHER_KW statement

  ! shift/reduce conflict for OTHER_KW resolved as shift
    VOID_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    BOOLEAN_KW      reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CHARACTER_KW    reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    INTEGER_KW      reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CHAR_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    BOOL_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    INT_KW          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    $end            reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CLOSING_BRACE   reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    SEMICOLON       reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OPENING_BRACE   reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    IF_KW           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    TILL_KW         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    COMEBACK_KW     reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    GIVEBACK_KW     reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CONTINUE_KW     reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    LETTER          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    AA_LOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OO_LOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    TIL_LOP         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    AND_LOP         reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OR_LOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MI_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    MU_OP           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    QU_UOP          reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OPENING_PARENTHESES reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    CONST_KW        reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    TRUE            reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    FALSE           reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .)
    OTHER_KW        shift and go to state 181

  ! OTHER_KW        [ reduce using rule 55 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket .) ]


state 177

    (57) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .

    VOID_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    BOOLEAN_KW      reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CHARACTER_KW    reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    INTEGER_KW      reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CHAR_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    BOOL_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    INT_KW          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    $end            reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CLOSING_BRACE   reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    SEMICOLON       reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OPENING_BRACE   reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    IF_KW           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    TILL_KW         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    COMEBACK_KW     reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    GIVEBACK_KW     reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CONTINUE_KW     reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    LETTER          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    AA_LOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OO_LOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    TIL_LOP         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    AND_LOP         reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OR_LOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MI_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    MU_OP           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    QU_UOP          reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OPENING_PARENTHESES reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    CONST_KW        reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    TRUE            reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    FALSE           reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)
    OTHER_KW        reduce using rule 57 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket .)


state 178

    (58) ifBodyWithBracket -> OPENING_BRACE . ScopedVariableDec localDeclarations statementList CLOSING_BRACE
    (59) ifBodyWithBracket -> OPENING_BRACE . statement statement statementList CLOSING_BRACE
    (60) ifBodyWithBracket -> OPENING_BRACE . statement OTHER_KW statement statement CLOSING_BRACE
    (61) ifBodyWithBracket -> OPENING_BRACE . statement statement OTHER_KW statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE . statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    STATIC_KW       shift and go to state 92
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    ScopedVariableDec              shift and go to state 182
    statement                      shift and go to state 183
    scopedSpecifier                shift and go to state 91
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    type                           shift and go to state 93
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 179

    (63) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    IF_KW           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AA_LOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OO_LOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIL_LOP         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AND_LOP         reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OR_LOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MI_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MU_OP           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QU_UOP          reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE            reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE           reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OTHER_KW        reduce using rule 63 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)


state 180

    (50) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    CLOSING_BRACE   shift and go to state 184
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 160
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 181

    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    eachExpression                 shift and go to state 51
    statement                      shift and go to state 185
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 182

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec . localDeclarations statementList CLOSING_BRACE
    (35) localDeclarations -> . ScopedVariableDec localDeclarations
    (36) localDeclarations -> .
    (13) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (20) scopedSpecifier -> . STATIC_KW type
    (21) scopedSpecifier -> . type
    (22) type -> . BOOLEAN_KW
    (23) type -> . CHARACTER_KW
    (24) type -> . INTEGER_KW
    (25) type -> . CHAR_KW
    (26) type -> . BOOL_KW
    (27) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 36 (localDeclarations -> .)
    SEMICOLON       reduce using rule 36 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 36 (localDeclarations -> .)
    IF_KW           reduce using rule 36 (localDeclarations -> .)
    TILL_KW         reduce using rule 36 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 36 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 36 (localDeclarations -> .)
    LETTER          reduce using rule 36 (localDeclarations -> .)
    AA_LOP          reduce using rule 36 (localDeclarations -> .)
    OO_LOP          reduce using rule 36 (localDeclarations -> .)
    TIL_LOP         reduce using rule 36 (localDeclarations -> .)
    AND_LOP         reduce using rule 36 (localDeclarations -> .)
    OR_LOP          reduce using rule 36 (localDeclarations -> .)
    MI_OP           reduce using rule 36 (localDeclarations -> .)
    MU_OP           reduce using rule 36 (localDeclarations -> .)
    QU_UOP          reduce using rule 36 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 36 (localDeclarations -> .)
    CONST_KW        reduce using rule 36 (localDeclarations -> .)
    TRUE            reduce using rule 36 (localDeclarations -> .)
    FALSE           reduce using rule 36 (localDeclarations -> .)
    STATIC_KW       shift and go to state 92
    BOOLEAN_KW      shift and go to state 6
    CHARACTER_KW    shift and go to state 7
    INTEGER_KW      shift and go to state 8
    CHAR_KW         shift and go to state 9
    BOOL_KW         shift and go to state 10
    INT_KW          shift and go to state 11

    ScopedVariableDec              shift and go to state 90
    localDeclarations              shift and go to state 186
    scopedSpecifier                shift and go to state 91
    type                           shift and go to state 93

state 183

    (59) ifBodyWithBracket -> OPENING_BRACE statement . statement statementList CLOSING_BRACE
    (60) ifBodyWithBracket -> OPENING_BRACE statement . OTHER_KW statement statement CLOSING_BRACE
    (61) ifBodyWithBracket -> OPENING_BRACE statement . statement OTHER_KW statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement . OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    OTHER_KW        shift and go to state 188
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 187
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 184

    (50) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    CLOSING_BRACE   reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE            reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE           reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 50 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 185

    (56) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .

    VOID_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    BOOLEAN_KW      reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CHARACTER_KW    reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    INTEGER_KW      reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CHAR_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    BOOL_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    INT_KW          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    $end            reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CLOSING_BRACE   reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    SEMICOLON       reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OPENING_BRACE   reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    IF_KW           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    TILL_KW         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    COMEBACK_KW     reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    GIVEBACK_KW     reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CONTINUE_KW     reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    LETTER          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    AA_LOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OO_LOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    TIL_LOP         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    AND_LOP         reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OR_LOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MI_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    MU_OP           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    QU_UOP          reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OPENING_PARENTHESES reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    CONST_KW        reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    TRUE            reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    FALSE           reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)
    OTHER_KW        reduce using rule 56 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement .)


state 186

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations . statementList CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 189

state 187

    (59) ifBodyWithBracket -> OPENING_BRACE statement statement . statementList CLOSING_BRACE
    (61) ifBodyWithBracket -> OPENING_BRACE statement statement . OTHER_KW statement CLOSING_BRACE
    (51) statementList -> . statementList statement
    (52) statementList -> .

    OTHER_KW        shift and go to state 191
    CLOSING_BRACE   reduce using rule 52 (statementList -> .)
    SEMICOLON       reduce using rule 52 (statementList -> .)
    OPENING_BRACE   reduce using rule 52 (statementList -> .)
    IF_KW           reduce using rule 52 (statementList -> .)
    TILL_KW         reduce using rule 52 (statementList -> .)
    COMEBACK_KW     reduce using rule 52 (statementList -> .)
    GIVEBACK_KW     reduce using rule 52 (statementList -> .)
    CONTINUE_KW     reduce using rule 52 (statementList -> .)
    LETTER          reduce using rule 52 (statementList -> .)
    AA_LOP          reduce using rule 52 (statementList -> .)
    OO_LOP          reduce using rule 52 (statementList -> .)
    TIL_LOP         reduce using rule 52 (statementList -> .)
    AND_LOP         reduce using rule 52 (statementList -> .)
    OR_LOP          reduce using rule 52 (statementList -> .)
    MI_OP           reduce using rule 52 (statementList -> .)
    MU_OP           reduce using rule 52 (statementList -> .)
    QU_UOP          reduce using rule 52 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 52 (statementList -> .)
    CONST_KW        reduce using rule 52 (statementList -> .)
    TRUE            reduce using rule 52 (statementList -> .)
    FALSE           reduce using rule 52 (statementList -> .)

    statementList                  shift and go to state 190

state 188

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW . statement statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW . statement statement OTHER_KW statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 192
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 189

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    CLOSING_BRACE   shift and go to state 193
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 160
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 190

    (59) ifBodyWithBracket -> OPENING_BRACE statement statement statementList . CLOSING_BRACE
    (51) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    CLOSING_BRACE   shift and go to state 194
    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 160
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 191

    (61) ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW . statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 195
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 192

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement . statement CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement . statement OTHER_KW statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 196
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 193

    (58) ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    TRUE            reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    FALSE           reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 58 (ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE .)


state 194

    (59) ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .

    VOID_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    $end            reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    LETTER          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    TRUE            reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    FALSE           reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 59 (ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE .)


state 195

    (61) ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 197


state 196

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement . CLOSING_BRACE
    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement . OTHER_KW statement CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 199
    OTHER_KW        shift and go to state 198


state 197

    (61) ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .

    VOID_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    INT_KW          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    $end            reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    SEMICOLON       reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    IF_KW           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    TILL_KW         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    LETTER          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    AA_LOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OO_LOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    TIL_LOP         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    AND_LOP         reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OR_LOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MI_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    MU_OP           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    QU_UOP          reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    CONST_KW        reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    TRUE            reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    FALSE           reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)
    OTHER_KW        reduce using rule 61 (ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE .)


state 198

    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW . statement CLOSING_BRACE
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (53) phrase -> . allExpression SEMICOLON
    (54) phrase -> . SEMICOLON
    (50) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (55) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket
    (56) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement
    (57) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket
    (63) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (64) returnPhrase -> . COMEBACK_KW SEMICOLON
    (65) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (66) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (67) continue -> . CONTINUE_KW SEMICOLON
    (68) allExpression -> . alterable mathOp allExpression
    (69) allExpression -> . alterable PP_OP
    (70) allExpression -> . alterable MM_OP
    (71) allExpression -> . eachExpression
    (106) alterable -> . LETTER
    (107) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (108) alterable -> . alterable LETTER
    (77) eachExpression -> . eachExpression logicOp eachExpression
    (78) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (79) eachExpression -> . logicOp eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (119) logicOp -> . AA_LOP
    (120) logicOp -> . OO_LOP
    (121) logicOp -> . TIL_LOP
    (122) logicOp -> . AND_LOP
    (123) logicOp -> . OR_LOP
    (82) relExpression -> . mathEXP compareType mathEXP
    (83) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (99) unaryExpression -> . unaryop unaryExpression
    (100) unaryExpression -> . factor
    (101) unaryop -> . MI_OP
    (102) unaryop -> . MU_OP
    (103) unaryop -> . QU_UOP
    (104) factor -> . inalterable
    (105) factor -> . alterable
    (109) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (110) inalterable -> . constant
    (111) inalterable -> . LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES
    (116) constant -> . CONST_KW
    (117) constant -> . TRUE
    (118) constant -> . FALSE

    SEMICOLON       shift and go to state 49
    OPENING_BRACE   shift and go to state 158
    IF_KW           shift and go to state 50
    TILL_KW         shift and go to state 52
    COMEBACK_KW     shift and go to state 53
    GIVEBACK_KW     shift and go to state 54
    CONTINUE_KW     shift and go to state 55
    LETTER          shift and go to state 39
    AA_LOP          shift and go to state 59
    OO_LOP          shift and go to state 60
    TIL_LOP         shift and go to state 61
    AND_LOP         shift and go to state 62
    OR_LOP          shift and go to state 63
    MI_OP           shift and go to state 68
    MU_OP           shift and go to state 69
    QU_UOP          shift and go to state 70
    OPENING_PARENTHESES shift and go to state 40
    CONST_KW        shift and go to state 73
    TRUE            shift and go to state 74
    FALSE           shift and go to state 75

    statement                      shift and go to state 200
    phrase                         shift and go to state 161
    compoundPhrase                 shift and go to state 162
    selectPhrase                   shift and go to state 163
    iterationPhrase                shift and go to state 164
    returnPhrase                   shift and go to state 165
    continue                       shift and go to state 166
    allExpression                  shift and go to state 48
    eachExpression                 shift and go to state 51
    alterable                      shift and go to state 56
    logicOp                        shift and go to state 57
    relExpression                  shift and go to state 58
    mathEXP                        shift and go to state 64
    unaryExpression                shift and go to state 65
    unaryop                        shift and go to state 66
    factor                         shift and go to state 67
    inalterable                    shift and go to state 71
    constant                       shift and go to state 72

state 199

    (60) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .

    VOID_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    INT_KW          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    $end            reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    SEMICOLON       reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    IF_KW           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    TILL_KW         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    LETTER          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    AA_LOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OO_LOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    TIL_LOP         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    AND_LOP         reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OR_LOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MI_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    MU_OP           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    QU_UOP          reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    CONST_KW        reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    TRUE            reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    FALSE           reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)
    OTHER_KW        reduce using rule 60 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE .)


state 200

    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 201


state 201

    (62) ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .

    VOID_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CHAR_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    BOOL_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    INT_KW          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    $end            reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    SEMICOLON       reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    IF_KW           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    TILL_KW         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    LETTER          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    AA_LOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OO_LOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    TIL_LOP         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    AND_LOP         reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OR_LOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MI_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    MU_OP           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    QU_UOP          reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    CONST_KW        reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    TRUE            reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    FALSE           reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)
    OTHER_KW        reduce using rule 62 (ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AA_LOP in state 114 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 114 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 114 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 114 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 114 resolved as shift
WARNING: shift/reduce conflict for COMA in state 134 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 145 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 145 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 145 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 145 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 145 resolved as shift
WARNING: shift/reduce conflict for PL_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for DI_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for PE_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for OTHER_KW in state 176 resolved as shift
WARNING: reduce/reduce conflict in state 102 resolved using rule (numOrLetter -> LETTER)
WARNING: rejected rule (alterable -> LETTER) in state 102
