Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Comment
    Letter
    reserved

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrLetter -> Num
Rule 3     numOrLetter -> idLetter
Rule 4     list -> list declaration
Rule 5     list -> declaration
Rule 6     declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement
Rule 7     declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement
Rule 8     declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement
Rule 9     declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement
Rule 10    declaration -> type variableList Semicolon
Rule 11    variableList -> variableList Comma varInitialization
Rule 12    variableList -> varInitialization
Rule 13    varInitialization -> varForm
Rule 14    varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
Rule 15    varForm -> idLetter Opening_Bracket Num Closing_Bracket
Rule 16    varForm -> idLetter
Rule 17    type -> Boolean_KW
Rule 18    type -> Character_KW
Rule 19    type -> Integer_KW
Rule 20    type -> char_KW
Rule 21    type -> bool_KW
Rule 22    type -> int_KW
Rule 23    parameter -> listOfParameters
Rule 24    parameter -> <empty>
Rule 25    listOfParameters -> listOfParameters Semicolon paramTypeList
Rule 26    listOfParameters -> paramTypeList
Rule 27    paramTypeList -> type paramList
Rule 28    paramList -> paramList Comma paramId
Rule 29    paramList -> paramId
Rule 30    localDeclarations -> localDeclarations Static_KW type variableList Semicolon
Rule 31    localDeclarations -> localDeclarations type variableList Semicolon
Rule 32    localDeclarations -> <empty>
Rule 33    paramId -> idLetter
Rule 34    paramId -> idLetter Opening_Bracket Closing_Bracket
Rule 35    statementList -> statement statementList
Rule 36    statementList -> <empty>
Rule 37    statement -> phrase
Rule 38    statement -> compoundPhrase
Rule 39    statement -> selectPhrase
Rule 40    statement -> iterationPhrase
Rule 41    statement -> returnPhrase
Rule 42    statement -> continue
Rule 43    compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace
Rule 44    phrase -> allExpression Semicolon
Rule 45    phrase -> Semicolon
Rule 46    selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
Rule 47    selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
Rule 48    ifBody -> statement
Rule 49    ifBody -> statement Other_KW statement
Rule 50    ifBody -> Semicolon
Rule 51    iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
Rule 52    returnPhrase -> ComeBack_KW Semicolon
Rule 53    returnPhrase -> GiveBack_KW allExpression Semicolon
Rule 54    returnPhrase -> GiveBack_KW numOrLetter Semicolon
Rule 55    continue -> Continue_KW Semicolon
Rule 56    allExpression -> alterable mathOp allExpression
Rule 57    allExpression -> alterable PP
Rule 58    allExpression -> alterable MM
Rule 59    allExpression -> eachExpression
Rule 60    allExpression -> alterable mathOp alterable
Rule 61    mathOp -> Equal
Rule 62    mathOp -> PlusEqual
Rule 63    mathOp -> MinusEqual
Rule 64    mathOp -> TimesEqual
Rule 65    mathOp -> DivideEqual
Rule 66    eachExpression -> eachExpression logicOp eachExpression
Rule 67    eachExpression -> eachExpression logicOp Then_KW eachExpression
Rule 68    eachExpression -> logicOp eachExpression
Rule 69    eachExpression -> relExpression
Rule 70    eachExpression -> eachExpression logicOp Else_KW eachExpression
Rule 71    relExpression -> mathEXP compareType mathEXP
Rule 72    relExpression -> mathEXP
Rule 73    compareType -> equal
Rule 74    compareType -> nonEqual
Rule 75    equal -> LEqual
Rule 76    equal -> GEqual
Rule 77    equal -> EEqual
Rule 78    nonEqual -> GreaterOP
Rule 79    nonEqual -> LessOP
Rule 80    nonEqual -> NonEqualOP
Rule 81    mathEXP -> unaryExpression
Rule 82    mathEXP -> mathEXP op mathEXP
Rule 83    op -> Plus
Rule 84    op -> Minus
Rule 85    op -> Times
Rule 86    op -> Divide
Rule 87    op -> ModeOP
Rule 88    unaryExpression -> unaryop unaryExpression
Rule 89    unaryExpression -> factor
Rule 90    unaryop -> Minus
Rule 91    unaryop -> Times
Rule 92    unaryop -> QMark
Rule 93    factor -> inalterable
Rule 94    factor -> alterable
Rule 95    alterable -> numOrLetter
Rule 96    alterable -> alterable Opening_Bracket allExpression Closing_Bracket
Rule 97    alterable -> alterable Dot numOrLetter
Rule 98    inalterable -> Opening_Parentheses allExpression Closing_Parentheses
Rule 99    inalterable -> constant
Rule 100   inalterable -> idLetter Opening_Parentheses args Closing_Parentheses
Rule 101   args -> arguments
Rule 102   args -> <empty>
Rule 103   arguments -> arguments Comma allExpression
Rule 104   arguments -> allExpression
Rule 105   constant -> Const_KW
Rule 106   constant -> True_KW
Rule 107   constant -> False_KW
Rule 108   logicOp -> DoubleAnd
Rule 109   logicOp -> DoubleOr
Rule 110   logicOp -> Tilda
Rule 111   logicOp -> And_KW
Rule 112   logicOp -> Or_KW

Terminals, with rules where they appear

And_KW               : 111
Boolean_KW           : 17
Character_KW         : 18
Closing_Brace        : 43 47
Closing_Bracket      : 15 34 96
Closing_Parentheses  : 6 7 8 9 14 46 47 51 98 100
Colon                : 14
ComeBack_KW          : 52
Comma                : 11 28 103
Comment              : 
Const_KW             : 105
Continue_KW          : 55
Divide               : 86
DivideEqual          : 65
Dot                  : 97
DoubleAnd            : 108
DoubleOr             : 109
EEqual               : 77
Else_KW              : 70
Equal                : 61
False_KW             : 107
GEqual               : 76
GiveBack_KW          : 53 54
GreaterOP            : 78
If_KW                : 46 47
Integer_KW           : 19
LEqual               : 75
LessOP               : 79
Letter               : 
MM                   : 58
Minus                : 84 90
MinusEqual           : 63
ModeOP               : 87
NonEqualOP           : 80
Num                  : 2 15
Opening_Brace        : 43 47
Opening_Bracket      : 15 34 96
Opening_Parentheses  : 6 7 8 9 14 46 47 51 98 100
Or_KW                : 112
Other_KW             : 49
PP                   : 57
Plus                 : 83
PlusEqual            : 62
QMark                : 92
Semicolon            : 10 25 30 31 44 45 50 52 53 54 55
Static_KW            : 30
Then_KW              : 67
Tilda                : 110
Till_KW              : 51
Times                : 85 91
TimesEqual           : 64
True_KW              : 106
bool_KW              : 21
char_KW              : 20
error                : 
idLetter             : 3 8 9 15 16 33 34 100
idNum                : 6 7
int_KW               : 22
reserved             : 
void_KW              : 6 8

Nonterminals, with rules where they appear

allExpression        : 44 53 56 96 98 103 104
alterable            : 56 57 58 60 60 94 96 97
args                 : 100
arguments            : 101 103
compareType          : 71
compoundPhrase       : 38
constant             : 99
continue             : 42
declaration          : 4 5
eachExpression       : 14 46 47 51 59 66 66 67 67 68 70 70
equal                : 73
factor               : 89
ifBody               : 46 47 47
inalterable          : 93
iterationPhrase      : 40
list                 : 1 4
listOfParameters     : 23 25
localDeclarations    : 30 31 43
logicOp              : 66 67 68 70
mathEXP              : 71 71 72 82 82
mathOp               : 56 60
nonEqual             : 74
numOrLetter          : 54 95 97
op                   : 82
paramId              : 28 29
paramList            : 27 28
paramTypeList        : 25 26
parameter            : 6 7 8 9
phrase               : 37
program              : 0
relExpression        : 69
returnPhrase         : 41
selectPhrase         : 39
statement            : 6 7 8 9 35 48 49 49 51
statementList        : 35 43
type                 : 7 9 10 27 30 31
unaryExpression      : 81 88
unaryop              : 88
varForm              : 13 14
varInitialization    : 11 12
variableList         : 10 11 30 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (4) list -> . list declaration
    (5) list -> . declaration
    (6) declaration -> . void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement
    (7) declaration -> . type idNum Opening_Parentheses parameter Closing_Parentheses statement
    (8) declaration -> . void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement
    (9) declaration -> . type idLetter Opening_Parentheses parameter Closing_Parentheses statement
    (10) declaration -> . type variableList Semicolon
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    void_KW         shift and go to state 4
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    program                        shift and go to state 1
    list                           shift and go to state 2
    declaration                    shift and go to state 3
    type                           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> list .
    (4) list -> list . declaration
    (6) declaration -> . void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement
    (7) declaration -> . type idNum Opening_Parentheses parameter Closing_Parentheses statement
    (8) declaration -> . void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement
    (9) declaration -> . type idLetter Opening_Parentheses parameter Closing_Parentheses statement
    (10) declaration -> . type variableList Semicolon
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    $end            reduce using rule 1 (program -> list .)
    void_KW         shift and go to state 4
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    declaration                    shift and go to state 12
    type                           shift and go to state 5

state 3

    (5) list -> declaration .

    void_KW         reduce using rule 5 (list -> declaration .)
    Boolean_KW      reduce using rule 5 (list -> declaration .)
    Character_KW    reduce using rule 5 (list -> declaration .)
    Integer_KW      reduce using rule 5 (list -> declaration .)
    char_KW         reduce using rule 5 (list -> declaration .)
    bool_KW         reduce using rule 5 (list -> declaration .)
    int_KW          reduce using rule 5 (list -> declaration .)
    $end            reduce using rule 5 (list -> declaration .)


state 4

    (6) declaration -> void_KW . idNum Opening_Parentheses parameter Closing_Parentheses statement
    (8) declaration -> void_KW . idLetter Opening_Parentheses parameter Closing_Parentheses statement

    idNum           shift and go to state 13
    idLetter        shift and go to state 14


state 5

    (7) declaration -> type . idNum Opening_Parentheses parameter Closing_Parentheses statement
    (9) declaration -> type . idLetter Opening_Parentheses parameter Closing_Parentheses statement
    (10) declaration -> type . variableList Semicolon
    (11) variableList -> . variableList Comma varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (15) varForm -> . idLetter Opening_Bracket Num Closing_Bracket
    (16) varForm -> . idLetter

    idNum           shift and go to state 15
    idLetter        shift and go to state 16

    variableList                   shift and go to state 17
    varInitialization              shift and go to state 18
    varForm                        shift and go to state 19

state 6

    (17) type -> Boolean_KW .

    idNum           reduce using rule 17 (type -> Boolean_KW .)
    idLetter        reduce using rule 17 (type -> Boolean_KW .)


state 7

    (18) type -> Character_KW .

    idNum           reduce using rule 18 (type -> Character_KW .)
    idLetter        reduce using rule 18 (type -> Character_KW .)


state 8

    (19) type -> Integer_KW .

    idNum           reduce using rule 19 (type -> Integer_KW .)
    idLetter        reduce using rule 19 (type -> Integer_KW .)


state 9

    (20) type -> char_KW .

    idNum           reduce using rule 20 (type -> char_KW .)
    idLetter        reduce using rule 20 (type -> char_KW .)


state 10

    (21) type -> bool_KW .

    idNum           reduce using rule 21 (type -> bool_KW .)
    idLetter        reduce using rule 21 (type -> bool_KW .)


state 11

    (22) type -> int_KW .

    idNum           reduce using rule 22 (type -> int_KW .)
    idLetter        reduce using rule 22 (type -> int_KW .)


state 12

    (4) list -> list declaration .

    void_KW         reduce using rule 4 (list -> list declaration .)
    Boolean_KW      reduce using rule 4 (list -> list declaration .)
    Character_KW    reduce using rule 4 (list -> list declaration .)
    Integer_KW      reduce using rule 4 (list -> list declaration .)
    char_KW         reduce using rule 4 (list -> list declaration .)
    bool_KW         reduce using rule 4 (list -> list declaration .)
    int_KW          reduce using rule 4 (list -> list declaration .)
    $end            reduce using rule 4 (list -> list declaration .)


state 13

    (6) declaration -> void_KW idNum . Opening_Parentheses parameter Closing_Parentheses statement

    Opening_Parentheses shift and go to state 20


state 14

    (8) declaration -> void_KW idLetter . Opening_Parentheses parameter Closing_Parentheses statement

    Opening_Parentheses shift and go to state 21


state 15

    (7) declaration -> type idNum . Opening_Parentheses parameter Closing_Parentheses statement

    Opening_Parentheses shift and go to state 22


state 16

    (9) declaration -> type idLetter . Opening_Parentheses parameter Closing_Parentheses statement
    (15) varForm -> idLetter . Opening_Bracket Num Closing_Bracket
    (16) varForm -> idLetter .

    Opening_Parentheses shift and go to state 23
    Opening_Bracket shift and go to state 24
    Colon           reduce using rule 16 (varForm -> idLetter .)
    Semicolon       reduce using rule 16 (varForm -> idLetter .)
    Comma           reduce using rule 16 (varForm -> idLetter .)


state 17

    (10) declaration -> type variableList . Semicolon
    (11) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 25
    Comma           shift and go to state 26


state 18

    (12) variableList -> varInitialization .

    Semicolon       reduce using rule 12 (variableList -> varInitialization .)
    Comma           reduce using rule 12 (variableList -> varInitialization .)


state 19

    (13) varInitialization -> varForm .
    (14) varInitialization -> varForm . Colon Opening_Parentheses eachExpression Closing_Parentheses

    Semicolon       reduce using rule 13 (varInitialization -> varForm .)
    Comma           reduce using rule 13 (varInitialization -> varForm .)
    Colon           shift and go to state 27


state 20

    (6) declaration -> void_KW idNum Opening_Parentheses . parameter Closing_Parentheses statement
    (23) parameter -> . listOfParameters
    (24) parameter -> .
    (25) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (26) listOfParameters -> . paramTypeList
    (27) paramTypeList -> . type paramList
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    Closing_Parentheses reduce using rule 24 (parameter -> .)
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    parameter                      shift and go to state 28
    listOfParameters               shift and go to state 29
    paramTypeList                  shift and go to state 30
    type                           shift and go to state 31

state 21

    (8) declaration -> void_KW idLetter Opening_Parentheses . parameter Closing_Parentheses statement
    (23) parameter -> . listOfParameters
    (24) parameter -> .
    (25) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (26) listOfParameters -> . paramTypeList
    (27) paramTypeList -> . type paramList
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    Closing_Parentheses reduce using rule 24 (parameter -> .)
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    parameter                      shift and go to state 32
    listOfParameters               shift and go to state 29
    paramTypeList                  shift and go to state 30
    type                           shift and go to state 31

state 22

    (7) declaration -> type idNum Opening_Parentheses . parameter Closing_Parentheses statement
    (23) parameter -> . listOfParameters
    (24) parameter -> .
    (25) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (26) listOfParameters -> . paramTypeList
    (27) paramTypeList -> . type paramList
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    Closing_Parentheses reduce using rule 24 (parameter -> .)
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    type                           shift and go to state 31
    parameter                      shift and go to state 33
    listOfParameters               shift and go to state 29
    paramTypeList                  shift and go to state 30

state 23

    (9) declaration -> type idLetter Opening_Parentheses . parameter Closing_Parentheses statement
    (23) parameter -> . listOfParameters
    (24) parameter -> .
    (25) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (26) listOfParameters -> . paramTypeList
    (27) paramTypeList -> . type paramList
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    Closing_Parentheses reduce using rule 24 (parameter -> .)
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    type                           shift and go to state 31
    parameter                      shift and go to state 34
    listOfParameters               shift and go to state 29
    paramTypeList                  shift and go to state 30

state 24

    (15) varForm -> idLetter Opening_Bracket . Num Closing_Bracket

    Num             shift and go to state 35


state 25

    (10) declaration -> type variableList Semicolon .

    void_KW         reduce using rule 10 (declaration -> type variableList Semicolon .)
    Boolean_KW      reduce using rule 10 (declaration -> type variableList Semicolon .)
    Character_KW    reduce using rule 10 (declaration -> type variableList Semicolon .)
    Integer_KW      reduce using rule 10 (declaration -> type variableList Semicolon .)
    char_KW         reduce using rule 10 (declaration -> type variableList Semicolon .)
    bool_KW         reduce using rule 10 (declaration -> type variableList Semicolon .)
    int_KW          reduce using rule 10 (declaration -> type variableList Semicolon .)
    $end            reduce using rule 10 (declaration -> type variableList Semicolon .)


state 26

    (11) variableList -> variableList Comma . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (15) varForm -> . idLetter Opening_Bracket Num Closing_Bracket
    (16) varForm -> . idLetter

    idLetter        shift and go to state 37

    varInitialization              shift and go to state 36
    varForm                        shift and go to state 19

state 27

    (14) varInitialization -> varForm Colon . Opening_Parentheses eachExpression Closing_Parentheses

    Opening_Parentheses shift and go to state 38


state 28

    (6) declaration -> void_KW idNum Opening_Parentheses parameter . Closing_Parentheses statement

    Closing_Parentheses shift and go to state 39


state 29

    (23) parameter -> listOfParameters .
    (25) listOfParameters -> listOfParameters . Semicolon paramTypeList

    Closing_Parentheses reduce using rule 23 (parameter -> listOfParameters .)
    Semicolon       shift and go to state 40


state 30

    (26) listOfParameters -> paramTypeList .

    Semicolon       reduce using rule 26 (listOfParameters -> paramTypeList .)
    Closing_Parentheses reduce using rule 26 (listOfParameters -> paramTypeList .)


state 31

    (27) paramTypeList -> type . paramList
    (28) paramList -> . paramList Comma paramId
    (29) paramList -> . paramId
    (33) paramId -> . idLetter
    (34) paramId -> . idLetter Opening_Bracket Closing_Bracket

    idLetter        shift and go to state 43

    paramList                      shift and go to state 41
    paramId                        shift and go to state 42

state 32

    (8) declaration -> void_KW idLetter Opening_Parentheses parameter . Closing_Parentheses statement

    Closing_Parentheses shift and go to state 44


state 33

    (7) declaration -> type idNum Opening_Parentheses parameter . Closing_Parentheses statement

    Closing_Parentheses shift and go to state 45


state 34

    (9) declaration -> type idLetter Opening_Parentheses parameter . Closing_Parentheses statement

    Closing_Parentheses shift and go to state 46


state 35

    (15) varForm -> idLetter Opening_Bracket Num . Closing_Bracket

    Closing_Bracket shift and go to state 47


state 36

    (11) variableList -> variableList Comma varInitialization .

    Semicolon       reduce using rule 11 (variableList -> variableList Comma varInitialization .)
    Comma           reduce using rule 11 (variableList -> variableList Comma varInitialization .)


state 37

    (15) varForm -> idLetter . Opening_Bracket Num Closing_Bracket
    (16) varForm -> idLetter .

    Opening_Bracket shift and go to state 24
    Colon           reduce using rule 16 (varForm -> idLetter .)
    Semicolon       reduce using rule 16 (varForm -> idLetter .)
    Comma           reduce using rule 16 (varForm -> idLetter .)


state 38

    (14) varInitialization -> varForm Colon Opening_Parentheses . eachExpression Closing_Parentheses
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    eachExpression                 shift and go to state 49
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 39

    (6) declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statement                      shift and go to state 73
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 40

    (25) listOfParameters -> listOfParameters Semicolon . paramTypeList
    (27) paramTypeList -> . type paramList
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    paramTypeList                  shift and go to state 91
    type                           shift and go to state 31

state 41

    (27) paramTypeList -> type paramList .
    (28) paramList -> paramList . Comma paramId

    Semicolon       reduce using rule 27 (paramTypeList -> type paramList .)
    Closing_Parentheses reduce using rule 27 (paramTypeList -> type paramList .)
    Comma           shift and go to state 92


state 42

    (29) paramList -> paramId .

    Comma           reduce using rule 29 (paramList -> paramId .)
    Semicolon       reduce using rule 29 (paramList -> paramId .)
    Closing_Parentheses reduce using rule 29 (paramList -> paramId .)


state 43

    (33) paramId -> idLetter .
    (34) paramId -> idLetter . Opening_Bracket Closing_Bracket

    Comma           reduce using rule 33 (paramId -> idLetter .)
    Semicolon       reduce using rule 33 (paramId -> idLetter .)
    Closing_Parentheses reduce using rule 33 (paramId -> idLetter .)
    Opening_Bracket shift and go to state 93


state 44

    (8) declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statement                      shift and go to state 94
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 45

    (7) declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statement                      shift and go to state 95
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 46

    (9) declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statement                      shift and go to state 96
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 47

    (15) varForm -> idLetter Opening_Bracket Num Closing_Bracket .

    Colon           reduce using rule 15 (varForm -> idLetter Opening_Bracket Num Closing_Bracket .)
    Semicolon       reduce using rule 15 (varForm -> idLetter Opening_Bracket Num Closing_Bracket .)
    Comma           reduce using rule 15 (varForm -> idLetter Opening_Bracket Num Closing_Bracket .)


state 48

    (98) inalterable -> Opening_Parentheses . allExpression Closing_Parentheses
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    allExpression                  shift and go to state 97
    alterable                      shift and go to state 89
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 49

    (14) varInitialization -> varForm Colon Opening_Parentheses eachExpression . Closing_Parentheses
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

    Closing_Parentheses shift and go to state 98
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

    logicOp                        shift and go to state 99

state 50

    (68) eachExpression -> logicOp . eachExpression
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    logicOp                        shift and go to state 50
    eachExpression                 shift and go to state 100
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 51

    (69) eachExpression -> relExpression .

    Closing_Parentheses reduce using rule 69 (eachExpression -> relExpression .)
    DoubleAnd       reduce using rule 69 (eachExpression -> relExpression .)
    DoubleOr        reduce using rule 69 (eachExpression -> relExpression .)
    Tilda           reduce using rule 69 (eachExpression -> relExpression .)
    And_KW          reduce using rule 69 (eachExpression -> relExpression .)
    Or_KW           reduce using rule 69 (eachExpression -> relExpression .)
    Semicolon       reduce using rule 69 (eachExpression -> relExpression .)
    Closing_Bracket reduce using rule 69 (eachExpression -> relExpression .)
    Comma           reduce using rule 69 (eachExpression -> relExpression .)


state 52

    (108) logicOp -> DoubleAnd .

    DoubleAnd       reduce using rule 108 (logicOp -> DoubleAnd .)
    DoubleOr        reduce using rule 108 (logicOp -> DoubleAnd .)
    Tilda           reduce using rule 108 (logicOp -> DoubleAnd .)
    And_KW          reduce using rule 108 (logicOp -> DoubleAnd .)
    Or_KW           reduce using rule 108 (logicOp -> DoubleAnd .)
    Minus           reduce using rule 108 (logicOp -> DoubleAnd .)
    Times           reduce using rule 108 (logicOp -> DoubleAnd .)
    QMark           reduce using rule 108 (logicOp -> DoubleAnd .)
    Opening_Parentheses reduce using rule 108 (logicOp -> DoubleAnd .)
    idLetter        reduce using rule 108 (logicOp -> DoubleAnd .)
    Const_KW        reduce using rule 108 (logicOp -> DoubleAnd .)
    True_KW         reduce using rule 108 (logicOp -> DoubleAnd .)
    False_KW        reduce using rule 108 (logicOp -> DoubleAnd .)
    Num             reduce using rule 108 (logicOp -> DoubleAnd .)
    Then_KW         reduce using rule 108 (logicOp -> DoubleAnd .)
    Else_KW         reduce using rule 108 (logicOp -> DoubleAnd .)


state 53

    (109) logicOp -> DoubleOr .

    DoubleAnd       reduce using rule 109 (logicOp -> DoubleOr .)
    DoubleOr        reduce using rule 109 (logicOp -> DoubleOr .)
    Tilda           reduce using rule 109 (logicOp -> DoubleOr .)
    And_KW          reduce using rule 109 (logicOp -> DoubleOr .)
    Or_KW           reduce using rule 109 (logicOp -> DoubleOr .)
    Minus           reduce using rule 109 (logicOp -> DoubleOr .)
    Times           reduce using rule 109 (logicOp -> DoubleOr .)
    QMark           reduce using rule 109 (logicOp -> DoubleOr .)
    Opening_Parentheses reduce using rule 109 (logicOp -> DoubleOr .)
    idLetter        reduce using rule 109 (logicOp -> DoubleOr .)
    Const_KW        reduce using rule 109 (logicOp -> DoubleOr .)
    True_KW         reduce using rule 109 (logicOp -> DoubleOr .)
    False_KW        reduce using rule 109 (logicOp -> DoubleOr .)
    Num             reduce using rule 109 (logicOp -> DoubleOr .)
    Then_KW         reduce using rule 109 (logicOp -> DoubleOr .)
    Else_KW         reduce using rule 109 (logicOp -> DoubleOr .)


state 54

    (110) logicOp -> Tilda .

    DoubleAnd       reduce using rule 110 (logicOp -> Tilda .)
    DoubleOr        reduce using rule 110 (logicOp -> Tilda .)
    Tilda           reduce using rule 110 (logicOp -> Tilda .)
    And_KW          reduce using rule 110 (logicOp -> Tilda .)
    Or_KW           reduce using rule 110 (logicOp -> Tilda .)
    Minus           reduce using rule 110 (logicOp -> Tilda .)
    Times           reduce using rule 110 (logicOp -> Tilda .)
    QMark           reduce using rule 110 (logicOp -> Tilda .)
    Opening_Parentheses reduce using rule 110 (logicOp -> Tilda .)
    idLetter        reduce using rule 110 (logicOp -> Tilda .)
    Const_KW        reduce using rule 110 (logicOp -> Tilda .)
    True_KW         reduce using rule 110 (logicOp -> Tilda .)
    False_KW        reduce using rule 110 (logicOp -> Tilda .)
    Num             reduce using rule 110 (logicOp -> Tilda .)
    Then_KW         reduce using rule 110 (logicOp -> Tilda .)
    Else_KW         reduce using rule 110 (logicOp -> Tilda .)


state 55

    (111) logicOp -> And_KW .

    DoubleAnd       reduce using rule 111 (logicOp -> And_KW .)
    DoubleOr        reduce using rule 111 (logicOp -> And_KW .)
    Tilda           reduce using rule 111 (logicOp -> And_KW .)
    And_KW          reduce using rule 111 (logicOp -> And_KW .)
    Or_KW           reduce using rule 111 (logicOp -> And_KW .)
    Minus           reduce using rule 111 (logicOp -> And_KW .)
    Times           reduce using rule 111 (logicOp -> And_KW .)
    QMark           reduce using rule 111 (logicOp -> And_KW .)
    Opening_Parentheses reduce using rule 111 (logicOp -> And_KW .)
    idLetter        reduce using rule 111 (logicOp -> And_KW .)
    Const_KW        reduce using rule 111 (logicOp -> And_KW .)
    True_KW         reduce using rule 111 (logicOp -> And_KW .)
    False_KW        reduce using rule 111 (logicOp -> And_KW .)
    Num             reduce using rule 111 (logicOp -> And_KW .)
    Then_KW         reduce using rule 111 (logicOp -> And_KW .)
    Else_KW         reduce using rule 111 (logicOp -> And_KW .)


state 56

    (112) logicOp -> Or_KW .

    DoubleAnd       reduce using rule 112 (logicOp -> Or_KW .)
    DoubleOr        reduce using rule 112 (logicOp -> Or_KW .)
    Tilda           reduce using rule 112 (logicOp -> Or_KW .)
    And_KW          reduce using rule 112 (logicOp -> Or_KW .)
    Or_KW           reduce using rule 112 (logicOp -> Or_KW .)
    Minus           reduce using rule 112 (logicOp -> Or_KW .)
    Times           reduce using rule 112 (logicOp -> Or_KW .)
    QMark           reduce using rule 112 (logicOp -> Or_KW .)
    Opening_Parentheses reduce using rule 112 (logicOp -> Or_KW .)
    idLetter        reduce using rule 112 (logicOp -> Or_KW .)
    Const_KW        reduce using rule 112 (logicOp -> Or_KW .)
    True_KW         reduce using rule 112 (logicOp -> Or_KW .)
    False_KW        reduce using rule 112 (logicOp -> Or_KW .)
    Num             reduce using rule 112 (logicOp -> Or_KW .)
    Then_KW         reduce using rule 112 (logicOp -> Or_KW .)
    Else_KW         reduce using rule 112 (logicOp -> Or_KW .)


state 57

    (71) relExpression -> mathEXP . compareType mathEXP
    (72) relExpression -> mathEXP .
    (82) mathEXP -> mathEXP . op mathEXP
    (73) compareType -> . equal
    (74) compareType -> . nonEqual
    (83) op -> . Plus
    (84) op -> . Minus
    (85) op -> . Times
    (86) op -> . Divide
    (87) op -> . ModeOP
    (75) equal -> . LEqual
    (76) equal -> . GEqual
    (77) equal -> . EEqual
    (78) nonEqual -> . GreaterOP
    (79) nonEqual -> . LessOP
    (80) nonEqual -> . NonEqualOP

    Closing_Parentheses reduce using rule 72 (relExpression -> mathEXP .)
    DoubleAnd       reduce using rule 72 (relExpression -> mathEXP .)
    DoubleOr        reduce using rule 72 (relExpression -> mathEXP .)
    Tilda           reduce using rule 72 (relExpression -> mathEXP .)
    And_KW          reduce using rule 72 (relExpression -> mathEXP .)
    Or_KW           reduce using rule 72 (relExpression -> mathEXP .)
    Semicolon       reduce using rule 72 (relExpression -> mathEXP .)
    Closing_Bracket reduce using rule 72 (relExpression -> mathEXP .)
    Comma           reduce using rule 72 (relExpression -> mathEXP .)
    Plus            shift and go to state 105
    Minus           shift and go to state 106
    Times           shift and go to state 107
    Divide          shift and go to state 108
    ModeOP          shift and go to state 109
    LEqual          shift and go to state 110
    GEqual          shift and go to state 111
    EEqual          shift and go to state 112
    GreaterOP       shift and go to state 113
    LessOP          shift and go to state 114
    NonEqualOP      shift and go to state 115

    compareType                    shift and go to state 101
    op                             shift and go to state 102
    equal                          shift and go to state 103
    nonEqual                       shift and go to state 104

state 58

    (81) mathEXP -> unaryExpression .

    Plus            reduce using rule 81 (mathEXP -> unaryExpression .)
    Minus           reduce using rule 81 (mathEXP -> unaryExpression .)
    Times           reduce using rule 81 (mathEXP -> unaryExpression .)
    Divide          reduce using rule 81 (mathEXP -> unaryExpression .)
    ModeOP          reduce using rule 81 (mathEXP -> unaryExpression .)
    LEqual          reduce using rule 81 (mathEXP -> unaryExpression .)
    GEqual          reduce using rule 81 (mathEXP -> unaryExpression .)
    EEqual          reduce using rule 81 (mathEXP -> unaryExpression .)
    GreaterOP       reduce using rule 81 (mathEXP -> unaryExpression .)
    LessOP          reduce using rule 81 (mathEXP -> unaryExpression .)
    NonEqualOP      reduce using rule 81 (mathEXP -> unaryExpression .)
    Closing_Parentheses reduce using rule 81 (mathEXP -> unaryExpression .)
    DoubleAnd       reduce using rule 81 (mathEXP -> unaryExpression .)
    DoubleOr        reduce using rule 81 (mathEXP -> unaryExpression .)
    Tilda           reduce using rule 81 (mathEXP -> unaryExpression .)
    And_KW          reduce using rule 81 (mathEXP -> unaryExpression .)
    Or_KW           reduce using rule 81 (mathEXP -> unaryExpression .)
    Semicolon       reduce using rule 81 (mathEXP -> unaryExpression .)
    Closing_Bracket reduce using rule 81 (mathEXP -> unaryExpression .)
    Comma           reduce using rule 81 (mathEXP -> unaryExpression .)


state 59

    (88) unaryExpression -> unaryop . unaryExpression
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    unaryop                        shift and go to state 59
    unaryExpression                shift and go to state 116
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 60

    (89) unaryExpression -> factor .

    Plus            reduce using rule 89 (unaryExpression -> factor .)
    Minus           reduce using rule 89 (unaryExpression -> factor .)
    Times           reduce using rule 89 (unaryExpression -> factor .)
    Divide          reduce using rule 89 (unaryExpression -> factor .)
    ModeOP          reduce using rule 89 (unaryExpression -> factor .)
    LEqual          reduce using rule 89 (unaryExpression -> factor .)
    GEqual          reduce using rule 89 (unaryExpression -> factor .)
    EEqual          reduce using rule 89 (unaryExpression -> factor .)
    GreaterOP       reduce using rule 89 (unaryExpression -> factor .)
    LessOP          reduce using rule 89 (unaryExpression -> factor .)
    NonEqualOP      reduce using rule 89 (unaryExpression -> factor .)
    Closing_Parentheses reduce using rule 89 (unaryExpression -> factor .)
    DoubleAnd       reduce using rule 89 (unaryExpression -> factor .)
    DoubleOr        reduce using rule 89 (unaryExpression -> factor .)
    Tilda           reduce using rule 89 (unaryExpression -> factor .)
    And_KW          reduce using rule 89 (unaryExpression -> factor .)
    Or_KW           reduce using rule 89 (unaryExpression -> factor .)
    Semicolon       reduce using rule 89 (unaryExpression -> factor .)
    Closing_Bracket reduce using rule 89 (unaryExpression -> factor .)
    Comma           reduce using rule 89 (unaryExpression -> factor .)


state 61

    (90) unaryop -> Minus .

    Minus           reduce using rule 90 (unaryop -> Minus .)
    Times           reduce using rule 90 (unaryop -> Minus .)
    QMark           reduce using rule 90 (unaryop -> Minus .)
    Opening_Parentheses reduce using rule 90 (unaryop -> Minus .)
    idLetter        reduce using rule 90 (unaryop -> Minus .)
    Const_KW        reduce using rule 90 (unaryop -> Minus .)
    True_KW         reduce using rule 90 (unaryop -> Minus .)
    False_KW        reduce using rule 90 (unaryop -> Minus .)
    Num             reduce using rule 90 (unaryop -> Minus .)


state 62

    (91) unaryop -> Times .

    Minus           reduce using rule 91 (unaryop -> Times .)
    Times           reduce using rule 91 (unaryop -> Times .)
    QMark           reduce using rule 91 (unaryop -> Times .)
    Opening_Parentheses reduce using rule 91 (unaryop -> Times .)
    idLetter        reduce using rule 91 (unaryop -> Times .)
    Const_KW        reduce using rule 91 (unaryop -> Times .)
    True_KW         reduce using rule 91 (unaryop -> Times .)
    False_KW        reduce using rule 91 (unaryop -> Times .)
    Num             reduce using rule 91 (unaryop -> Times .)


state 63

    (92) unaryop -> QMark .

    Minus           reduce using rule 92 (unaryop -> QMark .)
    Times           reduce using rule 92 (unaryop -> QMark .)
    QMark           reduce using rule 92 (unaryop -> QMark .)
    Opening_Parentheses reduce using rule 92 (unaryop -> QMark .)
    idLetter        reduce using rule 92 (unaryop -> QMark .)
    Const_KW        reduce using rule 92 (unaryop -> QMark .)
    True_KW         reduce using rule 92 (unaryop -> QMark .)
    False_KW        reduce using rule 92 (unaryop -> QMark .)
    Num             reduce using rule 92 (unaryop -> QMark .)


state 64

    (93) factor -> inalterable .

    Plus            reduce using rule 93 (factor -> inalterable .)
    Minus           reduce using rule 93 (factor -> inalterable .)
    Times           reduce using rule 93 (factor -> inalterable .)
    Divide          reduce using rule 93 (factor -> inalterable .)
    ModeOP          reduce using rule 93 (factor -> inalterable .)
    LEqual          reduce using rule 93 (factor -> inalterable .)
    GEqual          reduce using rule 93 (factor -> inalterable .)
    EEqual          reduce using rule 93 (factor -> inalterable .)
    GreaterOP       reduce using rule 93 (factor -> inalterable .)
    LessOP          reduce using rule 93 (factor -> inalterable .)
    NonEqualOP      reduce using rule 93 (factor -> inalterable .)
    Closing_Parentheses reduce using rule 93 (factor -> inalterable .)
    DoubleAnd       reduce using rule 93 (factor -> inalterable .)
    DoubleOr        reduce using rule 93 (factor -> inalterable .)
    Tilda           reduce using rule 93 (factor -> inalterable .)
    And_KW          reduce using rule 93 (factor -> inalterable .)
    Or_KW           reduce using rule 93 (factor -> inalterable .)
    Semicolon       reduce using rule 93 (factor -> inalterable .)
    Closing_Bracket reduce using rule 93 (factor -> inalterable .)
    Comma           reduce using rule 93 (factor -> inalterable .)


state 65

    (94) factor -> alterable .
    (96) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> alterable . Dot numOrLetter

    Plus            reduce using rule 94 (factor -> alterable .)
    Minus           reduce using rule 94 (factor -> alterable .)
    Times           reduce using rule 94 (factor -> alterable .)
    Divide          reduce using rule 94 (factor -> alterable .)
    ModeOP          reduce using rule 94 (factor -> alterable .)
    LEqual          reduce using rule 94 (factor -> alterable .)
    GEqual          reduce using rule 94 (factor -> alterable .)
    EEqual          reduce using rule 94 (factor -> alterable .)
    GreaterOP       reduce using rule 94 (factor -> alterable .)
    LessOP          reduce using rule 94 (factor -> alterable .)
    NonEqualOP      reduce using rule 94 (factor -> alterable .)
    Closing_Parentheses reduce using rule 94 (factor -> alterable .)
    DoubleAnd       reduce using rule 94 (factor -> alterable .)
    DoubleOr        reduce using rule 94 (factor -> alterable .)
    Tilda           reduce using rule 94 (factor -> alterable .)
    And_KW          reduce using rule 94 (factor -> alterable .)
    Or_KW           reduce using rule 94 (factor -> alterable .)
    Semicolon       reduce using rule 94 (factor -> alterable .)
    Closing_Bracket reduce using rule 94 (factor -> alterable .)
    Comma           reduce using rule 94 (factor -> alterable .)
    Opening_Bracket shift and go to state 117
    Dot             shift and go to state 118


state 66

    (99) inalterable -> constant .

    Plus            reduce using rule 99 (inalterable -> constant .)
    Minus           reduce using rule 99 (inalterable -> constant .)
    Times           reduce using rule 99 (inalterable -> constant .)
    Divide          reduce using rule 99 (inalterable -> constant .)
    ModeOP          reduce using rule 99 (inalterable -> constant .)
    LEqual          reduce using rule 99 (inalterable -> constant .)
    GEqual          reduce using rule 99 (inalterable -> constant .)
    EEqual          reduce using rule 99 (inalterable -> constant .)
    GreaterOP       reduce using rule 99 (inalterable -> constant .)
    LessOP          reduce using rule 99 (inalterable -> constant .)
    NonEqualOP      reduce using rule 99 (inalterable -> constant .)
    Closing_Parentheses reduce using rule 99 (inalterable -> constant .)
    DoubleAnd       reduce using rule 99 (inalterable -> constant .)
    DoubleOr        reduce using rule 99 (inalterable -> constant .)
    Tilda           reduce using rule 99 (inalterable -> constant .)
    And_KW          reduce using rule 99 (inalterable -> constant .)
    Or_KW           reduce using rule 99 (inalterable -> constant .)
    Semicolon       reduce using rule 99 (inalterable -> constant .)
    Closing_Bracket reduce using rule 99 (inalterable -> constant .)
    Comma           reduce using rule 99 (inalterable -> constant .)


state 67

    (100) inalterable -> idLetter . Opening_Parentheses args Closing_Parentheses
    (3) numOrLetter -> idLetter .

    Opening_Parentheses shift and go to state 119
    Opening_Bracket reduce using rule 3 (numOrLetter -> idLetter .)
    Dot             reduce using rule 3 (numOrLetter -> idLetter .)
    Plus            reduce using rule 3 (numOrLetter -> idLetter .)
    Minus           reduce using rule 3 (numOrLetter -> idLetter .)
    Times           reduce using rule 3 (numOrLetter -> idLetter .)
    Divide          reduce using rule 3 (numOrLetter -> idLetter .)
    ModeOP          reduce using rule 3 (numOrLetter -> idLetter .)
    LEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    GEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    EEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    GreaterOP       reduce using rule 3 (numOrLetter -> idLetter .)
    LessOP          reduce using rule 3 (numOrLetter -> idLetter .)
    NonEqualOP      reduce using rule 3 (numOrLetter -> idLetter .)
    Closing_Parentheses reduce using rule 3 (numOrLetter -> idLetter .)
    DoubleAnd       reduce using rule 3 (numOrLetter -> idLetter .)
    DoubleOr        reduce using rule 3 (numOrLetter -> idLetter .)
    Tilda           reduce using rule 3 (numOrLetter -> idLetter .)
    And_KW          reduce using rule 3 (numOrLetter -> idLetter .)
    Or_KW           reduce using rule 3 (numOrLetter -> idLetter .)
    Semicolon       reduce using rule 3 (numOrLetter -> idLetter .)
    Closing_Bracket reduce using rule 3 (numOrLetter -> idLetter .)
    Comma           reduce using rule 3 (numOrLetter -> idLetter .)


state 68

    (95) alterable -> numOrLetter .

    Opening_Bracket reduce using rule 95 (alterable -> numOrLetter .)
    Dot             reduce using rule 95 (alterable -> numOrLetter .)
    Plus            reduce using rule 95 (alterable -> numOrLetter .)
    Minus           reduce using rule 95 (alterable -> numOrLetter .)
    Times           reduce using rule 95 (alterable -> numOrLetter .)
    Divide          reduce using rule 95 (alterable -> numOrLetter .)
    ModeOP          reduce using rule 95 (alterable -> numOrLetter .)
    LEqual          reduce using rule 95 (alterable -> numOrLetter .)
    GEqual          reduce using rule 95 (alterable -> numOrLetter .)
    EEqual          reduce using rule 95 (alterable -> numOrLetter .)
    GreaterOP       reduce using rule 95 (alterable -> numOrLetter .)
    LessOP          reduce using rule 95 (alterable -> numOrLetter .)
    NonEqualOP      reduce using rule 95 (alterable -> numOrLetter .)
    Closing_Parentheses reduce using rule 95 (alterable -> numOrLetter .)
    DoubleAnd       reduce using rule 95 (alterable -> numOrLetter .)
    DoubleOr        reduce using rule 95 (alterable -> numOrLetter .)
    Tilda           reduce using rule 95 (alterable -> numOrLetter .)
    And_KW          reduce using rule 95 (alterable -> numOrLetter .)
    Or_KW           reduce using rule 95 (alterable -> numOrLetter .)
    PP              reduce using rule 95 (alterable -> numOrLetter .)
    MM              reduce using rule 95 (alterable -> numOrLetter .)
    Equal           reduce using rule 95 (alterable -> numOrLetter .)
    PlusEqual       reduce using rule 95 (alterable -> numOrLetter .)
    MinusEqual      reduce using rule 95 (alterable -> numOrLetter .)
    TimesEqual      reduce using rule 95 (alterable -> numOrLetter .)
    DivideEqual     reduce using rule 95 (alterable -> numOrLetter .)
    Semicolon       reduce using rule 95 (alterable -> numOrLetter .)
    Closing_Bracket reduce using rule 95 (alterable -> numOrLetter .)
    Comma           reduce using rule 95 (alterable -> numOrLetter .)


state 69

    (105) constant -> Const_KW .

    Plus            reduce using rule 105 (constant -> Const_KW .)
    Minus           reduce using rule 105 (constant -> Const_KW .)
    Times           reduce using rule 105 (constant -> Const_KW .)
    Divide          reduce using rule 105 (constant -> Const_KW .)
    ModeOP          reduce using rule 105 (constant -> Const_KW .)
    LEqual          reduce using rule 105 (constant -> Const_KW .)
    GEqual          reduce using rule 105 (constant -> Const_KW .)
    EEqual          reduce using rule 105 (constant -> Const_KW .)
    GreaterOP       reduce using rule 105 (constant -> Const_KW .)
    LessOP          reduce using rule 105 (constant -> Const_KW .)
    NonEqualOP      reduce using rule 105 (constant -> Const_KW .)
    Closing_Parentheses reduce using rule 105 (constant -> Const_KW .)
    DoubleAnd       reduce using rule 105 (constant -> Const_KW .)
    DoubleOr        reduce using rule 105 (constant -> Const_KW .)
    Tilda           reduce using rule 105 (constant -> Const_KW .)
    And_KW          reduce using rule 105 (constant -> Const_KW .)
    Or_KW           reduce using rule 105 (constant -> Const_KW .)
    Semicolon       reduce using rule 105 (constant -> Const_KW .)
    Closing_Bracket reduce using rule 105 (constant -> Const_KW .)
    Comma           reduce using rule 105 (constant -> Const_KW .)


state 70

    (106) constant -> True_KW .

    Plus            reduce using rule 106 (constant -> True_KW .)
    Minus           reduce using rule 106 (constant -> True_KW .)
    Times           reduce using rule 106 (constant -> True_KW .)
    Divide          reduce using rule 106 (constant -> True_KW .)
    ModeOP          reduce using rule 106 (constant -> True_KW .)
    LEqual          reduce using rule 106 (constant -> True_KW .)
    GEqual          reduce using rule 106 (constant -> True_KW .)
    EEqual          reduce using rule 106 (constant -> True_KW .)
    GreaterOP       reduce using rule 106 (constant -> True_KW .)
    LessOP          reduce using rule 106 (constant -> True_KW .)
    NonEqualOP      reduce using rule 106 (constant -> True_KW .)
    Closing_Parentheses reduce using rule 106 (constant -> True_KW .)
    DoubleAnd       reduce using rule 106 (constant -> True_KW .)
    DoubleOr        reduce using rule 106 (constant -> True_KW .)
    Tilda           reduce using rule 106 (constant -> True_KW .)
    And_KW          reduce using rule 106 (constant -> True_KW .)
    Or_KW           reduce using rule 106 (constant -> True_KW .)
    Semicolon       reduce using rule 106 (constant -> True_KW .)
    Closing_Bracket reduce using rule 106 (constant -> True_KW .)
    Comma           reduce using rule 106 (constant -> True_KW .)


state 71

    (107) constant -> False_KW .

    Plus            reduce using rule 107 (constant -> False_KW .)
    Minus           reduce using rule 107 (constant -> False_KW .)
    Times           reduce using rule 107 (constant -> False_KW .)
    Divide          reduce using rule 107 (constant -> False_KW .)
    ModeOP          reduce using rule 107 (constant -> False_KW .)
    LEqual          reduce using rule 107 (constant -> False_KW .)
    GEqual          reduce using rule 107 (constant -> False_KW .)
    EEqual          reduce using rule 107 (constant -> False_KW .)
    GreaterOP       reduce using rule 107 (constant -> False_KW .)
    LessOP          reduce using rule 107 (constant -> False_KW .)
    NonEqualOP      reduce using rule 107 (constant -> False_KW .)
    Closing_Parentheses reduce using rule 107 (constant -> False_KW .)
    DoubleAnd       reduce using rule 107 (constant -> False_KW .)
    DoubleOr        reduce using rule 107 (constant -> False_KW .)
    Tilda           reduce using rule 107 (constant -> False_KW .)
    And_KW          reduce using rule 107 (constant -> False_KW .)
    Or_KW           reduce using rule 107 (constant -> False_KW .)
    Semicolon       reduce using rule 107 (constant -> False_KW .)
    Closing_Bracket reduce using rule 107 (constant -> False_KW .)
    Comma           reduce using rule 107 (constant -> False_KW .)


state 72

    (2) numOrLetter -> Num .

    Opening_Bracket reduce using rule 2 (numOrLetter -> Num .)
    Dot             reduce using rule 2 (numOrLetter -> Num .)
    Plus            reduce using rule 2 (numOrLetter -> Num .)
    Minus           reduce using rule 2 (numOrLetter -> Num .)
    Times           reduce using rule 2 (numOrLetter -> Num .)
    Divide          reduce using rule 2 (numOrLetter -> Num .)
    ModeOP          reduce using rule 2 (numOrLetter -> Num .)
    LEqual          reduce using rule 2 (numOrLetter -> Num .)
    GEqual          reduce using rule 2 (numOrLetter -> Num .)
    EEqual          reduce using rule 2 (numOrLetter -> Num .)
    GreaterOP       reduce using rule 2 (numOrLetter -> Num .)
    LessOP          reduce using rule 2 (numOrLetter -> Num .)
    NonEqualOP      reduce using rule 2 (numOrLetter -> Num .)
    Closing_Parentheses reduce using rule 2 (numOrLetter -> Num .)
    DoubleAnd       reduce using rule 2 (numOrLetter -> Num .)
    DoubleOr        reduce using rule 2 (numOrLetter -> Num .)
    Tilda           reduce using rule 2 (numOrLetter -> Num .)
    And_KW          reduce using rule 2 (numOrLetter -> Num .)
    Or_KW           reduce using rule 2 (numOrLetter -> Num .)
    PP              reduce using rule 2 (numOrLetter -> Num .)
    MM              reduce using rule 2 (numOrLetter -> Num .)
    Equal           reduce using rule 2 (numOrLetter -> Num .)
    PlusEqual       reduce using rule 2 (numOrLetter -> Num .)
    MinusEqual      reduce using rule 2 (numOrLetter -> Num .)
    TimesEqual      reduce using rule 2 (numOrLetter -> Num .)
    DivideEqual     reduce using rule 2 (numOrLetter -> Num .)
    Semicolon       reduce using rule 2 (numOrLetter -> Num .)
    Closing_Bracket reduce using rule 2 (numOrLetter -> Num .)
    Comma           reduce using rule 2 (numOrLetter -> Num .)


state 73

    (6) declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .

    void_KW         reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    Character_KW    reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    Integer_KW      reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    char_KW         reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    bool_KW         reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    int_KW          reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    $end            reduce using rule 6 (declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement .)


state 74

    (37) statement -> phrase .

    void_KW         reduce using rule 37 (statement -> phrase .)
    Boolean_KW      reduce using rule 37 (statement -> phrase .)
    Character_KW    reduce using rule 37 (statement -> phrase .)
    Integer_KW      reduce using rule 37 (statement -> phrase .)
    char_KW         reduce using rule 37 (statement -> phrase .)
    bool_KW         reduce using rule 37 (statement -> phrase .)
    int_KW          reduce using rule 37 (statement -> phrase .)
    $end            reduce using rule 37 (statement -> phrase .)
    Semicolon       reduce using rule 37 (statement -> phrase .)
    Opening_Brace   reduce using rule 37 (statement -> phrase .)
    If_KW           reduce using rule 37 (statement -> phrase .)
    Till_KW         reduce using rule 37 (statement -> phrase .)
    ComeBack_KW     reduce using rule 37 (statement -> phrase .)
    GiveBack_KW     reduce using rule 37 (statement -> phrase .)
    Continue_KW     reduce using rule 37 (statement -> phrase .)
    Num             reduce using rule 37 (statement -> phrase .)
    idLetter        reduce using rule 37 (statement -> phrase .)
    DoubleAnd       reduce using rule 37 (statement -> phrase .)
    DoubleOr        reduce using rule 37 (statement -> phrase .)
    Tilda           reduce using rule 37 (statement -> phrase .)
    And_KW          reduce using rule 37 (statement -> phrase .)
    Or_KW           reduce using rule 37 (statement -> phrase .)
    Minus           reduce using rule 37 (statement -> phrase .)
    Times           reduce using rule 37 (statement -> phrase .)
    QMark           reduce using rule 37 (statement -> phrase .)
    Opening_Parentheses reduce using rule 37 (statement -> phrase .)
    Const_KW        reduce using rule 37 (statement -> phrase .)
    True_KW         reduce using rule 37 (statement -> phrase .)
    False_KW        reduce using rule 37 (statement -> phrase .)
    Closing_Brace   reduce using rule 37 (statement -> phrase .)
    Other_KW        reduce using rule 37 (statement -> phrase .)


state 75

    (38) statement -> compoundPhrase .

    void_KW         reduce using rule 38 (statement -> compoundPhrase .)
    Boolean_KW      reduce using rule 38 (statement -> compoundPhrase .)
    Character_KW    reduce using rule 38 (statement -> compoundPhrase .)
    Integer_KW      reduce using rule 38 (statement -> compoundPhrase .)
    char_KW         reduce using rule 38 (statement -> compoundPhrase .)
    bool_KW         reduce using rule 38 (statement -> compoundPhrase .)
    int_KW          reduce using rule 38 (statement -> compoundPhrase .)
    $end            reduce using rule 38 (statement -> compoundPhrase .)
    Semicolon       reduce using rule 38 (statement -> compoundPhrase .)
    Opening_Brace   reduce using rule 38 (statement -> compoundPhrase .)
    If_KW           reduce using rule 38 (statement -> compoundPhrase .)
    Till_KW         reduce using rule 38 (statement -> compoundPhrase .)
    ComeBack_KW     reduce using rule 38 (statement -> compoundPhrase .)
    GiveBack_KW     reduce using rule 38 (statement -> compoundPhrase .)
    Continue_KW     reduce using rule 38 (statement -> compoundPhrase .)
    Num             reduce using rule 38 (statement -> compoundPhrase .)
    idLetter        reduce using rule 38 (statement -> compoundPhrase .)
    DoubleAnd       reduce using rule 38 (statement -> compoundPhrase .)
    DoubleOr        reduce using rule 38 (statement -> compoundPhrase .)
    Tilda           reduce using rule 38 (statement -> compoundPhrase .)
    And_KW          reduce using rule 38 (statement -> compoundPhrase .)
    Or_KW           reduce using rule 38 (statement -> compoundPhrase .)
    Minus           reduce using rule 38 (statement -> compoundPhrase .)
    Times           reduce using rule 38 (statement -> compoundPhrase .)
    QMark           reduce using rule 38 (statement -> compoundPhrase .)
    Opening_Parentheses reduce using rule 38 (statement -> compoundPhrase .)
    Const_KW        reduce using rule 38 (statement -> compoundPhrase .)
    True_KW         reduce using rule 38 (statement -> compoundPhrase .)
    False_KW        reduce using rule 38 (statement -> compoundPhrase .)
    Closing_Brace   reduce using rule 38 (statement -> compoundPhrase .)
    Other_KW        reduce using rule 38 (statement -> compoundPhrase .)


state 76

    (39) statement -> selectPhrase .

    void_KW         reduce using rule 39 (statement -> selectPhrase .)
    Boolean_KW      reduce using rule 39 (statement -> selectPhrase .)
    Character_KW    reduce using rule 39 (statement -> selectPhrase .)
    Integer_KW      reduce using rule 39 (statement -> selectPhrase .)
    char_KW         reduce using rule 39 (statement -> selectPhrase .)
    bool_KW         reduce using rule 39 (statement -> selectPhrase .)
    int_KW          reduce using rule 39 (statement -> selectPhrase .)
    $end            reduce using rule 39 (statement -> selectPhrase .)
    Semicolon       reduce using rule 39 (statement -> selectPhrase .)
    Opening_Brace   reduce using rule 39 (statement -> selectPhrase .)
    If_KW           reduce using rule 39 (statement -> selectPhrase .)
    Till_KW         reduce using rule 39 (statement -> selectPhrase .)
    ComeBack_KW     reduce using rule 39 (statement -> selectPhrase .)
    GiveBack_KW     reduce using rule 39 (statement -> selectPhrase .)
    Continue_KW     reduce using rule 39 (statement -> selectPhrase .)
    Num             reduce using rule 39 (statement -> selectPhrase .)
    idLetter        reduce using rule 39 (statement -> selectPhrase .)
    DoubleAnd       reduce using rule 39 (statement -> selectPhrase .)
    DoubleOr        reduce using rule 39 (statement -> selectPhrase .)
    Tilda           reduce using rule 39 (statement -> selectPhrase .)
    And_KW          reduce using rule 39 (statement -> selectPhrase .)
    Or_KW           reduce using rule 39 (statement -> selectPhrase .)
    Minus           reduce using rule 39 (statement -> selectPhrase .)
    Times           reduce using rule 39 (statement -> selectPhrase .)
    QMark           reduce using rule 39 (statement -> selectPhrase .)
    Opening_Parentheses reduce using rule 39 (statement -> selectPhrase .)
    Const_KW        reduce using rule 39 (statement -> selectPhrase .)
    True_KW         reduce using rule 39 (statement -> selectPhrase .)
    False_KW        reduce using rule 39 (statement -> selectPhrase .)
    Closing_Brace   reduce using rule 39 (statement -> selectPhrase .)
    Other_KW        reduce using rule 39 (statement -> selectPhrase .)


state 77

    (40) statement -> iterationPhrase .

    void_KW         reduce using rule 40 (statement -> iterationPhrase .)
    Boolean_KW      reduce using rule 40 (statement -> iterationPhrase .)
    Character_KW    reduce using rule 40 (statement -> iterationPhrase .)
    Integer_KW      reduce using rule 40 (statement -> iterationPhrase .)
    char_KW         reduce using rule 40 (statement -> iterationPhrase .)
    bool_KW         reduce using rule 40 (statement -> iterationPhrase .)
    int_KW          reduce using rule 40 (statement -> iterationPhrase .)
    $end            reduce using rule 40 (statement -> iterationPhrase .)
    Semicolon       reduce using rule 40 (statement -> iterationPhrase .)
    Opening_Brace   reduce using rule 40 (statement -> iterationPhrase .)
    If_KW           reduce using rule 40 (statement -> iterationPhrase .)
    Till_KW         reduce using rule 40 (statement -> iterationPhrase .)
    ComeBack_KW     reduce using rule 40 (statement -> iterationPhrase .)
    GiveBack_KW     reduce using rule 40 (statement -> iterationPhrase .)
    Continue_KW     reduce using rule 40 (statement -> iterationPhrase .)
    Num             reduce using rule 40 (statement -> iterationPhrase .)
    idLetter        reduce using rule 40 (statement -> iterationPhrase .)
    DoubleAnd       reduce using rule 40 (statement -> iterationPhrase .)
    DoubleOr        reduce using rule 40 (statement -> iterationPhrase .)
    Tilda           reduce using rule 40 (statement -> iterationPhrase .)
    And_KW          reduce using rule 40 (statement -> iterationPhrase .)
    Or_KW           reduce using rule 40 (statement -> iterationPhrase .)
    Minus           reduce using rule 40 (statement -> iterationPhrase .)
    Times           reduce using rule 40 (statement -> iterationPhrase .)
    QMark           reduce using rule 40 (statement -> iterationPhrase .)
    Opening_Parentheses reduce using rule 40 (statement -> iterationPhrase .)
    Const_KW        reduce using rule 40 (statement -> iterationPhrase .)
    True_KW         reduce using rule 40 (statement -> iterationPhrase .)
    False_KW        reduce using rule 40 (statement -> iterationPhrase .)
    Closing_Brace   reduce using rule 40 (statement -> iterationPhrase .)
    Other_KW        reduce using rule 40 (statement -> iterationPhrase .)


state 78

    (41) statement -> returnPhrase .

    void_KW         reduce using rule 41 (statement -> returnPhrase .)
    Boolean_KW      reduce using rule 41 (statement -> returnPhrase .)
    Character_KW    reduce using rule 41 (statement -> returnPhrase .)
    Integer_KW      reduce using rule 41 (statement -> returnPhrase .)
    char_KW         reduce using rule 41 (statement -> returnPhrase .)
    bool_KW         reduce using rule 41 (statement -> returnPhrase .)
    int_KW          reduce using rule 41 (statement -> returnPhrase .)
    $end            reduce using rule 41 (statement -> returnPhrase .)
    Semicolon       reduce using rule 41 (statement -> returnPhrase .)
    Opening_Brace   reduce using rule 41 (statement -> returnPhrase .)
    If_KW           reduce using rule 41 (statement -> returnPhrase .)
    Till_KW         reduce using rule 41 (statement -> returnPhrase .)
    ComeBack_KW     reduce using rule 41 (statement -> returnPhrase .)
    GiveBack_KW     reduce using rule 41 (statement -> returnPhrase .)
    Continue_KW     reduce using rule 41 (statement -> returnPhrase .)
    Num             reduce using rule 41 (statement -> returnPhrase .)
    idLetter        reduce using rule 41 (statement -> returnPhrase .)
    DoubleAnd       reduce using rule 41 (statement -> returnPhrase .)
    DoubleOr        reduce using rule 41 (statement -> returnPhrase .)
    Tilda           reduce using rule 41 (statement -> returnPhrase .)
    And_KW          reduce using rule 41 (statement -> returnPhrase .)
    Or_KW           reduce using rule 41 (statement -> returnPhrase .)
    Minus           reduce using rule 41 (statement -> returnPhrase .)
    Times           reduce using rule 41 (statement -> returnPhrase .)
    QMark           reduce using rule 41 (statement -> returnPhrase .)
    Opening_Parentheses reduce using rule 41 (statement -> returnPhrase .)
    Const_KW        reduce using rule 41 (statement -> returnPhrase .)
    True_KW         reduce using rule 41 (statement -> returnPhrase .)
    False_KW        reduce using rule 41 (statement -> returnPhrase .)
    Closing_Brace   reduce using rule 41 (statement -> returnPhrase .)
    Other_KW        reduce using rule 41 (statement -> returnPhrase .)


state 79

    (42) statement -> continue .

    void_KW         reduce using rule 42 (statement -> continue .)
    Boolean_KW      reduce using rule 42 (statement -> continue .)
    Character_KW    reduce using rule 42 (statement -> continue .)
    Integer_KW      reduce using rule 42 (statement -> continue .)
    char_KW         reduce using rule 42 (statement -> continue .)
    bool_KW         reduce using rule 42 (statement -> continue .)
    int_KW          reduce using rule 42 (statement -> continue .)
    $end            reduce using rule 42 (statement -> continue .)
    Semicolon       reduce using rule 42 (statement -> continue .)
    Opening_Brace   reduce using rule 42 (statement -> continue .)
    If_KW           reduce using rule 42 (statement -> continue .)
    Till_KW         reduce using rule 42 (statement -> continue .)
    ComeBack_KW     reduce using rule 42 (statement -> continue .)
    GiveBack_KW     reduce using rule 42 (statement -> continue .)
    Continue_KW     reduce using rule 42 (statement -> continue .)
    Num             reduce using rule 42 (statement -> continue .)
    idLetter        reduce using rule 42 (statement -> continue .)
    DoubleAnd       reduce using rule 42 (statement -> continue .)
    DoubleOr        reduce using rule 42 (statement -> continue .)
    Tilda           reduce using rule 42 (statement -> continue .)
    And_KW          reduce using rule 42 (statement -> continue .)
    Or_KW           reduce using rule 42 (statement -> continue .)
    Minus           reduce using rule 42 (statement -> continue .)
    Times           reduce using rule 42 (statement -> continue .)
    QMark           reduce using rule 42 (statement -> continue .)
    Opening_Parentheses reduce using rule 42 (statement -> continue .)
    Const_KW        reduce using rule 42 (statement -> continue .)
    True_KW         reduce using rule 42 (statement -> continue .)
    False_KW        reduce using rule 42 (statement -> continue .)
    Closing_Brace   reduce using rule 42 (statement -> continue .)
    Other_KW        reduce using rule 42 (statement -> continue .)


state 80

    (44) phrase -> allExpression . Semicolon

    Semicolon       shift and go to state 120


state 81

    (45) phrase -> Semicolon .

    void_KW         reduce using rule 45 (phrase -> Semicolon .)
    Boolean_KW      reduce using rule 45 (phrase -> Semicolon .)
    Character_KW    reduce using rule 45 (phrase -> Semicolon .)
    Integer_KW      reduce using rule 45 (phrase -> Semicolon .)
    char_KW         reduce using rule 45 (phrase -> Semicolon .)
    bool_KW         reduce using rule 45 (phrase -> Semicolon .)
    int_KW          reduce using rule 45 (phrase -> Semicolon .)
    $end            reduce using rule 45 (phrase -> Semicolon .)
    Semicolon       reduce using rule 45 (phrase -> Semicolon .)
    Opening_Brace   reduce using rule 45 (phrase -> Semicolon .)
    If_KW           reduce using rule 45 (phrase -> Semicolon .)
    Till_KW         reduce using rule 45 (phrase -> Semicolon .)
    ComeBack_KW     reduce using rule 45 (phrase -> Semicolon .)
    GiveBack_KW     reduce using rule 45 (phrase -> Semicolon .)
    Continue_KW     reduce using rule 45 (phrase -> Semicolon .)
    Num             reduce using rule 45 (phrase -> Semicolon .)
    idLetter        reduce using rule 45 (phrase -> Semicolon .)
    DoubleAnd       reduce using rule 45 (phrase -> Semicolon .)
    DoubleOr        reduce using rule 45 (phrase -> Semicolon .)
    Tilda           reduce using rule 45 (phrase -> Semicolon .)
    And_KW          reduce using rule 45 (phrase -> Semicolon .)
    Or_KW           reduce using rule 45 (phrase -> Semicolon .)
    Minus           reduce using rule 45 (phrase -> Semicolon .)
    Times           reduce using rule 45 (phrase -> Semicolon .)
    QMark           reduce using rule 45 (phrase -> Semicolon .)
    Opening_Parentheses reduce using rule 45 (phrase -> Semicolon .)
    Const_KW        reduce using rule 45 (phrase -> Semicolon .)
    True_KW         reduce using rule 45 (phrase -> Semicolon .)
    False_KW        reduce using rule 45 (phrase -> Semicolon .)
    Closing_Brace   reduce using rule 45 (phrase -> Semicolon .)
    Other_KW        reduce using rule 45 (phrase -> Semicolon .)


state 82

    (43) compoundPhrase -> Opening_Brace . localDeclarations statementList Closing_Brace
    (30) localDeclarations -> . localDeclarations Static_KW type variableList Semicolon
    (31) localDeclarations -> . localDeclarations type variableList Semicolon
    (32) localDeclarations -> .

    Static_KW       reduce using rule 32 (localDeclarations -> .)
    Boolean_KW      reduce using rule 32 (localDeclarations -> .)
    Character_KW    reduce using rule 32 (localDeclarations -> .)
    Integer_KW      reduce using rule 32 (localDeclarations -> .)
    char_KW         reduce using rule 32 (localDeclarations -> .)
    bool_KW         reduce using rule 32 (localDeclarations -> .)
    int_KW          reduce using rule 32 (localDeclarations -> .)
    Semicolon       reduce using rule 32 (localDeclarations -> .)
    Opening_Brace   reduce using rule 32 (localDeclarations -> .)
    If_KW           reduce using rule 32 (localDeclarations -> .)
    Till_KW         reduce using rule 32 (localDeclarations -> .)
    ComeBack_KW     reduce using rule 32 (localDeclarations -> .)
    GiveBack_KW     reduce using rule 32 (localDeclarations -> .)
    Continue_KW     reduce using rule 32 (localDeclarations -> .)
    Num             reduce using rule 32 (localDeclarations -> .)
    idLetter        reduce using rule 32 (localDeclarations -> .)
    DoubleAnd       reduce using rule 32 (localDeclarations -> .)
    DoubleOr        reduce using rule 32 (localDeclarations -> .)
    Tilda           reduce using rule 32 (localDeclarations -> .)
    And_KW          reduce using rule 32 (localDeclarations -> .)
    Or_KW           reduce using rule 32 (localDeclarations -> .)
    Minus           reduce using rule 32 (localDeclarations -> .)
    Times           reduce using rule 32 (localDeclarations -> .)
    QMark           reduce using rule 32 (localDeclarations -> .)
    Opening_Parentheses reduce using rule 32 (localDeclarations -> .)
    Const_KW        reduce using rule 32 (localDeclarations -> .)
    True_KW         reduce using rule 32 (localDeclarations -> .)
    False_KW        reduce using rule 32 (localDeclarations -> .)
    Closing_Brace   reduce using rule 32 (localDeclarations -> .)

    localDeclarations              shift and go to state 121

state 83

    (46) selectPhrase -> If_KW . Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> If_KW . Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace

    Opening_Parentheses shift and go to state 122


state 84

    (59) allExpression -> eachExpression .
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

    Semicolon       reduce using rule 59 (allExpression -> eachExpression .)
    Closing_Parentheses reduce using rule 59 (allExpression -> eachExpression .)
    Closing_Bracket reduce using rule 59 (allExpression -> eachExpression .)
    Comma           reduce using rule 59 (allExpression -> eachExpression .)
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

    logicOp                        shift and go to state 99

state 85

    (51) iterationPhrase -> Till_KW . Opening_Parentheses eachExpression Closing_Parentheses statement

    Opening_Parentheses shift and go to state 123


state 86

    (52) returnPhrase -> ComeBack_KW . Semicolon

    Semicolon       shift and go to state 124


state 87

    (53) returnPhrase -> GiveBack_KW . allExpression Semicolon
    (54) returnPhrase -> GiveBack_KW . numOrLetter Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    allExpression                  shift and go to state 125
    numOrLetter                    shift and go to state 126
    alterable                      shift and go to state 89
    eachExpression                 shift and go to state 84
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 88

    (55) continue -> Continue_KW . Semicolon

    Semicolon       shift and go to state 127


state 89

    (56) allExpression -> alterable . mathOp allExpression
    (57) allExpression -> alterable . PP
    (58) allExpression -> alterable . MM
    (60) allExpression -> alterable . mathOp alterable
    (96) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> alterable . Dot numOrLetter
    (94) factor -> alterable .
    (61) mathOp -> . Equal
    (62) mathOp -> . PlusEqual
    (63) mathOp -> . MinusEqual
    (64) mathOp -> . TimesEqual
    (65) mathOp -> . DivideEqual

    PP              shift and go to state 129
    MM              shift and go to state 130
    Opening_Bracket shift and go to state 117
    Dot             shift and go to state 118
    Plus            reduce using rule 94 (factor -> alterable .)
    Minus           reduce using rule 94 (factor -> alterable .)
    Times           reduce using rule 94 (factor -> alterable .)
    Divide          reduce using rule 94 (factor -> alterable .)
    ModeOP          reduce using rule 94 (factor -> alterable .)
    LEqual          reduce using rule 94 (factor -> alterable .)
    GEqual          reduce using rule 94 (factor -> alterable .)
    EEqual          reduce using rule 94 (factor -> alterable .)
    GreaterOP       reduce using rule 94 (factor -> alterable .)
    LessOP          reduce using rule 94 (factor -> alterable .)
    NonEqualOP      reduce using rule 94 (factor -> alterable .)
    DoubleAnd       reduce using rule 94 (factor -> alterable .)
    DoubleOr        reduce using rule 94 (factor -> alterable .)
    Tilda           reduce using rule 94 (factor -> alterable .)
    And_KW          reduce using rule 94 (factor -> alterable .)
    Or_KW           reduce using rule 94 (factor -> alterable .)
    Semicolon       reduce using rule 94 (factor -> alterable .)
    Closing_Parentheses reduce using rule 94 (factor -> alterable .)
    Closing_Bracket reduce using rule 94 (factor -> alterable .)
    Comma           reduce using rule 94 (factor -> alterable .)
    Equal           shift and go to state 131
    PlusEqual       shift and go to state 132
    MinusEqual      shift and go to state 133
    TimesEqual      shift and go to state 134
    DivideEqual     shift and go to state 135

    mathOp                         shift and go to state 128

state 90

    (3) numOrLetter -> idLetter .
    (100) inalterable -> idLetter . Opening_Parentheses args Closing_Parentheses

    PP              reduce using rule 3 (numOrLetter -> idLetter .)
    MM              reduce using rule 3 (numOrLetter -> idLetter .)
    Opening_Bracket reduce using rule 3 (numOrLetter -> idLetter .)
    Dot             reduce using rule 3 (numOrLetter -> idLetter .)
    Equal           reduce using rule 3 (numOrLetter -> idLetter .)
    PlusEqual       reduce using rule 3 (numOrLetter -> idLetter .)
    MinusEqual      reduce using rule 3 (numOrLetter -> idLetter .)
    TimesEqual      reduce using rule 3 (numOrLetter -> idLetter .)
    DivideEqual     reduce using rule 3 (numOrLetter -> idLetter .)
    Plus            reduce using rule 3 (numOrLetter -> idLetter .)
    Minus           reduce using rule 3 (numOrLetter -> idLetter .)
    Times           reduce using rule 3 (numOrLetter -> idLetter .)
    Divide          reduce using rule 3 (numOrLetter -> idLetter .)
    ModeOP          reduce using rule 3 (numOrLetter -> idLetter .)
    LEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    GEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    EEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    GreaterOP       reduce using rule 3 (numOrLetter -> idLetter .)
    LessOP          reduce using rule 3 (numOrLetter -> idLetter .)
    NonEqualOP      reduce using rule 3 (numOrLetter -> idLetter .)
    DoubleAnd       reduce using rule 3 (numOrLetter -> idLetter .)
    DoubleOr        reduce using rule 3 (numOrLetter -> idLetter .)
    Tilda           reduce using rule 3 (numOrLetter -> idLetter .)
    And_KW          reduce using rule 3 (numOrLetter -> idLetter .)
    Or_KW           reduce using rule 3 (numOrLetter -> idLetter .)
    Semicolon       reduce using rule 3 (numOrLetter -> idLetter .)
    Closing_Parentheses reduce using rule 3 (numOrLetter -> idLetter .)
    Closing_Bracket reduce using rule 3 (numOrLetter -> idLetter .)
    Comma           reduce using rule 3 (numOrLetter -> idLetter .)
    Opening_Parentheses shift and go to state 119


state 91

    (25) listOfParameters -> listOfParameters Semicolon paramTypeList .

    Semicolon       reduce using rule 25 (listOfParameters -> listOfParameters Semicolon paramTypeList .)
    Closing_Parentheses reduce using rule 25 (listOfParameters -> listOfParameters Semicolon paramTypeList .)


state 92

    (28) paramList -> paramList Comma . paramId
    (33) paramId -> . idLetter
    (34) paramId -> . idLetter Opening_Bracket Closing_Bracket

    idLetter        shift and go to state 43

    paramId                        shift and go to state 136

state 93

    (34) paramId -> idLetter Opening_Bracket . Closing_Bracket

    Closing_Bracket shift and go to state 137


state 94

    (8) declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .

    void_KW         reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Character_KW    reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Integer_KW      reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    char_KW         reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    bool_KW         reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    int_KW          reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    $end            reduce using rule 8 (declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement .)


state 95

    (7) declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .

    void_KW         reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    Character_KW    reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    Integer_KW      reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    char_KW         reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    bool_KW         reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    int_KW          reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)
    $end            reduce using rule 7 (declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement .)


state 96

    (9) declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .

    void_KW         reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Character_KW    reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Integer_KW      reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    char_KW         reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    bool_KW         reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    int_KW          reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    $end            reduce using rule 9 (declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement .)


state 97

    (98) inalterable -> Opening_Parentheses allExpression . Closing_Parentheses

    Closing_Parentheses shift and go to state 138


state 98

    (14) varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .

    Semicolon       reduce using rule 14 (varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .)
    Comma           reduce using rule 14 (varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .)


state 99

    (66) eachExpression -> eachExpression logicOp . eachExpression
    (67) eachExpression -> eachExpression logicOp . Then_KW eachExpression
    (70) eachExpression -> eachExpression logicOp . Else_KW eachExpression
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    Then_KW         shift and go to state 140
    Else_KW         shift and go to state 141
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    eachExpression                 shift and go to state 139
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 100

    (68) eachExpression -> logicOp eachExpression .
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And_KW resolved as shift
  ! shift/reduce conflict for Or_KW resolved as shift
    Closing_Parentheses reduce using rule 68 (eachExpression -> logicOp eachExpression .)
    Semicolon       reduce using rule 68 (eachExpression -> logicOp eachExpression .)
    Closing_Bracket reduce using rule 68 (eachExpression -> logicOp eachExpression .)
    Comma           reduce using rule 68 (eachExpression -> logicOp eachExpression .)
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

  ! DoubleAnd       [ reduce using rule 68 (eachExpression -> logicOp eachExpression .) ]
  ! DoubleOr        [ reduce using rule 68 (eachExpression -> logicOp eachExpression .) ]
  ! Tilda           [ reduce using rule 68 (eachExpression -> logicOp eachExpression .) ]
  ! And_KW          [ reduce using rule 68 (eachExpression -> logicOp eachExpression .) ]
  ! Or_KW           [ reduce using rule 68 (eachExpression -> logicOp eachExpression .) ]

    logicOp                        shift and go to state 99

state 101

    (71) relExpression -> mathEXP compareType . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    mathEXP                        shift and go to state 142
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 102

    (82) mathEXP -> mathEXP op . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    mathEXP                        shift and go to state 143
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 103

    (73) compareType -> equal .

    Minus           reduce using rule 73 (compareType -> equal .)
    Times           reduce using rule 73 (compareType -> equal .)
    QMark           reduce using rule 73 (compareType -> equal .)
    Opening_Parentheses reduce using rule 73 (compareType -> equal .)
    idLetter        reduce using rule 73 (compareType -> equal .)
    Const_KW        reduce using rule 73 (compareType -> equal .)
    True_KW         reduce using rule 73 (compareType -> equal .)
    False_KW        reduce using rule 73 (compareType -> equal .)
    Num             reduce using rule 73 (compareType -> equal .)


state 104

    (74) compareType -> nonEqual .

    Minus           reduce using rule 74 (compareType -> nonEqual .)
    Times           reduce using rule 74 (compareType -> nonEqual .)
    QMark           reduce using rule 74 (compareType -> nonEqual .)
    Opening_Parentheses reduce using rule 74 (compareType -> nonEqual .)
    idLetter        reduce using rule 74 (compareType -> nonEqual .)
    Const_KW        reduce using rule 74 (compareType -> nonEqual .)
    True_KW         reduce using rule 74 (compareType -> nonEqual .)
    False_KW        reduce using rule 74 (compareType -> nonEqual .)
    Num             reduce using rule 74 (compareType -> nonEqual .)


state 105

    (83) op -> Plus .

    Minus           reduce using rule 83 (op -> Plus .)
    Times           reduce using rule 83 (op -> Plus .)
    QMark           reduce using rule 83 (op -> Plus .)
    Opening_Parentheses reduce using rule 83 (op -> Plus .)
    idLetter        reduce using rule 83 (op -> Plus .)
    Const_KW        reduce using rule 83 (op -> Plus .)
    True_KW         reduce using rule 83 (op -> Plus .)
    False_KW        reduce using rule 83 (op -> Plus .)
    Num             reduce using rule 83 (op -> Plus .)


state 106

    (84) op -> Minus .

    Minus           reduce using rule 84 (op -> Minus .)
    Times           reduce using rule 84 (op -> Minus .)
    QMark           reduce using rule 84 (op -> Minus .)
    Opening_Parentheses reduce using rule 84 (op -> Minus .)
    idLetter        reduce using rule 84 (op -> Minus .)
    Const_KW        reduce using rule 84 (op -> Minus .)
    True_KW         reduce using rule 84 (op -> Minus .)
    False_KW        reduce using rule 84 (op -> Minus .)
    Num             reduce using rule 84 (op -> Minus .)


state 107

    (85) op -> Times .

    Minus           reduce using rule 85 (op -> Times .)
    Times           reduce using rule 85 (op -> Times .)
    QMark           reduce using rule 85 (op -> Times .)
    Opening_Parentheses reduce using rule 85 (op -> Times .)
    idLetter        reduce using rule 85 (op -> Times .)
    Const_KW        reduce using rule 85 (op -> Times .)
    True_KW         reduce using rule 85 (op -> Times .)
    False_KW        reduce using rule 85 (op -> Times .)
    Num             reduce using rule 85 (op -> Times .)


state 108

    (86) op -> Divide .

    Minus           reduce using rule 86 (op -> Divide .)
    Times           reduce using rule 86 (op -> Divide .)
    QMark           reduce using rule 86 (op -> Divide .)
    Opening_Parentheses reduce using rule 86 (op -> Divide .)
    idLetter        reduce using rule 86 (op -> Divide .)
    Const_KW        reduce using rule 86 (op -> Divide .)
    True_KW         reduce using rule 86 (op -> Divide .)
    False_KW        reduce using rule 86 (op -> Divide .)
    Num             reduce using rule 86 (op -> Divide .)


state 109

    (87) op -> ModeOP .

    Minus           reduce using rule 87 (op -> ModeOP .)
    Times           reduce using rule 87 (op -> ModeOP .)
    QMark           reduce using rule 87 (op -> ModeOP .)
    Opening_Parentheses reduce using rule 87 (op -> ModeOP .)
    idLetter        reduce using rule 87 (op -> ModeOP .)
    Const_KW        reduce using rule 87 (op -> ModeOP .)
    True_KW         reduce using rule 87 (op -> ModeOP .)
    False_KW        reduce using rule 87 (op -> ModeOP .)
    Num             reduce using rule 87 (op -> ModeOP .)


state 110

    (75) equal -> LEqual .

    Minus           reduce using rule 75 (equal -> LEqual .)
    Times           reduce using rule 75 (equal -> LEqual .)
    QMark           reduce using rule 75 (equal -> LEqual .)
    Opening_Parentheses reduce using rule 75 (equal -> LEqual .)
    idLetter        reduce using rule 75 (equal -> LEqual .)
    Const_KW        reduce using rule 75 (equal -> LEqual .)
    True_KW         reduce using rule 75 (equal -> LEqual .)
    False_KW        reduce using rule 75 (equal -> LEqual .)
    Num             reduce using rule 75 (equal -> LEqual .)


state 111

    (76) equal -> GEqual .

    Minus           reduce using rule 76 (equal -> GEqual .)
    Times           reduce using rule 76 (equal -> GEqual .)
    QMark           reduce using rule 76 (equal -> GEqual .)
    Opening_Parentheses reduce using rule 76 (equal -> GEqual .)
    idLetter        reduce using rule 76 (equal -> GEqual .)
    Const_KW        reduce using rule 76 (equal -> GEqual .)
    True_KW         reduce using rule 76 (equal -> GEqual .)
    False_KW        reduce using rule 76 (equal -> GEqual .)
    Num             reduce using rule 76 (equal -> GEqual .)


state 112

    (77) equal -> EEqual .

    Minus           reduce using rule 77 (equal -> EEqual .)
    Times           reduce using rule 77 (equal -> EEqual .)
    QMark           reduce using rule 77 (equal -> EEqual .)
    Opening_Parentheses reduce using rule 77 (equal -> EEqual .)
    idLetter        reduce using rule 77 (equal -> EEqual .)
    Const_KW        reduce using rule 77 (equal -> EEqual .)
    True_KW         reduce using rule 77 (equal -> EEqual .)
    False_KW        reduce using rule 77 (equal -> EEqual .)
    Num             reduce using rule 77 (equal -> EEqual .)


state 113

    (78) nonEqual -> GreaterOP .

    Minus           reduce using rule 78 (nonEqual -> GreaterOP .)
    Times           reduce using rule 78 (nonEqual -> GreaterOP .)
    QMark           reduce using rule 78 (nonEqual -> GreaterOP .)
    Opening_Parentheses reduce using rule 78 (nonEqual -> GreaterOP .)
    idLetter        reduce using rule 78 (nonEqual -> GreaterOP .)
    Const_KW        reduce using rule 78 (nonEqual -> GreaterOP .)
    True_KW         reduce using rule 78 (nonEqual -> GreaterOP .)
    False_KW        reduce using rule 78 (nonEqual -> GreaterOP .)
    Num             reduce using rule 78 (nonEqual -> GreaterOP .)


state 114

    (79) nonEqual -> LessOP .

    Minus           reduce using rule 79 (nonEqual -> LessOP .)
    Times           reduce using rule 79 (nonEqual -> LessOP .)
    QMark           reduce using rule 79 (nonEqual -> LessOP .)
    Opening_Parentheses reduce using rule 79 (nonEqual -> LessOP .)
    idLetter        reduce using rule 79 (nonEqual -> LessOP .)
    Const_KW        reduce using rule 79 (nonEqual -> LessOP .)
    True_KW         reduce using rule 79 (nonEqual -> LessOP .)
    False_KW        reduce using rule 79 (nonEqual -> LessOP .)
    Num             reduce using rule 79 (nonEqual -> LessOP .)


state 115

    (80) nonEqual -> NonEqualOP .

    Minus           reduce using rule 80 (nonEqual -> NonEqualOP .)
    Times           reduce using rule 80 (nonEqual -> NonEqualOP .)
    QMark           reduce using rule 80 (nonEqual -> NonEqualOP .)
    Opening_Parentheses reduce using rule 80 (nonEqual -> NonEqualOP .)
    idLetter        reduce using rule 80 (nonEqual -> NonEqualOP .)
    Const_KW        reduce using rule 80 (nonEqual -> NonEqualOP .)
    True_KW         reduce using rule 80 (nonEqual -> NonEqualOP .)
    False_KW        reduce using rule 80 (nonEqual -> NonEqualOP .)
    Num             reduce using rule 80 (nonEqual -> NonEqualOP .)


state 116

    (88) unaryExpression -> unaryop unaryExpression .

    Plus            reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Minus           reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Times           reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Divide          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    ModeOP          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    LEqual          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    GEqual          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    EEqual          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    GreaterOP       reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    LessOP          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    NonEqualOP      reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Closing_Parentheses reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    DoubleAnd       reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    DoubleOr        reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Tilda           reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    And_KW          reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Or_KW           reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Semicolon       reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Closing_Bracket reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)
    Comma           reduce using rule 88 (unaryExpression -> unaryop unaryExpression .)


state 117

    (96) alterable -> alterable Opening_Bracket . allExpression Closing_Bracket
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    alterable                      shift and go to state 89
    allExpression                  shift and go to state 144
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 118

    (97) alterable -> alterable Dot . numOrLetter
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    Num             shift and go to state 72
    idLetter        shift and go to state 146

    numOrLetter                    shift and go to state 145

state 119

    (100) inalterable -> idLetter Opening_Parentheses . args Closing_Parentheses
    (101) args -> . arguments
    (102) args -> .
    (103) arguments -> . arguments Comma allExpression
    (104) arguments -> . allExpression
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Closing_Parentheses reduce using rule 102 (args -> .)
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    args                           shift and go to state 147
    arguments                      shift and go to state 148
    allExpression                  shift and go to state 149
    alterable                      shift and go to state 89
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 120

    (44) phrase -> allExpression Semicolon .

    void_KW         reduce using rule 44 (phrase -> allExpression Semicolon .)
    Boolean_KW      reduce using rule 44 (phrase -> allExpression Semicolon .)
    Character_KW    reduce using rule 44 (phrase -> allExpression Semicolon .)
    Integer_KW      reduce using rule 44 (phrase -> allExpression Semicolon .)
    char_KW         reduce using rule 44 (phrase -> allExpression Semicolon .)
    bool_KW         reduce using rule 44 (phrase -> allExpression Semicolon .)
    int_KW          reduce using rule 44 (phrase -> allExpression Semicolon .)
    $end            reduce using rule 44 (phrase -> allExpression Semicolon .)
    Semicolon       reduce using rule 44 (phrase -> allExpression Semicolon .)
    Opening_Brace   reduce using rule 44 (phrase -> allExpression Semicolon .)
    If_KW           reduce using rule 44 (phrase -> allExpression Semicolon .)
    Till_KW         reduce using rule 44 (phrase -> allExpression Semicolon .)
    ComeBack_KW     reduce using rule 44 (phrase -> allExpression Semicolon .)
    GiveBack_KW     reduce using rule 44 (phrase -> allExpression Semicolon .)
    Continue_KW     reduce using rule 44 (phrase -> allExpression Semicolon .)
    Num             reduce using rule 44 (phrase -> allExpression Semicolon .)
    idLetter        reduce using rule 44 (phrase -> allExpression Semicolon .)
    DoubleAnd       reduce using rule 44 (phrase -> allExpression Semicolon .)
    DoubleOr        reduce using rule 44 (phrase -> allExpression Semicolon .)
    Tilda           reduce using rule 44 (phrase -> allExpression Semicolon .)
    And_KW          reduce using rule 44 (phrase -> allExpression Semicolon .)
    Or_KW           reduce using rule 44 (phrase -> allExpression Semicolon .)
    Minus           reduce using rule 44 (phrase -> allExpression Semicolon .)
    Times           reduce using rule 44 (phrase -> allExpression Semicolon .)
    QMark           reduce using rule 44 (phrase -> allExpression Semicolon .)
    Opening_Parentheses reduce using rule 44 (phrase -> allExpression Semicolon .)
    Const_KW        reduce using rule 44 (phrase -> allExpression Semicolon .)
    True_KW         reduce using rule 44 (phrase -> allExpression Semicolon .)
    False_KW        reduce using rule 44 (phrase -> allExpression Semicolon .)
    Closing_Brace   reduce using rule 44 (phrase -> allExpression Semicolon .)
    Other_KW        reduce using rule 44 (phrase -> allExpression Semicolon .)


state 121

    (43) compoundPhrase -> Opening_Brace localDeclarations . statementList Closing_Brace
    (30) localDeclarations -> localDeclarations . Static_KW type variableList Semicolon
    (31) localDeclarations -> localDeclarations . type variableList Semicolon
    (35) statementList -> . statement statementList
    (36) statementList -> .
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Static_KW       shift and go to state 151
    Closing_Brace   reduce using rule 36 (statementList -> .)
    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11
    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statementList                  shift and go to state 150
    type                           shift and go to state 152
    statement                      shift and go to state 153
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 122

    (46) selectPhrase -> If_KW Opening_Parentheses . eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> If_KW Opening_Parentheses . eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    eachExpression                 shift and go to state 154
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 123

    (51) iterationPhrase -> Till_KW Opening_Parentheses . eachExpression Closing_Parentheses statement
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    eachExpression                 shift and go to state 155
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 124

    (52) returnPhrase -> ComeBack_KW Semicolon .

    void_KW         reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Boolean_KW      reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Character_KW    reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Integer_KW      reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    char_KW         reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    bool_KW         reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    int_KW          reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    $end            reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Semicolon       reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Opening_Brace   reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    If_KW           reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Till_KW         reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    ComeBack_KW     reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    GiveBack_KW     reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Continue_KW     reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Num             reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    idLetter        reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    DoubleAnd       reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    DoubleOr        reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Tilda           reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    And_KW          reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Or_KW           reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Minus           reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Times           reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    QMark           reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Opening_Parentheses reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Const_KW        reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    True_KW         reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    False_KW        reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Closing_Brace   reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)
    Other_KW        reduce using rule 52 (returnPhrase -> ComeBack_KW Semicolon .)


state 125

    (53) returnPhrase -> GiveBack_KW allExpression . Semicolon

    Semicolon       shift and go to state 156


state 126

    (54) returnPhrase -> GiveBack_KW numOrLetter . Semicolon
    (95) alterable -> numOrLetter .

  ! shift/reduce conflict for Semicolon resolved as shift
    Semicolon       shift and go to state 157
    PP              reduce using rule 95 (alterable -> numOrLetter .)
    MM              reduce using rule 95 (alterable -> numOrLetter .)
    Opening_Bracket reduce using rule 95 (alterable -> numOrLetter .)
    Dot             reduce using rule 95 (alterable -> numOrLetter .)
    Equal           reduce using rule 95 (alterable -> numOrLetter .)
    PlusEqual       reduce using rule 95 (alterable -> numOrLetter .)
    MinusEqual      reduce using rule 95 (alterable -> numOrLetter .)
    TimesEqual      reduce using rule 95 (alterable -> numOrLetter .)
    DivideEqual     reduce using rule 95 (alterable -> numOrLetter .)
    Plus            reduce using rule 95 (alterable -> numOrLetter .)
    Minus           reduce using rule 95 (alterable -> numOrLetter .)
    Times           reduce using rule 95 (alterable -> numOrLetter .)
    Divide          reduce using rule 95 (alterable -> numOrLetter .)
    ModeOP          reduce using rule 95 (alterable -> numOrLetter .)
    LEqual          reduce using rule 95 (alterable -> numOrLetter .)
    GEqual          reduce using rule 95 (alterable -> numOrLetter .)
    EEqual          reduce using rule 95 (alterable -> numOrLetter .)
    GreaterOP       reduce using rule 95 (alterable -> numOrLetter .)
    LessOP          reduce using rule 95 (alterable -> numOrLetter .)
    NonEqualOP      reduce using rule 95 (alterable -> numOrLetter .)
    DoubleAnd       reduce using rule 95 (alterable -> numOrLetter .)
    DoubleOr        reduce using rule 95 (alterable -> numOrLetter .)
    Tilda           reduce using rule 95 (alterable -> numOrLetter .)
    And_KW          reduce using rule 95 (alterable -> numOrLetter .)
    Or_KW           reduce using rule 95 (alterable -> numOrLetter .)

  ! Semicolon       [ reduce using rule 95 (alterable -> numOrLetter .) ]


state 127

    (55) continue -> Continue_KW Semicolon .

    void_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Boolean_KW      reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Character_KW    reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Integer_KW      reduce using rule 55 (continue -> Continue_KW Semicolon .)
    char_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    bool_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    int_KW          reduce using rule 55 (continue -> Continue_KW Semicolon .)
    $end            reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Semicolon       reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Opening_Brace   reduce using rule 55 (continue -> Continue_KW Semicolon .)
    If_KW           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Till_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    ComeBack_KW     reduce using rule 55 (continue -> Continue_KW Semicolon .)
    GiveBack_KW     reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Continue_KW     reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Num             reduce using rule 55 (continue -> Continue_KW Semicolon .)
    idLetter        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    DoubleAnd       reduce using rule 55 (continue -> Continue_KW Semicolon .)
    DoubleOr        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Tilda           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    And_KW          reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Or_KW           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Minus           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Times           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    QMark           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Opening_Parentheses reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Const_KW        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    True_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    False_KW        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Closing_Brace   reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Other_KW        reduce using rule 55 (continue -> Continue_KW Semicolon .)


state 128

    (56) allExpression -> alterable mathOp . allExpression
    (60) allExpression -> alterable mathOp . alterable
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    alterable                      shift and go to state 158
    allExpression                  shift and go to state 159
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 129

    (57) allExpression -> alterable PP .

    Semicolon       reduce using rule 57 (allExpression -> alterable PP .)
    Closing_Parentheses reduce using rule 57 (allExpression -> alterable PP .)
    Closing_Bracket reduce using rule 57 (allExpression -> alterable PP .)
    Comma           reduce using rule 57 (allExpression -> alterable PP .)


state 130

    (58) allExpression -> alterable MM .

    Semicolon       reduce using rule 58 (allExpression -> alterable MM .)
    Closing_Parentheses reduce using rule 58 (allExpression -> alterable MM .)
    Closing_Bracket reduce using rule 58 (allExpression -> alterable MM .)
    Comma           reduce using rule 58 (allExpression -> alterable MM .)


state 131

    (61) mathOp -> Equal .

    Num             reduce using rule 61 (mathOp -> Equal .)
    idLetter        reduce using rule 61 (mathOp -> Equal .)
    DoubleAnd       reduce using rule 61 (mathOp -> Equal .)
    DoubleOr        reduce using rule 61 (mathOp -> Equal .)
    Tilda           reduce using rule 61 (mathOp -> Equal .)
    And_KW          reduce using rule 61 (mathOp -> Equal .)
    Or_KW           reduce using rule 61 (mathOp -> Equal .)
    Minus           reduce using rule 61 (mathOp -> Equal .)
    Times           reduce using rule 61 (mathOp -> Equal .)
    QMark           reduce using rule 61 (mathOp -> Equal .)
    Opening_Parentheses reduce using rule 61 (mathOp -> Equal .)
    Const_KW        reduce using rule 61 (mathOp -> Equal .)
    True_KW         reduce using rule 61 (mathOp -> Equal .)
    False_KW        reduce using rule 61 (mathOp -> Equal .)


state 132

    (62) mathOp -> PlusEqual .

    Num             reduce using rule 62 (mathOp -> PlusEqual .)
    idLetter        reduce using rule 62 (mathOp -> PlusEqual .)
    DoubleAnd       reduce using rule 62 (mathOp -> PlusEqual .)
    DoubleOr        reduce using rule 62 (mathOp -> PlusEqual .)
    Tilda           reduce using rule 62 (mathOp -> PlusEqual .)
    And_KW          reduce using rule 62 (mathOp -> PlusEqual .)
    Or_KW           reduce using rule 62 (mathOp -> PlusEqual .)
    Minus           reduce using rule 62 (mathOp -> PlusEqual .)
    Times           reduce using rule 62 (mathOp -> PlusEqual .)
    QMark           reduce using rule 62 (mathOp -> PlusEqual .)
    Opening_Parentheses reduce using rule 62 (mathOp -> PlusEqual .)
    Const_KW        reduce using rule 62 (mathOp -> PlusEqual .)
    True_KW         reduce using rule 62 (mathOp -> PlusEqual .)
    False_KW        reduce using rule 62 (mathOp -> PlusEqual .)


state 133

    (63) mathOp -> MinusEqual .

    Num             reduce using rule 63 (mathOp -> MinusEqual .)
    idLetter        reduce using rule 63 (mathOp -> MinusEqual .)
    DoubleAnd       reduce using rule 63 (mathOp -> MinusEqual .)
    DoubleOr        reduce using rule 63 (mathOp -> MinusEqual .)
    Tilda           reduce using rule 63 (mathOp -> MinusEqual .)
    And_KW          reduce using rule 63 (mathOp -> MinusEqual .)
    Or_KW           reduce using rule 63 (mathOp -> MinusEqual .)
    Minus           reduce using rule 63 (mathOp -> MinusEqual .)
    Times           reduce using rule 63 (mathOp -> MinusEqual .)
    QMark           reduce using rule 63 (mathOp -> MinusEqual .)
    Opening_Parentheses reduce using rule 63 (mathOp -> MinusEqual .)
    Const_KW        reduce using rule 63 (mathOp -> MinusEqual .)
    True_KW         reduce using rule 63 (mathOp -> MinusEqual .)
    False_KW        reduce using rule 63 (mathOp -> MinusEqual .)


state 134

    (64) mathOp -> TimesEqual .

    Num             reduce using rule 64 (mathOp -> TimesEqual .)
    idLetter        reduce using rule 64 (mathOp -> TimesEqual .)
    DoubleAnd       reduce using rule 64 (mathOp -> TimesEqual .)
    DoubleOr        reduce using rule 64 (mathOp -> TimesEqual .)
    Tilda           reduce using rule 64 (mathOp -> TimesEqual .)
    And_KW          reduce using rule 64 (mathOp -> TimesEqual .)
    Or_KW           reduce using rule 64 (mathOp -> TimesEqual .)
    Minus           reduce using rule 64 (mathOp -> TimesEqual .)
    Times           reduce using rule 64 (mathOp -> TimesEqual .)
    QMark           reduce using rule 64 (mathOp -> TimesEqual .)
    Opening_Parentheses reduce using rule 64 (mathOp -> TimesEqual .)
    Const_KW        reduce using rule 64 (mathOp -> TimesEqual .)
    True_KW         reduce using rule 64 (mathOp -> TimesEqual .)
    False_KW        reduce using rule 64 (mathOp -> TimesEqual .)


state 135

    (65) mathOp -> DivideEqual .

    Num             reduce using rule 65 (mathOp -> DivideEqual .)
    idLetter        reduce using rule 65 (mathOp -> DivideEqual .)
    DoubleAnd       reduce using rule 65 (mathOp -> DivideEqual .)
    DoubleOr        reduce using rule 65 (mathOp -> DivideEqual .)
    Tilda           reduce using rule 65 (mathOp -> DivideEqual .)
    And_KW          reduce using rule 65 (mathOp -> DivideEqual .)
    Or_KW           reduce using rule 65 (mathOp -> DivideEqual .)
    Minus           reduce using rule 65 (mathOp -> DivideEqual .)
    Times           reduce using rule 65 (mathOp -> DivideEqual .)
    QMark           reduce using rule 65 (mathOp -> DivideEqual .)
    Opening_Parentheses reduce using rule 65 (mathOp -> DivideEqual .)
    Const_KW        reduce using rule 65 (mathOp -> DivideEqual .)
    True_KW         reduce using rule 65 (mathOp -> DivideEqual .)
    False_KW        reduce using rule 65 (mathOp -> DivideEqual .)


state 136

    (28) paramList -> paramList Comma paramId .

    Comma           reduce using rule 28 (paramList -> paramList Comma paramId .)
    Semicolon       reduce using rule 28 (paramList -> paramList Comma paramId .)
    Closing_Parentheses reduce using rule 28 (paramList -> paramList Comma paramId .)


state 137

    (34) paramId -> idLetter Opening_Bracket Closing_Bracket .

    Comma           reduce using rule 34 (paramId -> idLetter Opening_Bracket Closing_Bracket .)
    Semicolon       reduce using rule 34 (paramId -> idLetter Opening_Bracket Closing_Bracket .)
    Closing_Parentheses reduce using rule 34 (paramId -> idLetter Opening_Bracket Closing_Bracket .)


state 138

    (98) inalterable -> Opening_Parentheses allExpression Closing_Parentheses .

    Plus            reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Minus           reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Times           reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Divide          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    ModeOP          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    LEqual          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    GEqual          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    EEqual          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    GreaterOP       reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    LessOP          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    NonEqualOP      reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Closing_Parentheses reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    DoubleAnd       reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    DoubleOr        reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Tilda           reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    And_KW          reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Or_KW           reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Semicolon       reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Closing_Bracket reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Comma           reduce using rule 98 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)


state 139

    (66) eachExpression -> eachExpression logicOp eachExpression .
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And_KW resolved as shift
  ! shift/reduce conflict for Or_KW resolved as shift
    Closing_Parentheses reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .)
    Semicolon       reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .)
    Closing_Bracket reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .)
    Comma           reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .)
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

  ! DoubleAnd       [ reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! DoubleOr        [ reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! Tilda           [ reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! And_KW          [ reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! Or_KW           [ reduce using rule 66 (eachExpression -> eachExpression logicOp eachExpression .) ]

    logicOp                        shift and go to state 99

state 140

    (67) eachExpression -> eachExpression logicOp Then_KW . eachExpression
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    eachExpression                 shift and go to state 160
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 141

    (70) eachExpression -> eachExpression logicOp Else_KW . eachExpression
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter

    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    idLetter        shift and go to state 67
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71
    Num             shift and go to state 72

    eachExpression                 shift and go to state 161
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    alterable                      shift and go to state 65
    constant                       shift and go to state 66
    numOrLetter                    shift and go to state 68

state 142

    (71) relExpression -> mathEXP compareType mathEXP .
    (82) mathEXP -> mathEXP . op mathEXP
    (83) op -> . Plus
    (84) op -> . Minus
    (85) op -> . Times
    (86) op -> . Divide
    (87) op -> . ModeOP

    Closing_Parentheses reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    DoubleAnd       reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    DoubleOr        reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    Tilda           reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    And_KW          reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    Or_KW           reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    Semicolon       reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    Closing_Bracket reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    Comma           reduce using rule 71 (relExpression -> mathEXP compareType mathEXP .)
    Plus            shift and go to state 105
    Minus           shift and go to state 106
    Times           shift and go to state 107
    Divide          shift and go to state 108
    ModeOP          shift and go to state 109

    op                             shift and go to state 102

state 143

    (82) mathEXP -> mathEXP op mathEXP .
    (82) mathEXP -> mathEXP . op mathEXP
    (83) op -> . Plus
    (84) op -> . Minus
    (85) op -> . Times
    (86) op -> . Divide
    (87) op -> . ModeOP

  ! shift/reduce conflict for Plus resolved as shift
  ! shift/reduce conflict for Minus resolved as shift
  ! shift/reduce conflict for Times resolved as shift
  ! shift/reduce conflict for Divide resolved as shift
  ! shift/reduce conflict for ModeOP resolved as shift
    LEqual          reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    GEqual          reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    EEqual          reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    GreaterOP       reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    LessOP          reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    NonEqualOP      reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Closing_Parentheses reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    DoubleAnd       reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    DoubleOr        reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Tilda           reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    And_KW          reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Or_KW           reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Semicolon       reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Closing_Bracket reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Comma           reduce using rule 82 (mathEXP -> mathEXP op mathEXP .)
    Plus            shift and go to state 105
    Minus           shift and go to state 106
    Times           shift and go to state 107
    Divide          shift and go to state 108
    ModeOP          shift and go to state 109

  ! Plus            [ reduce using rule 82 (mathEXP -> mathEXP op mathEXP .) ]
  ! Minus           [ reduce using rule 82 (mathEXP -> mathEXP op mathEXP .) ]
  ! Times           [ reduce using rule 82 (mathEXP -> mathEXP op mathEXP .) ]
  ! Divide          [ reduce using rule 82 (mathEXP -> mathEXP op mathEXP .) ]
  ! ModeOP          [ reduce using rule 82 (mathEXP -> mathEXP op mathEXP .) ]

    op                             shift and go to state 102

state 144

    (96) alterable -> alterable Opening_Bracket allExpression . Closing_Bracket

    Closing_Bracket shift and go to state 162


state 145

    (97) alterable -> alterable Dot numOrLetter .

    Opening_Bracket reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Dot             reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Plus            reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Minus           reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Times           reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Divide          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    ModeOP          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    LEqual          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    GEqual          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    EEqual          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    GreaterOP       reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    LessOP          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    NonEqualOP      reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Closing_Parentheses reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    DoubleAnd       reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    DoubleOr        reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Tilda           reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    And_KW          reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Or_KW           reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    PP              reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    MM              reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Equal           reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    PlusEqual       reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    MinusEqual      reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    TimesEqual      reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    DivideEqual     reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Semicolon       reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Closing_Bracket reduce using rule 97 (alterable -> alterable Dot numOrLetter .)
    Comma           reduce using rule 97 (alterable -> alterable Dot numOrLetter .)


state 146

    (3) numOrLetter -> idLetter .

    Opening_Bracket reduce using rule 3 (numOrLetter -> idLetter .)
    Dot             reduce using rule 3 (numOrLetter -> idLetter .)
    Plus            reduce using rule 3 (numOrLetter -> idLetter .)
    Minus           reduce using rule 3 (numOrLetter -> idLetter .)
    Times           reduce using rule 3 (numOrLetter -> idLetter .)
    Divide          reduce using rule 3 (numOrLetter -> idLetter .)
    ModeOP          reduce using rule 3 (numOrLetter -> idLetter .)
    LEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    GEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    EEqual          reduce using rule 3 (numOrLetter -> idLetter .)
    GreaterOP       reduce using rule 3 (numOrLetter -> idLetter .)
    LessOP          reduce using rule 3 (numOrLetter -> idLetter .)
    NonEqualOP      reduce using rule 3 (numOrLetter -> idLetter .)
    Closing_Parentheses reduce using rule 3 (numOrLetter -> idLetter .)
    DoubleAnd       reduce using rule 3 (numOrLetter -> idLetter .)
    DoubleOr        reduce using rule 3 (numOrLetter -> idLetter .)
    Tilda           reduce using rule 3 (numOrLetter -> idLetter .)
    And_KW          reduce using rule 3 (numOrLetter -> idLetter .)
    Or_KW           reduce using rule 3 (numOrLetter -> idLetter .)
    PP              reduce using rule 3 (numOrLetter -> idLetter .)
    MM              reduce using rule 3 (numOrLetter -> idLetter .)
    Equal           reduce using rule 3 (numOrLetter -> idLetter .)
    PlusEqual       reduce using rule 3 (numOrLetter -> idLetter .)
    MinusEqual      reduce using rule 3 (numOrLetter -> idLetter .)
    TimesEqual      reduce using rule 3 (numOrLetter -> idLetter .)
    DivideEqual     reduce using rule 3 (numOrLetter -> idLetter .)
    Semicolon       reduce using rule 3 (numOrLetter -> idLetter .)
    Closing_Bracket reduce using rule 3 (numOrLetter -> idLetter .)
    Comma           reduce using rule 3 (numOrLetter -> idLetter .)


state 147

    (100) inalterable -> idLetter Opening_Parentheses args . Closing_Parentheses

    Closing_Parentheses shift and go to state 163


state 148

    (101) args -> arguments .
    (103) arguments -> arguments . Comma allExpression

    Closing_Parentheses reduce using rule 101 (args -> arguments .)
    Comma           shift and go to state 164


state 149

    (104) arguments -> allExpression .

    Comma           reduce using rule 104 (arguments -> allExpression .)
    Closing_Parentheses reduce using rule 104 (arguments -> allExpression .)


state 150

    (43) compoundPhrase -> Opening_Brace localDeclarations statementList . Closing_Brace

    Closing_Brace   shift and go to state 165


state 151

    (30) localDeclarations -> localDeclarations Static_KW . type variableList Semicolon
    (17) type -> . Boolean_KW
    (18) type -> . Character_KW
    (19) type -> . Integer_KW
    (20) type -> . char_KW
    (21) type -> . bool_KW
    (22) type -> . int_KW

    Boolean_KW      shift and go to state 6
    Character_KW    shift and go to state 7
    Integer_KW      shift and go to state 8
    char_KW         shift and go to state 9
    bool_KW         shift and go to state 10
    int_KW          shift and go to state 11

    type                           shift and go to state 166

state 152

    (31) localDeclarations -> localDeclarations type . variableList Semicolon
    (11) variableList -> . variableList Comma varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (15) varForm -> . idLetter Opening_Bracket Num Closing_Bracket
    (16) varForm -> . idLetter

    idLetter        shift and go to state 37

    variableList                   shift and go to state 167
    varInitialization              shift and go to state 18
    varForm                        shift and go to state 19

state 153

    (35) statementList -> statement . statementList
    (35) statementList -> . statement statementList
    (36) statementList -> .
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Closing_Brace   reduce using rule 36 (statementList -> .)
    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statement                      shift and go to state 153
    statementList                  shift and go to state 168
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 154

    (46) selectPhrase -> If_KW Opening_Parentheses eachExpression . Closing_Parentheses ifBody
    (47) selectPhrase -> If_KW Opening_Parentheses eachExpression . Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

    Closing_Parentheses shift and go to state 169
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

    logicOp                        shift and go to state 99

state 155

    (51) iterationPhrase -> Till_KW Opening_Parentheses eachExpression . Closing_Parentheses statement
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

    Closing_Parentheses shift and go to state 170
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

    logicOp                        shift and go to state 99

state 156

    (53) returnPhrase -> GiveBack_KW allExpression Semicolon .

    void_KW         reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Boolean_KW      reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Character_KW    reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Integer_KW      reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    char_KW         reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    bool_KW         reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    int_KW          reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    $end            reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Semicolon       reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Opening_Brace   reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    If_KW           reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Till_KW         reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    ComeBack_KW     reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    GiveBack_KW     reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Continue_KW     reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Num             reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    idLetter        reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    DoubleAnd       reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    DoubleOr        reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Tilda           reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    And_KW          reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Or_KW           reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Minus           reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Times           reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    QMark           reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Opening_Parentheses reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Const_KW        reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    True_KW         reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    False_KW        reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Closing_Brace   reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Other_KW        reduce using rule 53 (returnPhrase -> GiveBack_KW allExpression Semicolon .)


state 157

    (54) returnPhrase -> GiveBack_KW numOrLetter Semicolon .

    void_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Boolean_KW      reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Character_KW    reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Integer_KW      reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    char_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    bool_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    int_KW          reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    $end            reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Semicolon       reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Opening_Brace   reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    If_KW           reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Till_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    ComeBack_KW     reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    GiveBack_KW     reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Continue_KW     reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Num             reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    idLetter        reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    DoubleAnd       reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    DoubleOr        reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Tilda           reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    And_KW          reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Or_KW           reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Minus           reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Times           reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    QMark           reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Opening_Parentheses reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Const_KW        reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    True_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    False_KW        reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Closing_Brace   reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Other_KW        reduce using rule 54 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)


state 158

    (60) allExpression -> alterable mathOp alterable .
    (56) allExpression -> alterable . mathOp allExpression
    (57) allExpression -> alterable . PP
    (58) allExpression -> alterable . MM
    (60) allExpression -> alterable . mathOp alterable
    (96) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> alterable . Dot numOrLetter
    (94) factor -> alterable .
    (61) mathOp -> . Equal
    (62) mathOp -> . PlusEqual
    (63) mathOp -> . MinusEqual
    (64) mathOp -> . TimesEqual
    (65) mathOp -> . DivideEqual

  ! reduce/reduce conflict for Semicolon resolved using rule 60 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for Closing_Parentheses resolved using rule 60 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for Closing_Bracket resolved using rule 60 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for Comma resolved using rule 60 (allExpression -> alterable mathOp alterable .)
    Semicolon       reduce using rule 60 (allExpression -> alterable mathOp alterable .)
    Closing_Parentheses reduce using rule 60 (allExpression -> alterable mathOp alterable .)
    Closing_Bracket reduce using rule 60 (allExpression -> alterable mathOp alterable .)
    Comma           reduce using rule 60 (allExpression -> alterable mathOp alterable .)
    PP              shift and go to state 129
    MM              shift and go to state 130
    Opening_Bracket shift and go to state 117
    Dot             shift and go to state 118
    Plus            reduce using rule 94 (factor -> alterable .)
    Minus           reduce using rule 94 (factor -> alterable .)
    Times           reduce using rule 94 (factor -> alterable .)
    Divide          reduce using rule 94 (factor -> alterable .)
    ModeOP          reduce using rule 94 (factor -> alterable .)
    LEqual          reduce using rule 94 (factor -> alterable .)
    GEqual          reduce using rule 94 (factor -> alterable .)
    EEqual          reduce using rule 94 (factor -> alterable .)
    GreaterOP       reduce using rule 94 (factor -> alterable .)
    LessOP          reduce using rule 94 (factor -> alterable .)
    NonEqualOP      reduce using rule 94 (factor -> alterable .)
    DoubleAnd       reduce using rule 94 (factor -> alterable .)
    DoubleOr        reduce using rule 94 (factor -> alterable .)
    Tilda           reduce using rule 94 (factor -> alterable .)
    And_KW          reduce using rule 94 (factor -> alterable .)
    Or_KW           reduce using rule 94 (factor -> alterable .)
    Equal           shift and go to state 131
    PlusEqual       shift and go to state 132
    MinusEqual      shift and go to state 133
    TimesEqual      shift and go to state 134
    DivideEqual     shift and go to state 135

  ! Semicolon       [ reduce using rule 94 (factor -> alterable .) ]
  ! Closing_Parentheses [ reduce using rule 94 (factor -> alterable .) ]
  ! Closing_Bracket [ reduce using rule 94 (factor -> alterable .) ]
  ! Comma           [ reduce using rule 94 (factor -> alterable .) ]

    mathOp                         shift and go to state 128

state 159

    (56) allExpression -> alterable mathOp allExpression .

    Semicolon       reduce using rule 56 (allExpression -> alterable mathOp allExpression .)
    Closing_Parentheses reduce using rule 56 (allExpression -> alterable mathOp allExpression .)
    Closing_Bracket reduce using rule 56 (allExpression -> alterable mathOp allExpression .)
    Comma           reduce using rule 56 (allExpression -> alterable mathOp allExpression .)


state 160

    (67) eachExpression -> eachExpression logicOp Then_KW eachExpression .
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

    Closing_Parentheses reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    Semicolon       reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    Closing_Bracket reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    Comma           reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

  ! DoubleAnd       [ reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! DoubleOr        [ reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! Tilda           [ reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! And_KW          [ reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! Or_KW           [ reduce using rule 67 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]

    logicOp                        shift and go to state 99

state 161

    (70) eachExpression -> eachExpression logicOp Else_KW eachExpression .
    (66) eachExpression -> eachExpression . logicOp eachExpression
    (67) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (70) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW

    Closing_Parentheses reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    Semicolon       reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    Closing_Bracket reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    Comma           reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56

  ! DoubleAnd       [ reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! DoubleOr        [ reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! Tilda           [ reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! And_KW          [ reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! Or_KW           [ reduce using rule 70 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]

    logicOp                        shift and go to state 99

state 162

    (96) alterable -> alterable Opening_Bracket allExpression Closing_Bracket .

    Opening_Bracket reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Dot             reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Plus            reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Minus           reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Times           reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Divide          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    ModeOP          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    LEqual          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    GEqual          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    EEqual          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    GreaterOP       reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    LessOP          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    NonEqualOP      reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Closing_Parentheses reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DoubleAnd       reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DoubleOr        reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Tilda           reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    And_KW          reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Or_KW           reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    PP              reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    MM              reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Equal           reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    PlusEqual       reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    MinusEqual      reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    TimesEqual      reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DivideEqual     reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Semicolon       reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Closing_Bracket reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Comma           reduce using rule 96 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)


state 163

    (100) inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .

    Plus            reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Minus           reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Times           reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Divide          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    ModeOP          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    LEqual          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    GEqual          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    EEqual          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    GreaterOP       reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    LessOP          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    NonEqualOP      reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Closing_Parentheses reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    DoubleAnd       reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    DoubleOr        reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Tilda           reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    And_KW          reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Or_KW           reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Semicolon       reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Closing_Bracket reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)
    Comma           reduce using rule 100 (inalterable -> idLetter Opening_Parentheses args Closing_Parentheses .)


state 164

    (103) arguments -> arguments Comma . allExpression
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    allExpression                  shift and go to state 171
    alterable                      shift and go to state 89
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 165

    (43) compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .

    void_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Boolean_KW      reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Character_KW    reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Integer_KW      reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    char_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    bool_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    int_KW          reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    $end            reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Semicolon       reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Opening_Brace   reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    If_KW           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Till_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    ComeBack_KW     reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    GiveBack_KW     reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Continue_KW     reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Num             reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    idLetter        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    DoubleAnd       reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    DoubleOr        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Tilda           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    And_KW          reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Or_KW           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Minus           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Times           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    QMark           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Opening_Parentheses reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Const_KW        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    True_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    False_KW        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Closing_Brace   reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Other_KW        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)


state 166

    (30) localDeclarations -> localDeclarations Static_KW type . variableList Semicolon
    (11) variableList -> . variableList Comma varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (15) varForm -> . idLetter Opening_Bracket Num Closing_Bracket
    (16) varForm -> . idLetter

    idLetter        shift and go to state 37

    variableList                   shift and go to state 172
    varInitialization              shift and go to state 18
    varForm                        shift and go to state 19

state 167

    (31) localDeclarations -> localDeclarations type variableList . Semicolon
    (11) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 173
    Comma           shift and go to state 26


state 168

    (35) statementList -> statement statementList .

    Closing_Brace   reduce using rule 35 (statementList -> statement statementList .)


state 169

    (46) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses . ifBody
    (47) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses . Opening_Brace ifBody ifBody Closing_Brace
    (48) ifBody -> . statement
    (49) ifBody -> . statement Other_KW statement
    (50) ifBody -> . Semicolon
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Opening_Brace   shift and go to state 175
    Semicolon       shift and go to state 177
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    eachExpression                 shift and go to state 84
    ifBody                         shift and go to state 174
    statement                      shift and go to state 176
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 170

    (51) iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    eachExpression                 shift and go to state 84
    statement                      shift and go to state 178
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 171

    (103) arguments -> arguments Comma allExpression .

    Comma           reduce using rule 103 (arguments -> arguments Comma allExpression .)
    Closing_Parentheses reduce using rule 103 (arguments -> arguments Comma allExpression .)


state 172

    (30) localDeclarations -> localDeclarations Static_KW type variableList . Semicolon
    (11) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 179
    Comma           shift and go to state 26


state 173

    (31) localDeclarations -> localDeclarations type variableList Semicolon .

    Static_KW       reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Boolean_KW      reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Character_KW    reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Integer_KW      reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    char_KW         reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    bool_KW         reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    int_KW          reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Semicolon       reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Opening_Brace   reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    If_KW           reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Till_KW         reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    ComeBack_KW     reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    GiveBack_KW     reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Continue_KW     reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Num             reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    idLetter        reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    DoubleAnd       reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    DoubleOr        reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Tilda           reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    And_KW          reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Or_KW           reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Minus           reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Times           reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    QMark           reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Opening_Parentheses reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Const_KW        reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    True_KW         reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    False_KW        reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)
    Closing_Brace   reduce using rule 31 (localDeclarations -> localDeclarations type variableList Semicolon .)


state 174

    (46) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .

    void_KW         reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Boolean_KW      reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Character_KW    reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Integer_KW      reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    char_KW         reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    bool_KW         reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    int_KW          reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    $end            reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Semicolon       reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Opening_Brace   reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    If_KW           reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Till_KW         reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    ComeBack_KW     reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    GiveBack_KW     reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Continue_KW     reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Num             reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    idLetter        reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    DoubleAnd       reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    DoubleOr        reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Tilda           reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    And_KW          reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Or_KW           reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Minus           reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Times           reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    QMark           reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Opening_Parentheses reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Const_KW        reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    True_KW         reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    False_KW        reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Closing_Brace   reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Other_KW        reduce using rule 46 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)


state 175

    (47) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace . ifBody ifBody Closing_Brace
    (43) compoundPhrase -> Opening_Brace . localDeclarations statementList Closing_Brace
    (48) ifBody -> . statement
    (49) ifBody -> . statement Other_KW statement
    (50) ifBody -> . Semicolon
    (30) localDeclarations -> . localDeclarations Static_KW type variableList Semicolon
    (31) localDeclarations -> . localDeclarations type variableList Semicolon
    (32) localDeclarations -> .
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

  ! shift/reduce conflict for Semicolon resolved as shift
  ! shift/reduce conflict for Opening_Brace resolved as shift
  ! shift/reduce conflict for If_KW resolved as shift
  ! shift/reduce conflict for Till_KW resolved as shift
  ! shift/reduce conflict for ComeBack_KW resolved as shift
  ! shift/reduce conflict for GiveBack_KW resolved as shift
  ! shift/reduce conflict for Continue_KW resolved as shift
  ! shift/reduce conflict for Num resolved as shift
  ! shift/reduce conflict for idLetter resolved as shift
  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And_KW resolved as shift
  ! shift/reduce conflict for Or_KW resolved as shift
  ! shift/reduce conflict for Minus resolved as shift
  ! shift/reduce conflict for Times resolved as shift
  ! shift/reduce conflict for QMark resolved as shift
  ! shift/reduce conflict for Opening_Parentheses resolved as shift
  ! shift/reduce conflict for Const_KW resolved as shift
  ! shift/reduce conflict for True_KW resolved as shift
  ! shift/reduce conflict for False_KW resolved as shift
    Semicolon       shift and go to state 177
    Static_KW       reduce using rule 32 (localDeclarations -> .)
    Boolean_KW      reduce using rule 32 (localDeclarations -> .)
    Character_KW    reduce using rule 32 (localDeclarations -> .)
    Integer_KW      reduce using rule 32 (localDeclarations -> .)
    char_KW         reduce using rule 32 (localDeclarations -> .)
    bool_KW         reduce using rule 32 (localDeclarations -> .)
    int_KW          reduce using rule 32 (localDeclarations -> .)
    Closing_Brace   reduce using rule 32 (localDeclarations -> .)
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

  ! Semicolon       [ reduce using rule 32 (localDeclarations -> .) ]
  ! Opening_Brace   [ reduce using rule 32 (localDeclarations -> .) ]
  ! If_KW           [ reduce using rule 32 (localDeclarations -> .) ]
  ! Till_KW         [ reduce using rule 32 (localDeclarations -> .) ]
  ! ComeBack_KW     [ reduce using rule 32 (localDeclarations -> .) ]
  ! GiveBack_KW     [ reduce using rule 32 (localDeclarations -> .) ]
  ! Continue_KW     [ reduce using rule 32 (localDeclarations -> .) ]
  ! Num             [ reduce using rule 32 (localDeclarations -> .) ]
  ! idLetter        [ reduce using rule 32 (localDeclarations -> .) ]
  ! DoubleAnd       [ reduce using rule 32 (localDeclarations -> .) ]
  ! DoubleOr        [ reduce using rule 32 (localDeclarations -> .) ]
  ! Tilda           [ reduce using rule 32 (localDeclarations -> .) ]
  ! And_KW          [ reduce using rule 32 (localDeclarations -> .) ]
  ! Or_KW           [ reduce using rule 32 (localDeclarations -> .) ]
  ! Minus           [ reduce using rule 32 (localDeclarations -> .) ]
  ! Times           [ reduce using rule 32 (localDeclarations -> .) ]
  ! QMark           [ reduce using rule 32 (localDeclarations -> .) ]
  ! Opening_Parentheses [ reduce using rule 32 (localDeclarations -> .) ]
  ! Const_KW        [ reduce using rule 32 (localDeclarations -> .) ]
  ! True_KW         [ reduce using rule 32 (localDeclarations -> .) ]
  ! False_KW        [ reduce using rule 32 (localDeclarations -> .) ]

    eachExpression                 shift and go to state 84
    ifBody                         shift and go to state 180
    localDeclarations              shift and go to state 121
    statement                      shift and go to state 176
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 176

    (48) ifBody -> statement .
    (49) ifBody -> statement . Other_KW statement

  ! shift/reduce conflict for Other_KW resolved as shift
    void_KW         reduce using rule 48 (ifBody -> statement .)
    Boolean_KW      reduce using rule 48 (ifBody -> statement .)
    Character_KW    reduce using rule 48 (ifBody -> statement .)
    Integer_KW      reduce using rule 48 (ifBody -> statement .)
    char_KW         reduce using rule 48 (ifBody -> statement .)
    bool_KW         reduce using rule 48 (ifBody -> statement .)
    int_KW          reduce using rule 48 (ifBody -> statement .)
    $end            reduce using rule 48 (ifBody -> statement .)
    Semicolon       reduce using rule 48 (ifBody -> statement .)
    Opening_Brace   reduce using rule 48 (ifBody -> statement .)
    If_KW           reduce using rule 48 (ifBody -> statement .)
    Till_KW         reduce using rule 48 (ifBody -> statement .)
    ComeBack_KW     reduce using rule 48 (ifBody -> statement .)
    GiveBack_KW     reduce using rule 48 (ifBody -> statement .)
    Continue_KW     reduce using rule 48 (ifBody -> statement .)
    Num             reduce using rule 48 (ifBody -> statement .)
    idLetter        reduce using rule 48 (ifBody -> statement .)
    DoubleAnd       reduce using rule 48 (ifBody -> statement .)
    DoubleOr        reduce using rule 48 (ifBody -> statement .)
    Tilda           reduce using rule 48 (ifBody -> statement .)
    And_KW          reduce using rule 48 (ifBody -> statement .)
    Or_KW           reduce using rule 48 (ifBody -> statement .)
    Minus           reduce using rule 48 (ifBody -> statement .)
    Times           reduce using rule 48 (ifBody -> statement .)
    QMark           reduce using rule 48 (ifBody -> statement .)
    Opening_Parentheses reduce using rule 48 (ifBody -> statement .)
    Const_KW        reduce using rule 48 (ifBody -> statement .)
    True_KW         reduce using rule 48 (ifBody -> statement .)
    False_KW        reduce using rule 48 (ifBody -> statement .)
    Closing_Brace   reduce using rule 48 (ifBody -> statement .)
    Other_KW        shift and go to state 181

  ! Other_KW        [ reduce using rule 48 (ifBody -> statement .) ]


state 177

    (50) ifBody -> Semicolon .
    (45) phrase -> Semicolon .

  ! reduce/reduce conflict for void_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Boolean_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Character_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Integer_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for char_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for bool_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for int_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for $end resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Semicolon resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Opening_Brace resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for If_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Till_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for ComeBack_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for GiveBack_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Continue_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Num resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for idLetter resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for DoubleAnd resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for DoubleOr resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Tilda resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for And_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Or_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Minus resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Times resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for QMark resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Opening_Parentheses resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Const_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for True_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for False_KW resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Closing_Brace resolved using rule 45 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Other_KW resolved using rule 45 (phrase -> Semicolon .)
    void_KW         reduce using rule 45 (phrase -> Semicolon .)
    Boolean_KW      reduce using rule 45 (phrase -> Semicolon .)
    Character_KW    reduce using rule 45 (phrase -> Semicolon .)
    Integer_KW      reduce using rule 45 (phrase -> Semicolon .)
    char_KW         reduce using rule 45 (phrase -> Semicolon .)
    bool_KW         reduce using rule 45 (phrase -> Semicolon .)
    int_KW          reduce using rule 45 (phrase -> Semicolon .)
    $end            reduce using rule 45 (phrase -> Semicolon .)
    Semicolon       reduce using rule 45 (phrase -> Semicolon .)
    Opening_Brace   reduce using rule 45 (phrase -> Semicolon .)
    If_KW           reduce using rule 45 (phrase -> Semicolon .)
    Till_KW         reduce using rule 45 (phrase -> Semicolon .)
    ComeBack_KW     reduce using rule 45 (phrase -> Semicolon .)
    GiveBack_KW     reduce using rule 45 (phrase -> Semicolon .)
    Continue_KW     reduce using rule 45 (phrase -> Semicolon .)
    Num             reduce using rule 45 (phrase -> Semicolon .)
    idLetter        reduce using rule 45 (phrase -> Semicolon .)
    DoubleAnd       reduce using rule 45 (phrase -> Semicolon .)
    DoubleOr        reduce using rule 45 (phrase -> Semicolon .)
    Tilda           reduce using rule 45 (phrase -> Semicolon .)
    And_KW          reduce using rule 45 (phrase -> Semicolon .)
    Or_KW           reduce using rule 45 (phrase -> Semicolon .)
    Minus           reduce using rule 45 (phrase -> Semicolon .)
    Times           reduce using rule 45 (phrase -> Semicolon .)
    QMark           reduce using rule 45 (phrase -> Semicolon .)
    Opening_Parentheses reduce using rule 45 (phrase -> Semicolon .)
    Const_KW        reduce using rule 45 (phrase -> Semicolon .)
    True_KW         reduce using rule 45 (phrase -> Semicolon .)
    False_KW        reduce using rule 45 (phrase -> Semicolon .)
    Closing_Brace   reduce using rule 45 (phrase -> Semicolon .)
    Other_KW        reduce using rule 45 (phrase -> Semicolon .)

  ! void_KW         [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Boolean_KW      [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Character_KW    [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Integer_KW      [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! char_KW         [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! bool_KW         [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! int_KW          [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! $end            [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Semicolon       [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Opening_Brace   [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! If_KW           [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Till_KW         [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! ComeBack_KW     [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! GiveBack_KW     [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Continue_KW     [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Num             [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! idLetter        [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! DoubleAnd       [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! DoubleOr        [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Tilda           [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! And_KW          [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Or_KW           [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Minus           [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Times           [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! QMark           [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Opening_Parentheses [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Const_KW        [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! True_KW         [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! False_KW        [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Closing_Brace   [ reduce using rule 50 (ifBody -> Semicolon .) ]
  ! Other_KW        [ reduce using rule 50 (ifBody -> Semicolon .) ]


state 178

    (51) iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .

    void_KW         reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Character_KW    reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Integer_KW      reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    char_KW         reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    bool_KW         reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    int_KW          reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    $end            reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Semicolon       reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Opening_Brace   reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    If_KW           reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Till_KW         reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    ComeBack_KW     reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    GiveBack_KW     reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Continue_KW     reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Num             reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    idLetter        reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    DoubleAnd       reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    DoubleOr        reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Tilda           reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    And_KW          reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Or_KW           reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Minus           reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Times           reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    QMark           reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Opening_Parentheses reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Const_KW        reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    True_KW         reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    False_KW        reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Closing_Brace   reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Other_KW        reduce using rule 51 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)


state 179

    (30) localDeclarations -> localDeclarations Static_KW type variableList Semicolon .

    Static_KW       reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Boolean_KW      reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Character_KW    reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Integer_KW      reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    char_KW         reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    bool_KW         reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    int_KW          reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Semicolon       reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Opening_Brace   reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    If_KW           reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Till_KW         reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    ComeBack_KW     reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    GiveBack_KW     reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Continue_KW     reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Num             reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    idLetter        reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    DoubleAnd       reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    DoubleOr        reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Tilda           reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    And_KW          reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Or_KW           reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Minus           reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Times           reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    QMark           reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Opening_Parentheses reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Const_KW        reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    True_KW         reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    False_KW        reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)
    Closing_Brace   reduce using rule 30 (localDeclarations -> localDeclarations Static_KW type variableList Semicolon .)


state 180

    (47) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody . ifBody Closing_Brace
    (48) ifBody -> . statement
    (49) ifBody -> . statement Other_KW statement
    (50) ifBody -> . Semicolon
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 177
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    eachExpression                 shift and go to state 84
    ifBody                         shift and go to state 182
    statement                      shift and go to state 176
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 181

    (49) ifBody -> statement Other_KW . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (44) phrase -> . allExpression Semicolon
    (45) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (46) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (47) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (51) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (52) returnPhrase -> . ComeBack_KW Semicolon
    (53) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (54) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (60) allExpression -> . alterable mathOp alterable
    (95) alterable -> . numOrLetter
    (96) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (97) alterable -> . alterable Dot numOrLetter
    (66) eachExpression -> . eachExpression logicOp eachExpression
    (67) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (68) eachExpression -> . logicOp eachExpression
    (69) eachExpression -> . relExpression
    (70) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . idLetter
    (108) logicOp -> . DoubleAnd
    (109) logicOp -> . DoubleOr
    (110) logicOp -> . Tilda
    (111) logicOp -> . And_KW
    (112) logicOp -> . Or_KW
    (71) relExpression -> . mathEXP compareType mathEXP
    (72) relExpression -> . mathEXP
    (81) mathEXP -> . unaryExpression
    (82) mathEXP -> . mathEXP op mathEXP
    (88) unaryExpression -> . unaryop unaryExpression
    (89) unaryExpression -> . factor
    (90) unaryop -> . Minus
    (91) unaryop -> . Times
    (92) unaryop -> . QMark
    (93) factor -> . inalterable
    (94) factor -> . alterable
    (98) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (99) inalterable -> . constant
    (100) inalterable -> . idLetter Opening_Parentheses args Closing_Parentheses
    (105) constant -> . Const_KW
    (106) constant -> . True_KW
    (107) constant -> . False_KW

    Semicolon       shift and go to state 81
    Opening_Brace   shift and go to state 82
    If_KW           shift and go to state 83
    Till_KW         shift and go to state 85
    ComeBack_KW     shift and go to state 86
    GiveBack_KW     shift and go to state 87
    Continue_KW     shift and go to state 88
    Num             shift and go to state 72
    idLetter        shift and go to state 90
    DoubleAnd       shift and go to state 52
    DoubleOr        shift and go to state 53
    Tilda           shift and go to state 54
    And_KW          shift and go to state 55
    Or_KW           shift and go to state 56
    Minus           shift and go to state 61
    Times           shift and go to state 62
    QMark           shift and go to state 63
    Opening_Parentheses shift and go to state 48
    Const_KW        shift and go to state 69
    True_KW         shift and go to state 70
    False_KW        shift and go to state 71

    statement                      shift and go to state 183
    phrase                         shift and go to state 74
    compoundPhrase                 shift and go to state 75
    selectPhrase                   shift and go to state 76
    iterationPhrase                shift and go to state 77
    returnPhrase                   shift and go to state 78
    continue                       shift and go to state 79
    allExpression                  shift and go to state 80
    eachExpression                 shift and go to state 84
    numOrLetter                    shift and go to state 68
    alterable                      shift and go to state 89
    logicOp                        shift and go to state 50
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 57
    unaryExpression                shift and go to state 58
    unaryop                        shift and go to state 59
    factor                         shift and go to state 60
    inalterable                    shift and go to state 64
    constant                       shift and go to state 66

state 182

    (47) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody . Closing_Brace

    Closing_Brace   shift and go to state 184


state 183

    (49) ifBody -> statement Other_KW statement .

    void_KW         reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Boolean_KW      reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Character_KW    reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Integer_KW      reduce using rule 49 (ifBody -> statement Other_KW statement .)
    char_KW         reduce using rule 49 (ifBody -> statement Other_KW statement .)
    bool_KW         reduce using rule 49 (ifBody -> statement Other_KW statement .)
    int_KW          reduce using rule 49 (ifBody -> statement Other_KW statement .)
    $end            reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Semicolon       reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Opening_Brace   reduce using rule 49 (ifBody -> statement Other_KW statement .)
    If_KW           reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Till_KW         reduce using rule 49 (ifBody -> statement Other_KW statement .)
    ComeBack_KW     reduce using rule 49 (ifBody -> statement Other_KW statement .)
    GiveBack_KW     reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Continue_KW     reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Num             reduce using rule 49 (ifBody -> statement Other_KW statement .)
    idLetter        reduce using rule 49 (ifBody -> statement Other_KW statement .)
    DoubleAnd       reduce using rule 49 (ifBody -> statement Other_KW statement .)
    DoubleOr        reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Tilda           reduce using rule 49 (ifBody -> statement Other_KW statement .)
    And_KW          reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Or_KW           reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Minus           reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Times           reduce using rule 49 (ifBody -> statement Other_KW statement .)
    QMark           reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Opening_Parentheses reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Const_KW        reduce using rule 49 (ifBody -> statement Other_KW statement .)
    True_KW         reduce using rule 49 (ifBody -> statement Other_KW statement .)
    False_KW        reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Closing_Brace   reduce using rule 49 (ifBody -> statement Other_KW statement .)
    Other_KW        reduce using rule 49 (ifBody -> statement Other_KW statement .)


state 184

    (47) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .

    void_KW         reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Boolean_KW      reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Character_KW    reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Integer_KW      reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    char_KW         reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    bool_KW         reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    int_KW          reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    $end            reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Semicolon       reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Opening_Brace   reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    If_KW           reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Till_KW         reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    ComeBack_KW     reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    GiveBack_KW     reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Continue_KW     reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Num             reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    idLetter        reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    DoubleAnd       reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    DoubleOr        reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Tilda           reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    And_KW          reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Or_KW           reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Minus           reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Times           reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    QMark           reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Opening_Parentheses reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Const_KW        reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    True_KW         reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    False_KW        reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Closing_Brace   reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Other_KW        reduce using rule 47 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
