Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrLetter -> NUMBER
Rule 3     numOrLetter -> LETTER
Rule 4     numOrLetter -> <empty>
Rule 5     list -> list declaration
Rule 6     list -> declaration
Rule 7     declaration -> function
Rule 8     declaration -> varDeclaration
Rule 9     varDeclaration -> type variableList SEMICOLON
Rule 10    ScopedVariableDec -> scopedSpecifier variableList SEMICOLON
Rule 11    variableList -> variableList COMA varInitialization
Rule 12    variableList -> varInitialization
Rule 13    varInitialization -> varForm
Rule 14    varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
Rule 15    varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET
Rule 16    varForm -> LETTER numOrLetter
Rule 17    scopedSpecifier -> STATIC_KW type
Rule 18    scopedSpecifier -> type
Rule 19    type -> BOOLEAN_KW
Rule 20    type -> CHARACTER_KW
Rule 21    type -> INTEGER_KW
Rule 22    type -> CHAR_KW
Rule 23    type -> BOOL_KW
Rule 24    type -> INT_KW
Rule 25    function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET
Rule 26    function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
Rule 27    parameter -> listOfParameters
Rule 28    parameter -> <empty>
Rule 29    listOfParameters -> listOfParameters SEMICOLON paramTypeList
Rule 30    listOfParameters -> paramTypeList
Rule 31    paramTypeList -> type paramList
Rule 32    paramList -> paramList COMA paramId
Rule 33    paramList -> paramId
Rule 34    localDeclarations -> localDeclarations ScopedVariableDec
Rule 35    localDeclarations -> <empty>
Rule 36    paramId -> LETTER numOrLetter
Rule 37    paramId -> LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET
Rule 38    statement -> phrase
Rule 39    statement -> compoundPhrase
Rule 40    statement -> selectPhrase
Rule 41    statement -> iterationPhrase
Rule 42    statement -> returnPhrase
Rule 43    statement -> continue
Rule 44    compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE
Rule 45    statementList -> statementList statement
Rule 46    statementList -> <empty>
Rule 47    phrase -> allExpression SEMICOLON
Rule 48    phrase -> SEMICOLON
Rule 49    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
Rule 50    selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
Rule 51    ifBody -> statement
Rule 52    ifBody -> statement OTHER_KW statement
Rule 53    ifBody -> SEMICOLON
Rule 54    iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
Rule 55    returnPhrase -> COMEBACK_KW SEMICOLON
Rule 56    returnPhrase -> GIVEBACK_KW allExpression SEMICOLON
Rule 57    returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON
Rule 58    continue -> CONTINUE_KW SEMICOLON
Rule 59    allExpression -> alterable mathOp allExpression
Rule 60    allExpression -> alterable PP_OP
Rule 61    allExpression -> alterable MM_OP
Rule 62    allExpression -> eachExpression
Rule 63    allExpression -> alterable mathOp alterable
Rule 64    mathOp -> EQ_OP
Rule 65    mathOp -> PLE_OP
Rule 66    mathOp -> MIE_OP
Rule 67    mathOp -> MUE_OP
Rule 68    mathOp -> DIE_OP
Rule 69    eachExpression -> eachExpression logicOp eachExpression
Rule 70    eachExpression -> eachExpression logicOp THEN_KW eachExpression
Rule 71    eachExpression -> logicOp eachExpression
Rule 72    eachExpression -> relExpression
Rule 73    eachExpression -> eachExpression logicOp ELSE_KW eachExpression
Rule 74    relExpression -> mathEXP compareType mathEXP
Rule 75    relExpression -> mathEXP
Rule 76    compareType -> equal
Rule 77    compareType -> nonEQ_OP
Rule 78    equal -> LE_REL
Rule 79    equal -> GE_REL
Rule 80    equal -> EQ_REL
Rule 81    nonEQ_OP -> GT_REL
Rule 82    nonEQ_OP -> LT_REL
Rule 83    nonEQ_OP -> NEQ_REL
Rule 84    mathEXP -> mathEXP op mathEXP
Rule 85    mathEXP -> unaryExpression
Rule 86    op -> PL_OP
Rule 87    op -> MI_OP
Rule 88    op -> MU_OP
Rule 89    op -> DI_OP
Rule 90    op -> PE_OP
Rule 91    unaryExpression -> unaryop unaryExpression
Rule 92    unaryExpression -> factor
Rule 93    unaryop -> MI_OP
Rule 94    unaryop -> MU_OP
Rule 95    unaryop -> QU_UOP
Rule 96    factor -> inalterable
Rule 97    factor -> alterable
Rule 98    alterable -> LETTER numOrLetter
Rule 99    alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET
Rule 100   alterable -> alterable LETTER numOrLetter
Rule 101   inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
Rule 102   inalterable -> constant
Rule 103   inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
Rule 104   args -> arguments
Rule 105   args -> <empty>
Rule 106   arguments -> arguments COMA allExpression
Rule 107   arguments -> allExpression
Rule 108   constant -> CONST_KW
Rule 109   constant -> TRUE
Rule 110   constant -> FALSE
Rule 111   logicOp -> AA_LOP
Rule 112   logicOp -> OO_LOP
Rule 113   logicOp -> TIL_LOP
Rule 114   logicOp -> AND_LOP
Rule 115   logicOp -> OR_LOP

Terminals, with rules where they appear

AA_LOP               : 111
AND_LOP              : 114
BOOLEAN_KW           : 19
BOOL_KW              : 23
CHARACTER_KW         : 20
CHAR_KW              : 22
CLOSING_BRACE        : 44 50
CLOSING_BRACKET      : 15 25 37 99
CLOSING_PARENTHESES  : 14 25 26 49 50 54 101 103
COLON                : 14
COMA                 : 11 32 106
COMEBACK_KW          : 55
COMMENT              : 
CONST_KW             : 108
CONTINUE_KW          : 58
DIE_OP               : 68
DI_OP                : 89
ELSE_KW              : 73
EQ_OP                : 64
EQ_REL               : 80
FALSE                : 110
GE_REL               : 79
GIVEBACK_KW          : 56 57
GT_REL               : 81
IF_KW                : 49 50
INTEGER_KW           : 21
INT_KW               : 24
LETTER               : 3 15 16 26 36 37 98 100 103
LE_REL               : 78
LT_REL               : 82
MIE_OP               : 66
MI_OP                : 87 93
MM_OP                : 61
MUE_OP               : 67
MU_OP                : 88 94
NEQ_REL              : 83
NUMBER               : 2 15
OO_LOP               : 112
OPENING_BRACE        : 44 50
OPENING_BRACKET      : 15 25 37 99
OPENING_PARENTHESES  : 14 25 26 49 50 54 101 103
OR_LOP               : 115
OTHER_KW             : 52
PE_OP                : 90
PLE_OP               : 65
PL_OP                : 86
PP_OP                : 60
QU_UOP               : 95
SEMICOLON            : 9 10 29 47 48 53 55 56 57 58
STATIC_KW            : 17
THEN_KW              : 70
TILL_KW              : 54
TIL_LOP              : 113
TRUE                 : 109
VOID_KW              : 25
error                : 

Nonterminals, with rules where they appear

ScopedVariableDec    : 34
allExpression        : 47 56 59 99 101 106 107
alterable            : 59 60 61 63 63 97 99 100
args                 : 103
arguments            : 104 106
compareType          : 74
compoundPhrase       : 39
constant             : 102
continue             : 43
declaration          : 5 6
eachExpression       : 14 49 50 54 62 69 69 70 70 71 73 73
equal                : 76
factor               : 92
function             : 7
ifBody               : 49 50 50
inalterable          : 96
iterationPhrase      : 41
list                 : 1 5
listOfParameters     : 27 29
localDeclarations    : 34 44
logicOp              : 69 70 71 73
mathEXP              : 74 74 75 84 84
mathOp               : 59 63
nonEQ_OP             : 77
numOrLetter          : 15 16 25 26 36 37 57 98 100 103
op                   : 84
paramId              : 32 33
paramList            : 31 32
paramTypeList        : 29 30
parameter            : 25 26
phrase               : 38
program              : 0
relExpression        : 72
returnPhrase         : 42
scopedSpecifier      : 10
selectPhrase         : 40
statement            : 25 26 45 51 52 52 54
statementList        : 44 45
type                 : 9 17 18 26 31
unaryExpression      : 85 91
unaryop              : 91
varDeclaration       : 8
varForm              : 13 14
varInitialization    : 11 12
variableList         : 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (5) list -> . list declaration
    (6) list -> . declaration
    (7) declaration -> . function
    (8) declaration -> . varDeclaration
    (25) function -> . VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET
    (26) function -> . type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> . type variableList SEMICOLON
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    VOID_KW         shift and go to state 6
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    program                        shift and go to state 1
    list                           shift and go to state 2
    declaration                    shift and go to state 3
    function                       shift and go to state 4
    varDeclaration                 shift and go to state 5
    type                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> list .
    (5) list -> list . declaration
    (7) declaration -> . function
    (8) declaration -> . varDeclaration
    (25) function -> . VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET
    (26) function -> . type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> . type variableList SEMICOLON
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    $end            reduce using rule 1 (program -> list .)
    VOID_KW         shift and go to state 6
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    declaration                    shift and go to state 14
    function                       shift and go to state 4
    varDeclaration                 shift and go to state 5
    type                           shift and go to state 7

state 3

    (6) list -> declaration .

    VOID_KW         reduce using rule 6 (list -> declaration .)
    BOOLEAN_KW      reduce using rule 6 (list -> declaration .)
    CHARACTER_KW    reduce using rule 6 (list -> declaration .)
    INTEGER_KW      reduce using rule 6 (list -> declaration .)
    CHAR_KW         reduce using rule 6 (list -> declaration .)
    BOOL_KW         reduce using rule 6 (list -> declaration .)
    INT_KW          reduce using rule 6 (list -> declaration .)
    $end            reduce using rule 6 (list -> declaration .)


state 4

    (7) declaration -> function .

    VOID_KW         reduce using rule 7 (declaration -> function .)
    BOOLEAN_KW      reduce using rule 7 (declaration -> function .)
    CHARACTER_KW    reduce using rule 7 (declaration -> function .)
    INTEGER_KW      reduce using rule 7 (declaration -> function .)
    CHAR_KW         reduce using rule 7 (declaration -> function .)
    BOOL_KW         reduce using rule 7 (declaration -> function .)
    INT_KW          reduce using rule 7 (declaration -> function .)
    $end            reduce using rule 7 (declaration -> function .)


state 5

    (8) declaration -> varDeclaration .

    VOID_KW         reduce using rule 8 (declaration -> varDeclaration .)
    BOOLEAN_KW      reduce using rule 8 (declaration -> varDeclaration .)
    CHARACTER_KW    reduce using rule 8 (declaration -> varDeclaration .)
    INTEGER_KW      reduce using rule 8 (declaration -> varDeclaration .)
    CHAR_KW         reduce using rule 8 (declaration -> varDeclaration .)
    BOOL_KW         reduce using rule 8 (declaration -> varDeclaration .)
    INT_KW          reduce using rule 8 (declaration -> varDeclaration .)
    $end            reduce using rule 8 (declaration -> varDeclaration .)


state 6

    (25) function -> VOID_KW . numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_PARENTHESES reduce using rule 4 (numOrLetter -> .)

    numOrLetter                    shift and go to state 15

state 7

    (26) function -> type . LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (9) varDeclaration -> type . variableList SEMICOLON
    (11) variableList -> . variableList COMA varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> . LETTER numOrLetter

    LETTER          shift and go to state 18

    variableList                   shift and go to state 19
    varInitialization              shift and go to state 20
    varForm                        shift and go to state 21

state 8

    (19) type -> BOOLEAN_KW .

    LETTER          reduce using rule 19 (type -> BOOLEAN_KW .)


state 9

    (20) type -> CHARACTER_KW .

    LETTER          reduce using rule 20 (type -> CHARACTER_KW .)


state 10

    (21) type -> INTEGER_KW .

    LETTER          reduce using rule 21 (type -> INTEGER_KW .)


state 11

    (22) type -> CHAR_KW .

    LETTER          reduce using rule 22 (type -> CHAR_KW .)


state 12

    (23) type -> BOOL_KW .

    LETTER          reduce using rule 23 (type -> BOOL_KW .)


state 13

    (24) type -> INT_KW .

    LETTER          reduce using rule 24 (type -> INT_KW .)


state 14

    (5) list -> list declaration .

    VOID_KW         reduce using rule 5 (list -> list declaration .)
    BOOLEAN_KW      reduce using rule 5 (list -> list declaration .)
    CHARACTER_KW    reduce using rule 5 (list -> list declaration .)
    INTEGER_KW      reduce using rule 5 (list -> list declaration .)
    CHAR_KW         reduce using rule 5 (list -> list declaration .)
    BOOL_KW         reduce using rule 5 (list -> list declaration .)
    INT_KW          reduce using rule 5 (list -> list declaration .)
    $end            reduce using rule 5 (list -> list declaration .)


state 15

    (25) function -> VOID_KW numOrLetter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET

    OPENING_PARENTHESES shift and go to state 22


state 16

    (2) numOrLetter -> NUMBER .

    OPENING_PARENTHESES reduce using rule 2 (numOrLetter -> NUMBER .)
    OPENING_BRACKET reduce using rule 2 (numOrLetter -> NUMBER .)
    COLON           reduce using rule 2 (numOrLetter -> NUMBER .)
    SEMICOLON       reduce using rule 2 (numOrLetter -> NUMBER .)
    COMA            reduce using rule 2 (numOrLetter -> NUMBER .)
    CLOSING_PARENTHESES reduce using rule 2 (numOrLetter -> NUMBER .)
    LETTER          reduce using rule 2 (numOrLetter -> NUMBER .)
    PL_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    MI_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    MU_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    DI_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    PE_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    LE_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    GE_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    EQ_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    GT_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    LT_REL          reduce using rule 2 (numOrLetter -> NUMBER .)
    NEQ_REL         reduce using rule 2 (numOrLetter -> NUMBER .)
    AA_LOP          reduce using rule 2 (numOrLetter -> NUMBER .)
    OO_LOP          reduce using rule 2 (numOrLetter -> NUMBER .)
    TIL_LOP         reduce using rule 2 (numOrLetter -> NUMBER .)
    AND_LOP         reduce using rule 2 (numOrLetter -> NUMBER .)
    OR_LOP          reduce using rule 2 (numOrLetter -> NUMBER .)
    CLOSING_BRACKET reduce using rule 2 (numOrLetter -> NUMBER .)
    PP_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    MM_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    EQ_OP           reduce using rule 2 (numOrLetter -> NUMBER .)
    PLE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    MIE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    MUE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)
    DIE_OP          reduce using rule 2 (numOrLetter -> NUMBER .)


state 17

    (3) numOrLetter -> LETTER .

    OPENING_PARENTHESES reduce using rule 3 (numOrLetter -> LETTER .)
    OPENING_BRACKET reduce using rule 3 (numOrLetter -> LETTER .)
    COLON           reduce using rule 3 (numOrLetter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrLetter -> LETTER .)
    COMA            reduce using rule 3 (numOrLetter -> LETTER .)
    CLOSING_PARENTHESES reduce using rule 3 (numOrLetter -> LETTER .)
    LETTER          reduce using rule 3 (numOrLetter -> LETTER .)
    PL_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MI_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MU_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    DI_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    PE_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    LE_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    GE_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    EQ_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    GT_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    LT_REL          reduce using rule 3 (numOrLetter -> LETTER .)
    NEQ_REL         reduce using rule 3 (numOrLetter -> LETTER .)
    AA_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    OO_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    TIL_LOP         reduce using rule 3 (numOrLetter -> LETTER .)
    AND_LOP         reduce using rule 3 (numOrLetter -> LETTER .)
    OR_LOP          reduce using rule 3 (numOrLetter -> LETTER .)
    CLOSING_BRACKET reduce using rule 3 (numOrLetter -> LETTER .)
    PP_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    MM_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    EQ_OP           reduce using rule 3 (numOrLetter -> LETTER .)
    PLE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    MIE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    MUE_OP          reduce using rule 3 (numOrLetter -> LETTER .)
    DIE_OP          reduce using rule 3 (numOrLetter -> LETTER .)


state 18

    (26) function -> type LETTER . numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (15) varForm -> LETTER . numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> LETTER . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    COLON           reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

    numOrLetter                    shift and go to state 23

state 19

    (9) varDeclaration -> type variableList . SEMICOLON
    (11) variableList -> variableList . COMA varInitialization

    SEMICOLON       shift and go to state 24
    COMA            shift and go to state 25


state 20

    (12) variableList -> varInitialization .

    SEMICOLON       reduce using rule 12 (variableList -> varInitialization .)
    COMA            reduce using rule 12 (variableList -> varInitialization .)


state 21

    (13) varInitialization -> varForm .
    (14) varInitialization -> varForm . COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    SEMICOLON       reduce using rule 13 (varInitialization -> varForm .)
    COMA            reduce using rule 13 (varInitialization -> varForm .)
    COLON           shift and go to state 26


state 22

    (25) function -> VOID_KW numOrLetter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET
    (27) parameter -> . listOfParameters
    (28) parameter -> .
    (29) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (30) listOfParameters -> . paramTypeList
    (31) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> .)
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    parameter                      shift and go to state 27
    listOfParameters               shift and go to state 28
    paramTypeList                  shift and go to state 29
    type                           shift and go to state 30

state 23

    (26) function -> type LETTER numOrLetter . OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement
    (15) varForm -> LETTER numOrLetter . OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> LETTER numOrLetter .

    OPENING_PARENTHESES shift and go to state 31
    OPENING_BRACKET shift and go to state 32
    COLON           reduce using rule 16 (varForm -> LETTER numOrLetter .)
    SEMICOLON       reduce using rule 16 (varForm -> LETTER numOrLetter .)
    COMA            reduce using rule 16 (varForm -> LETTER numOrLetter .)


state 24

    (9) varDeclaration -> type variableList SEMICOLON .

    VOID_KW         reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    CHAR_KW         reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    BOOL_KW         reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    INT_KW          reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)
    $end            reduce using rule 9 (varDeclaration -> type variableList SEMICOLON .)


state 25

    (11) variableList -> variableList COMA . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> . LETTER numOrLetter

    LETTER          shift and go to state 34

    varInitialization              shift and go to state 33
    varForm                        shift and go to state 21

state 26

    (14) varInitialization -> varForm COLON . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 35


state 27

    (25) function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET

    CLOSING_PARENTHESES shift and go to state 36


state 28

    (27) parameter -> listOfParameters .
    (29) listOfParameters -> listOfParameters . SEMICOLON paramTypeList

    CLOSING_PARENTHESES reduce using rule 27 (parameter -> listOfParameters .)
    SEMICOLON       shift and go to state 37


state 29

    (30) listOfParameters -> paramTypeList .

    SEMICOLON       reduce using rule 30 (listOfParameters -> paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 30 (listOfParameters -> paramTypeList .)


state 30

    (31) paramTypeList -> type . paramList
    (32) paramList -> . paramList COMA paramId
    (33) paramList -> . paramId
    (36) paramId -> . LETTER numOrLetter
    (37) paramId -> . LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 40

    paramList                      shift and go to state 38
    paramId                        shift and go to state 39

state 31

    (26) function -> type LETTER numOrLetter OPENING_PARENTHESES . parameter CLOSING_PARENTHESES statement
    (27) parameter -> . listOfParameters
    (28) parameter -> .
    (29) listOfParameters -> . listOfParameters SEMICOLON paramTypeList
    (30) listOfParameters -> . paramTypeList
    (31) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_PARENTHESES reduce using rule 28 (parameter -> .)
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    type                           shift and go to state 30
    parameter                      shift and go to state 41
    listOfParameters               shift and go to state 28
    paramTypeList                  shift and go to state 29

state 32

    (15) varForm -> LETTER numOrLetter OPENING_BRACKET . NUMBER CLOSING_BRACKET

    NUMBER          shift and go to state 42


state 33

    (11) variableList -> variableList COMA varInitialization .

    SEMICOLON       reduce using rule 11 (variableList -> variableList COMA varInitialization .)
    COMA            reduce using rule 11 (variableList -> variableList COMA varInitialization .)


state 34

    (15) varForm -> LETTER . numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> LETTER . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    COLON           reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

    numOrLetter                    shift and go to state 43

state 35

    (14) varInitialization -> varForm COLON OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 45
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 36

    (25) function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . OPENING_BRACKET statement CLOSING_BRACKET

    OPENING_BRACKET shift and go to state 67


state 37

    (29) listOfParameters -> listOfParameters SEMICOLON . paramTypeList
    (31) paramTypeList -> . type paramList
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    paramTypeList                  shift and go to state 68
    type                           shift and go to state 30

state 38

    (31) paramTypeList -> type paramList .
    (32) paramList -> paramList . COMA paramId

    SEMICOLON       reduce using rule 31 (paramTypeList -> type paramList .)
    CLOSING_PARENTHESES reduce using rule 31 (paramTypeList -> type paramList .)
    COMA            shift and go to state 69


state 39

    (33) paramList -> paramId .

    COMA            reduce using rule 33 (paramList -> paramId .)
    SEMICOLON       reduce using rule 33 (paramList -> paramId .)
    CLOSING_PARENTHESES reduce using rule 33 (paramList -> paramId .)


state 40

    (36) paramId -> LETTER . numOrLetter
    (37) paramId -> LETTER . numOrLetter OPENING_BRACKET CLOSING_BRACKET
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)

    numOrLetter                    shift and go to state 70

state 41

    (26) function -> type LETTER numOrLetter OPENING_PARENTHESES parameter . CLOSING_PARENTHESES statement

    CLOSING_PARENTHESES shift and go to state 71


state 42

    (15) varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 72


state 43

    (15) varForm -> LETTER numOrLetter . OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> LETTER numOrLetter .

    OPENING_BRACKET shift and go to state 32
    COLON           reduce using rule 16 (varForm -> LETTER numOrLetter .)
    SEMICOLON       reduce using rule 16 (varForm -> LETTER numOrLetter .)
    COMA            reduce using rule 16 (varForm -> LETTER numOrLetter .)


state 44

    (101) inalterable -> OPENING_PARENTHESES . allExpression CLOSING_PARENTHESES
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    allExpression                  shift and go to state 73
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 45

    (14) varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 77
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

    logicOp                        shift and go to state 78

state 46

    (71) eachExpression -> logicOp . eachExpression
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    logicOp                        shift and go to state 46
    eachExpression                 shift and go to state 79
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 47

    (72) eachExpression -> relExpression .

    CLOSING_PARENTHESES reduce using rule 72 (eachExpression -> relExpression .)
    AA_LOP          reduce using rule 72 (eachExpression -> relExpression .)
    OO_LOP          reduce using rule 72 (eachExpression -> relExpression .)
    TIL_LOP         reduce using rule 72 (eachExpression -> relExpression .)
    AND_LOP         reduce using rule 72 (eachExpression -> relExpression .)
    OR_LOP          reduce using rule 72 (eachExpression -> relExpression .)
    SEMICOLON       reduce using rule 72 (eachExpression -> relExpression .)
    CLOSING_BRACKET reduce using rule 72 (eachExpression -> relExpression .)
    COMA            reduce using rule 72 (eachExpression -> relExpression .)


state 48

    (111) logicOp -> AA_LOP .

    AA_LOP          reduce using rule 111 (logicOp -> AA_LOP .)
    OO_LOP          reduce using rule 111 (logicOp -> AA_LOP .)
    TIL_LOP         reduce using rule 111 (logicOp -> AA_LOP .)
    AND_LOP         reduce using rule 111 (logicOp -> AA_LOP .)
    OR_LOP          reduce using rule 111 (logicOp -> AA_LOP .)
    MI_OP           reduce using rule 111 (logicOp -> AA_LOP .)
    MU_OP           reduce using rule 111 (logicOp -> AA_LOP .)
    QU_UOP          reduce using rule 111 (logicOp -> AA_LOP .)
    OPENING_PARENTHESES reduce using rule 111 (logicOp -> AA_LOP .)
    LETTER          reduce using rule 111 (logicOp -> AA_LOP .)
    CONST_KW        reduce using rule 111 (logicOp -> AA_LOP .)
    TRUE            reduce using rule 111 (logicOp -> AA_LOP .)
    FALSE           reduce using rule 111 (logicOp -> AA_LOP .)
    THEN_KW         reduce using rule 111 (logicOp -> AA_LOP .)
    ELSE_KW         reduce using rule 111 (logicOp -> AA_LOP .)


state 49

    (112) logicOp -> OO_LOP .

    AA_LOP          reduce using rule 112 (logicOp -> OO_LOP .)
    OO_LOP          reduce using rule 112 (logicOp -> OO_LOP .)
    TIL_LOP         reduce using rule 112 (logicOp -> OO_LOP .)
    AND_LOP         reduce using rule 112 (logicOp -> OO_LOP .)
    OR_LOP          reduce using rule 112 (logicOp -> OO_LOP .)
    MI_OP           reduce using rule 112 (logicOp -> OO_LOP .)
    MU_OP           reduce using rule 112 (logicOp -> OO_LOP .)
    QU_UOP          reduce using rule 112 (logicOp -> OO_LOP .)
    OPENING_PARENTHESES reduce using rule 112 (logicOp -> OO_LOP .)
    LETTER          reduce using rule 112 (logicOp -> OO_LOP .)
    CONST_KW        reduce using rule 112 (logicOp -> OO_LOP .)
    TRUE            reduce using rule 112 (logicOp -> OO_LOP .)
    FALSE           reduce using rule 112 (logicOp -> OO_LOP .)
    THEN_KW         reduce using rule 112 (logicOp -> OO_LOP .)
    ELSE_KW         reduce using rule 112 (logicOp -> OO_LOP .)


state 50

    (113) logicOp -> TIL_LOP .

    AA_LOP          reduce using rule 113 (logicOp -> TIL_LOP .)
    OO_LOP          reduce using rule 113 (logicOp -> TIL_LOP .)
    TIL_LOP         reduce using rule 113 (logicOp -> TIL_LOP .)
    AND_LOP         reduce using rule 113 (logicOp -> TIL_LOP .)
    OR_LOP          reduce using rule 113 (logicOp -> TIL_LOP .)
    MI_OP           reduce using rule 113 (logicOp -> TIL_LOP .)
    MU_OP           reduce using rule 113 (logicOp -> TIL_LOP .)
    QU_UOP          reduce using rule 113 (logicOp -> TIL_LOP .)
    OPENING_PARENTHESES reduce using rule 113 (logicOp -> TIL_LOP .)
    LETTER          reduce using rule 113 (logicOp -> TIL_LOP .)
    CONST_KW        reduce using rule 113 (logicOp -> TIL_LOP .)
    TRUE            reduce using rule 113 (logicOp -> TIL_LOP .)
    FALSE           reduce using rule 113 (logicOp -> TIL_LOP .)
    THEN_KW         reduce using rule 113 (logicOp -> TIL_LOP .)
    ELSE_KW         reduce using rule 113 (logicOp -> TIL_LOP .)


state 51

    (114) logicOp -> AND_LOP .

    AA_LOP          reduce using rule 114 (logicOp -> AND_LOP .)
    OO_LOP          reduce using rule 114 (logicOp -> AND_LOP .)
    TIL_LOP         reduce using rule 114 (logicOp -> AND_LOP .)
    AND_LOP         reduce using rule 114 (logicOp -> AND_LOP .)
    OR_LOP          reduce using rule 114 (logicOp -> AND_LOP .)
    MI_OP           reduce using rule 114 (logicOp -> AND_LOP .)
    MU_OP           reduce using rule 114 (logicOp -> AND_LOP .)
    QU_UOP          reduce using rule 114 (logicOp -> AND_LOP .)
    OPENING_PARENTHESES reduce using rule 114 (logicOp -> AND_LOP .)
    LETTER          reduce using rule 114 (logicOp -> AND_LOP .)
    CONST_KW        reduce using rule 114 (logicOp -> AND_LOP .)
    TRUE            reduce using rule 114 (logicOp -> AND_LOP .)
    FALSE           reduce using rule 114 (logicOp -> AND_LOP .)
    THEN_KW         reduce using rule 114 (logicOp -> AND_LOP .)
    ELSE_KW         reduce using rule 114 (logicOp -> AND_LOP .)


state 52

    (115) logicOp -> OR_LOP .

    AA_LOP          reduce using rule 115 (logicOp -> OR_LOP .)
    OO_LOP          reduce using rule 115 (logicOp -> OR_LOP .)
    TIL_LOP         reduce using rule 115 (logicOp -> OR_LOP .)
    AND_LOP         reduce using rule 115 (logicOp -> OR_LOP .)
    OR_LOP          reduce using rule 115 (logicOp -> OR_LOP .)
    MI_OP           reduce using rule 115 (logicOp -> OR_LOP .)
    MU_OP           reduce using rule 115 (logicOp -> OR_LOP .)
    QU_UOP          reduce using rule 115 (logicOp -> OR_LOP .)
    OPENING_PARENTHESES reduce using rule 115 (logicOp -> OR_LOP .)
    LETTER          reduce using rule 115 (logicOp -> OR_LOP .)
    CONST_KW        reduce using rule 115 (logicOp -> OR_LOP .)
    TRUE            reduce using rule 115 (logicOp -> OR_LOP .)
    FALSE           reduce using rule 115 (logicOp -> OR_LOP .)
    THEN_KW         reduce using rule 115 (logicOp -> OR_LOP .)
    ELSE_KW         reduce using rule 115 (logicOp -> OR_LOP .)


state 53

    (74) relExpression -> mathEXP . compareType mathEXP
    (75) relExpression -> mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (76) compareType -> . equal
    (77) compareType -> . nonEQ_OP
    (86) op -> . PL_OP
    (87) op -> . MI_OP
    (88) op -> . MU_OP
    (89) op -> . DI_OP
    (90) op -> . PE_OP
    (78) equal -> . LE_REL
    (79) equal -> . GE_REL
    (80) equal -> . EQ_REL
    (81) nonEQ_OP -> . GT_REL
    (82) nonEQ_OP -> . LT_REL
    (83) nonEQ_OP -> . NEQ_REL

    CLOSING_PARENTHESES reduce using rule 75 (relExpression -> mathEXP .)
    AA_LOP          reduce using rule 75 (relExpression -> mathEXP .)
    OO_LOP          reduce using rule 75 (relExpression -> mathEXP .)
    TIL_LOP         reduce using rule 75 (relExpression -> mathEXP .)
    AND_LOP         reduce using rule 75 (relExpression -> mathEXP .)
    OR_LOP          reduce using rule 75 (relExpression -> mathEXP .)
    SEMICOLON       reduce using rule 75 (relExpression -> mathEXP .)
    CLOSING_BRACKET reduce using rule 75 (relExpression -> mathEXP .)
    COMA            reduce using rule 75 (relExpression -> mathEXP .)
    PL_OP           shift and go to state 84
    MI_OP           shift and go to state 85
    MU_OP           shift and go to state 86
    DI_OP           shift and go to state 87
    PE_OP           shift and go to state 88
    LE_REL          shift and go to state 89
    GE_REL          shift and go to state 90
    EQ_REL          shift and go to state 91
    GT_REL          shift and go to state 92
    LT_REL          shift and go to state 93
    NEQ_REL         shift and go to state 94

    compareType                    shift and go to state 80
    op                             shift and go to state 81
    equal                          shift and go to state 82
    nonEQ_OP                       shift and go to state 83

state 54

    (85) mathEXP -> unaryExpression .

    PL_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    MI_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    MU_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    DI_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    PE_OP           reduce using rule 85 (mathEXP -> unaryExpression .)
    LE_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    GE_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    EQ_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    GT_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    LT_REL          reduce using rule 85 (mathEXP -> unaryExpression .)
    NEQ_REL         reduce using rule 85 (mathEXP -> unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 85 (mathEXP -> unaryExpression .)
    AA_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    OO_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    TIL_LOP         reduce using rule 85 (mathEXP -> unaryExpression .)
    AND_LOP         reduce using rule 85 (mathEXP -> unaryExpression .)
    OR_LOP          reduce using rule 85 (mathEXP -> unaryExpression .)
    SEMICOLON       reduce using rule 85 (mathEXP -> unaryExpression .)
    CLOSING_BRACKET reduce using rule 85 (mathEXP -> unaryExpression .)
    COMA            reduce using rule 85 (mathEXP -> unaryExpression .)


state 55

    (91) unaryExpression -> unaryop . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    unaryop                        shift and go to state 55
    unaryExpression                shift and go to state 95
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 56

    (92) unaryExpression -> factor .

    PL_OP           reduce using rule 92 (unaryExpression -> factor .)
    MI_OP           reduce using rule 92 (unaryExpression -> factor .)
    MU_OP           reduce using rule 92 (unaryExpression -> factor .)
    DI_OP           reduce using rule 92 (unaryExpression -> factor .)
    PE_OP           reduce using rule 92 (unaryExpression -> factor .)
    LE_REL          reduce using rule 92 (unaryExpression -> factor .)
    GE_REL          reduce using rule 92 (unaryExpression -> factor .)
    EQ_REL          reduce using rule 92 (unaryExpression -> factor .)
    GT_REL          reduce using rule 92 (unaryExpression -> factor .)
    LT_REL          reduce using rule 92 (unaryExpression -> factor .)
    NEQ_REL         reduce using rule 92 (unaryExpression -> factor .)
    CLOSING_PARENTHESES reduce using rule 92 (unaryExpression -> factor .)
    AA_LOP          reduce using rule 92 (unaryExpression -> factor .)
    OO_LOP          reduce using rule 92 (unaryExpression -> factor .)
    TIL_LOP         reduce using rule 92 (unaryExpression -> factor .)
    AND_LOP         reduce using rule 92 (unaryExpression -> factor .)
    OR_LOP          reduce using rule 92 (unaryExpression -> factor .)
    SEMICOLON       reduce using rule 92 (unaryExpression -> factor .)
    CLOSING_BRACKET reduce using rule 92 (unaryExpression -> factor .)
    COMA            reduce using rule 92 (unaryExpression -> factor .)


state 57

    (93) unaryop -> MI_OP .

    MI_OP           reduce using rule 93 (unaryop -> MI_OP .)
    MU_OP           reduce using rule 93 (unaryop -> MI_OP .)
    QU_UOP          reduce using rule 93 (unaryop -> MI_OP .)
    OPENING_PARENTHESES reduce using rule 93 (unaryop -> MI_OP .)
    LETTER          reduce using rule 93 (unaryop -> MI_OP .)
    CONST_KW        reduce using rule 93 (unaryop -> MI_OP .)
    TRUE            reduce using rule 93 (unaryop -> MI_OP .)
    FALSE           reduce using rule 93 (unaryop -> MI_OP .)


state 58

    (94) unaryop -> MU_OP .

    MI_OP           reduce using rule 94 (unaryop -> MU_OP .)
    MU_OP           reduce using rule 94 (unaryop -> MU_OP .)
    QU_UOP          reduce using rule 94 (unaryop -> MU_OP .)
    OPENING_PARENTHESES reduce using rule 94 (unaryop -> MU_OP .)
    LETTER          reduce using rule 94 (unaryop -> MU_OP .)
    CONST_KW        reduce using rule 94 (unaryop -> MU_OP .)
    TRUE            reduce using rule 94 (unaryop -> MU_OP .)
    FALSE           reduce using rule 94 (unaryop -> MU_OP .)


state 59

    (95) unaryop -> QU_UOP .

    MI_OP           reduce using rule 95 (unaryop -> QU_UOP .)
    MU_OP           reduce using rule 95 (unaryop -> QU_UOP .)
    QU_UOP          reduce using rule 95 (unaryop -> QU_UOP .)
    OPENING_PARENTHESES reduce using rule 95 (unaryop -> QU_UOP .)
    LETTER          reduce using rule 95 (unaryop -> QU_UOP .)
    CONST_KW        reduce using rule 95 (unaryop -> QU_UOP .)
    TRUE            reduce using rule 95 (unaryop -> QU_UOP .)
    FALSE           reduce using rule 95 (unaryop -> QU_UOP .)


state 60

    (96) factor -> inalterable .

    PL_OP           reduce using rule 96 (factor -> inalterable .)
    MI_OP           reduce using rule 96 (factor -> inalterable .)
    MU_OP           reduce using rule 96 (factor -> inalterable .)
    DI_OP           reduce using rule 96 (factor -> inalterable .)
    PE_OP           reduce using rule 96 (factor -> inalterable .)
    LE_REL          reduce using rule 96 (factor -> inalterable .)
    GE_REL          reduce using rule 96 (factor -> inalterable .)
    EQ_REL          reduce using rule 96 (factor -> inalterable .)
    GT_REL          reduce using rule 96 (factor -> inalterable .)
    LT_REL          reduce using rule 96 (factor -> inalterable .)
    NEQ_REL         reduce using rule 96 (factor -> inalterable .)
    CLOSING_PARENTHESES reduce using rule 96 (factor -> inalterable .)
    AA_LOP          reduce using rule 96 (factor -> inalterable .)
    OO_LOP          reduce using rule 96 (factor -> inalterable .)
    TIL_LOP         reduce using rule 96 (factor -> inalterable .)
    AND_LOP         reduce using rule 96 (factor -> inalterable .)
    OR_LOP          reduce using rule 96 (factor -> inalterable .)
    SEMICOLON       reduce using rule 96 (factor -> inalterable .)
    CLOSING_BRACKET reduce using rule 96 (factor -> inalterable .)
    COMA            reduce using rule 96 (factor -> inalterable .)


state 61

    (97) factor -> alterable .
    (99) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> alterable . LETTER numOrLetter

    PL_OP           reduce using rule 97 (factor -> alterable .)
    MI_OP           reduce using rule 97 (factor -> alterable .)
    MU_OP           reduce using rule 97 (factor -> alterable .)
    DI_OP           reduce using rule 97 (factor -> alterable .)
    PE_OP           reduce using rule 97 (factor -> alterable .)
    LE_REL          reduce using rule 97 (factor -> alterable .)
    GE_REL          reduce using rule 97 (factor -> alterable .)
    EQ_REL          reduce using rule 97 (factor -> alterable .)
    GT_REL          reduce using rule 97 (factor -> alterable .)
    LT_REL          reduce using rule 97 (factor -> alterable .)
    NEQ_REL         reduce using rule 97 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 97 (factor -> alterable .)
    AA_LOP          reduce using rule 97 (factor -> alterable .)
    OO_LOP          reduce using rule 97 (factor -> alterable .)
    TIL_LOP         reduce using rule 97 (factor -> alterable .)
    AND_LOP         reduce using rule 97 (factor -> alterable .)
    OR_LOP          reduce using rule 97 (factor -> alterable .)
    SEMICOLON       reduce using rule 97 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 97 (factor -> alterable .)
    COMA            reduce using rule 97 (factor -> alterable .)
    OPENING_BRACKET shift and go to state 96
    LETTER          shift and go to state 97


state 62

    (102) inalterable -> constant .

    PL_OP           reduce using rule 102 (inalterable -> constant .)
    MI_OP           reduce using rule 102 (inalterable -> constant .)
    MU_OP           reduce using rule 102 (inalterable -> constant .)
    DI_OP           reduce using rule 102 (inalterable -> constant .)
    PE_OP           reduce using rule 102 (inalterable -> constant .)
    LE_REL          reduce using rule 102 (inalterable -> constant .)
    GE_REL          reduce using rule 102 (inalterable -> constant .)
    EQ_REL          reduce using rule 102 (inalterable -> constant .)
    GT_REL          reduce using rule 102 (inalterable -> constant .)
    LT_REL          reduce using rule 102 (inalterable -> constant .)
    NEQ_REL         reduce using rule 102 (inalterable -> constant .)
    CLOSING_PARENTHESES reduce using rule 102 (inalterable -> constant .)
    AA_LOP          reduce using rule 102 (inalterable -> constant .)
    OO_LOP          reduce using rule 102 (inalterable -> constant .)
    TIL_LOP         reduce using rule 102 (inalterable -> constant .)
    AND_LOP         reduce using rule 102 (inalterable -> constant .)
    OR_LOP          reduce using rule 102 (inalterable -> constant .)
    SEMICOLON       reduce using rule 102 (inalterable -> constant .)
    CLOSING_BRACKET reduce using rule 102 (inalterable -> constant .)
    COMA            reduce using rule 102 (inalterable -> constant .)


state 63

    (103) inalterable -> LETTER . numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> LETTER . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    MI_OP           reduce using rule 4 (numOrLetter -> .)
    MU_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 98

state 64

    (108) constant -> CONST_KW .

    PL_OP           reduce using rule 108 (constant -> CONST_KW .)
    MI_OP           reduce using rule 108 (constant -> CONST_KW .)
    MU_OP           reduce using rule 108 (constant -> CONST_KW .)
    DI_OP           reduce using rule 108 (constant -> CONST_KW .)
    PE_OP           reduce using rule 108 (constant -> CONST_KW .)
    LE_REL          reduce using rule 108 (constant -> CONST_KW .)
    GE_REL          reduce using rule 108 (constant -> CONST_KW .)
    EQ_REL          reduce using rule 108 (constant -> CONST_KW .)
    GT_REL          reduce using rule 108 (constant -> CONST_KW .)
    LT_REL          reduce using rule 108 (constant -> CONST_KW .)
    NEQ_REL         reduce using rule 108 (constant -> CONST_KW .)
    CLOSING_PARENTHESES reduce using rule 108 (constant -> CONST_KW .)
    AA_LOP          reduce using rule 108 (constant -> CONST_KW .)
    OO_LOP          reduce using rule 108 (constant -> CONST_KW .)
    TIL_LOP         reduce using rule 108 (constant -> CONST_KW .)
    AND_LOP         reduce using rule 108 (constant -> CONST_KW .)
    OR_LOP          reduce using rule 108 (constant -> CONST_KW .)
    SEMICOLON       reduce using rule 108 (constant -> CONST_KW .)
    CLOSING_BRACKET reduce using rule 108 (constant -> CONST_KW .)
    COMA            reduce using rule 108 (constant -> CONST_KW .)


state 65

    (109) constant -> TRUE .

    PL_OP           reduce using rule 109 (constant -> TRUE .)
    MI_OP           reduce using rule 109 (constant -> TRUE .)
    MU_OP           reduce using rule 109 (constant -> TRUE .)
    DI_OP           reduce using rule 109 (constant -> TRUE .)
    PE_OP           reduce using rule 109 (constant -> TRUE .)
    LE_REL          reduce using rule 109 (constant -> TRUE .)
    GE_REL          reduce using rule 109 (constant -> TRUE .)
    EQ_REL          reduce using rule 109 (constant -> TRUE .)
    GT_REL          reduce using rule 109 (constant -> TRUE .)
    LT_REL          reduce using rule 109 (constant -> TRUE .)
    NEQ_REL         reduce using rule 109 (constant -> TRUE .)
    CLOSING_PARENTHESES reduce using rule 109 (constant -> TRUE .)
    AA_LOP          reduce using rule 109 (constant -> TRUE .)
    OO_LOP          reduce using rule 109 (constant -> TRUE .)
    TIL_LOP         reduce using rule 109 (constant -> TRUE .)
    AND_LOP         reduce using rule 109 (constant -> TRUE .)
    OR_LOP          reduce using rule 109 (constant -> TRUE .)
    SEMICOLON       reduce using rule 109 (constant -> TRUE .)
    CLOSING_BRACKET reduce using rule 109 (constant -> TRUE .)
    COMA            reduce using rule 109 (constant -> TRUE .)


state 66

    (110) constant -> FALSE .

    PL_OP           reduce using rule 110 (constant -> FALSE .)
    MI_OP           reduce using rule 110 (constant -> FALSE .)
    MU_OP           reduce using rule 110 (constant -> FALSE .)
    DI_OP           reduce using rule 110 (constant -> FALSE .)
    PE_OP           reduce using rule 110 (constant -> FALSE .)
    LE_REL          reduce using rule 110 (constant -> FALSE .)
    GE_REL          reduce using rule 110 (constant -> FALSE .)
    EQ_REL          reduce using rule 110 (constant -> FALSE .)
    GT_REL          reduce using rule 110 (constant -> FALSE .)
    LT_REL          reduce using rule 110 (constant -> FALSE .)
    NEQ_REL         reduce using rule 110 (constant -> FALSE .)
    CLOSING_PARENTHESES reduce using rule 110 (constant -> FALSE .)
    AA_LOP          reduce using rule 110 (constant -> FALSE .)
    OO_LOP          reduce using rule 110 (constant -> FALSE .)
    TIL_LOP         reduce using rule 110 (constant -> FALSE .)
    AND_LOP         reduce using rule 110 (constant -> FALSE .)
    OR_LOP          reduce using rule 110 (constant -> FALSE .)
    SEMICOLON       reduce using rule 110 (constant -> FALSE .)
    CLOSING_BRACKET reduce using rule 110 (constant -> FALSE .)
    COMA            reduce using rule 110 (constant -> FALSE .)


state 67

    (25) function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET . statement CLOSING_BRACKET
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    SEMICOLON       shift and go to state 107
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 99
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 68

    (29) listOfParameters -> listOfParameters SEMICOLON paramTypeList .

    SEMICOLON       reduce using rule 29 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)
    CLOSING_PARENTHESES reduce using rule 29 (listOfParameters -> listOfParameters SEMICOLON paramTypeList .)


state 69

    (32) paramList -> paramList COMA . paramId
    (36) paramId -> . LETTER numOrLetter
    (37) paramId -> . LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET

    LETTER          shift and go to state 40

    paramId                        shift and go to state 114

state 70

    (36) paramId -> LETTER numOrLetter .
    (37) paramId -> LETTER numOrLetter . OPENING_BRACKET CLOSING_BRACKET

    COMA            reduce using rule 36 (paramId -> LETTER numOrLetter .)
    SEMICOLON       reduce using rule 36 (paramId -> LETTER numOrLetter .)
    CLOSING_PARENTHESES reduce using rule 36 (paramId -> LETTER numOrLetter .)
    OPENING_BRACKET shift and go to state 115


state 71

    (26) function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    SEMICOLON       shift and go to state 107
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 116
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 72

    (15) varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET .

    COLON           reduce using rule 15 (varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 15 (varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET .)
    COMA            reduce using rule 15 (varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET .)


state 73

    (101) inalterable -> OPENING_PARENTHESES allExpression . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 117


state 74

    (59) allExpression -> alterable . mathOp allExpression
    (60) allExpression -> alterable . PP_OP
    (61) allExpression -> alterable . MM_OP
    (63) allExpression -> alterable . mathOp alterable
    (99) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> alterable . LETTER numOrLetter
    (97) factor -> alterable .
    (64) mathOp -> . EQ_OP
    (65) mathOp -> . PLE_OP
    (66) mathOp -> . MIE_OP
    (67) mathOp -> . MUE_OP
    (68) mathOp -> . DIE_OP

    PP_OP           shift and go to state 119
    MM_OP           shift and go to state 120
    OPENING_BRACKET shift and go to state 96
    LETTER          shift and go to state 97
    PL_OP           reduce using rule 97 (factor -> alterable .)
    MI_OP           reduce using rule 97 (factor -> alterable .)
    MU_OP           reduce using rule 97 (factor -> alterable .)
    DI_OP           reduce using rule 97 (factor -> alterable .)
    PE_OP           reduce using rule 97 (factor -> alterable .)
    LE_REL          reduce using rule 97 (factor -> alterable .)
    GE_REL          reduce using rule 97 (factor -> alterable .)
    EQ_REL          reduce using rule 97 (factor -> alterable .)
    GT_REL          reduce using rule 97 (factor -> alterable .)
    LT_REL          reduce using rule 97 (factor -> alterable .)
    NEQ_REL         reduce using rule 97 (factor -> alterable .)
    AA_LOP          reduce using rule 97 (factor -> alterable .)
    OO_LOP          reduce using rule 97 (factor -> alterable .)
    TIL_LOP         reduce using rule 97 (factor -> alterable .)
    AND_LOP         reduce using rule 97 (factor -> alterable .)
    OR_LOP          reduce using rule 97 (factor -> alterable .)
    CLOSING_PARENTHESES reduce using rule 97 (factor -> alterable .)
    SEMICOLON       reduce using rule 97 (factor -> alterable .)
    CLOSING_BRACKET reduce using rule 97 (factor -> alterable .)
    COMA            reduce using rule 97 (factor -> alterable .)
    EQ_OP           shift and go to state 121
    PLE_OP          shift and go to state 122
    MIE_OP          shift and go to state 123
    MUE_OP          shift and go to state 124
    DIE_OP          shift and go to state 125

    mathOp                         shift and go to state 118

state 75

    (62) allExpression -> eachExpression .
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

    CLOSING_PARENTHESES reduce using rule 62 (allExpression -> eachExpression .)
    SEMICOLON       reduce using rule 62 (allExpression -> eachExpression .)
    CLOSING_BRACKET reduce using rule 62 (allExpression -> eachExpression .)
    COMA            reduce using rule 62 (allExpression -> eachExpression .)
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

    logicOp                        shift and go to state 78

state 76

    (98) alterable -> LETTER . numOrLetter
    (103) inalterable -> LETTER . numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    MI_OP           reduce using rule 4 (numOrLetter -> .)
    MU_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 126

state 77

    (14) varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 14 (varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)
    COMA            reduce using rule 14 (varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES .)


state 78

    (69) eachExpression -> eachExpression logicOp . eachExpression
    (70) eachExpression -> eachExpression logicOp . THEN_KW eachExpression
    (73) eachExpression -> eachExpression logicOp . ELSE_KW eachExpression
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    THEN_KW         shift and go to state 128
    ELSE_KW         shift and go to state 129
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 127
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 79

    (71) eachExpression -> logicOp eachExpression .
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    CLOSING_PARENTHESES reduce using rule 71 (eachExpression -> logicOp eachExpression .)
    SEMICOLON       reduce using rule 71 (eachExpression -> logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 71 (eachExpression -> logicOp eachExpression .)
    COMA            reduce using rule 71 (eachExpression -> logicOp eachExpression .)
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

  ! AA_LOP          [ reduce using rule 71 (eachExpression -> logicOp eachExpression .) ]
  ! OO_LOP          [ reduce using rule 71 (eachExpression -> logicOp eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 71 (eachExpression -> logicOp eachExpression .) ]
  ! AND_LOP         [ reduce using rule 71 (eachExpression -> logicOp eachExpression .) ]
  ! OR_LOP          [ reduce using rule 71 (eachExpression -> logicOp eachExpression .) ]

    logicOp                        shift and go to state 78

state 80

    (74) relExpression -> mathEXP compareType . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    mathEXP                        shift and go to state 130
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 81

    (84) mathEXP -> mathEXP op . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    mathEXP                        shift and go to state 131
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 82

    (76) compareType -> equal .

    MI_OP           reduce using rule 76 (compareType -> equal .)
    MU_OP           reduce using rule 76 (compareType -> equal .)
    QU_UOP          reduce using rule 76 (compareType -> equal .)
    OPENING_PARENTHESES reduce using rule 76 (compareType -> equal .)
    LETTER          reduce using rule 76 (compareType -> equal .)
    CONST_KW        reduce using rule 76 (compareType -> equal .)
    TRUE            reduce using rule 76 (compareType -> equal .)
    FALSE           reduce using rule 76 (compareType -> equal .)


state 83

    (77) compareType -> nonEQ_OP .

    MI_OP           reduce using rule 77 (compareType -> nonEQ_OP .)
    MU_OP           reduce using rule 77 (compareType -> nonEQ_OP .)
    QU_UOP          reduce using rule 77 (compareType -> nonEQ_OP .)
    OPENING_PARENTHESES reduce using rule 77 (compareType -> nonEQ_OP .)
    LETTER          reduce using rule 77 (compareType -> nonEQ_OP .)
    CONST_KW        reduce using rule 77 (compareType -> nonEQ_OP .)
    TRUE            reduce using rule 77 (compareType -> nonEQ_OP .)
    FALSE           reduce using rule 77 (compareType -> nonEQ_OP .)


state 84

    (86) op -> PL_OP .

    MI_OP           reduce using rule 86 (op -> PL_OP .)
    MU_OP           reduce using rule 86 (op -> PL_OP .)
    QU_UOP          reduce using rule 86 (op -> PL_OP .)
    OPENING_PARENTHESES reduce using rule 86 (op -> PL_OP .)
    LETTER          reduce using rule 86 (op -> PL_OP .)
    CONST_KW        reduce using rule 86 (op -> PL_OP .)
    TRUE            reduce using rule 86 (op -> PL_OP .)
    FALSE           reduce using rule 86 (op -> PL_OP .)


state 85

    (87) op -> MI_OP .

    MI_OP           reduce using rule 87 (op -> MI_OP .)
    MU_OP           reduce using rule 87 (op -> MI_OP .)
    QU_UOP          reduce using rule 87 (op -> MI_OP .)
    OPENING_PARENTHESES reduce using rule 87 (op -> MI_OP .)
    LETTER          reduce using rule 87 (op -> MI_OP .)
    CONST_KW        reduce using rule 87 (op -> MI_OP .)
    TRUE            reduce using rule 87 (op -> MI_OP .)
    FALSE           reduce using rule 87 (op -> MI_OP .)


state 86

    (88) op -> MU_OP .

    MI_OP           reduce using rule 88 (op -> MU_OP .)
    MU_OP           reduce using rule 88 (op -> MU_OP .)
    QU_UOP          reduce using rule 88 (op -> MU_OP .)
    OPENING_PARENTHESES reduce using rule 88 (op -> MU_OP .)
    LETTER          reduce using rule 88 (op -> MU_OP .)
    CONST_KW        reduce using rule 88 (op -> MU_OP .)
    TRUE            reduce using rule 88 (op -> MU_OP .)
    FALSE           reduce using rule 88 (op -> MU_OP .)


state 87

    (89) op -> DI_OP .

    MI_OP           reduce using rule 89 (op -> DI_OP .)
    MU_OP           reduce using rule 89 (op -> DI_OP .)
    QU_UOP          reduce using rule 89 (op -> DI_OP .)
    OPENING_PARENTHESES reduce using rule 89 (op -> DI_OP .)
    LETTER          reduce using rule 89 (op -> DI_OP .)
    CONST_KW        reduce using rule 89 (op -> DI_OP .)
    TRUE            reduce using rule 89 (op -> DI_OP .)
    FALSE           reduce using rule 89 (op -> DI_OP .)


state 88

    (90) op -> PE_OP .

    MI_OP           reduce using rule 90 (op -> PE_OP .)
    MU_OP           reduce using rule 90 (op -> PE_OP .)
    QU_UOP          reduce using rule 90 (op -> PE_OP .)
    OPENING_PARENTHESES reduce using rule 90 (op -> PE_OP .)
    LETTER          reduce using rule 90 (op -> PE_OP .)
    CONST_KW        reduce using rule 90 (op -> PE_OP .)
    TRUE            reduce using rule 90 (op -> PE_OP .)
    FALSE           reduce using rule 90 (op -> PE_OP .)


state 89

    (78) equal -> LE_REL .

    MI_OP           reduce using rule 78 (equal -> LE_REL .)
    MU_OP           reduce using rule 78 (equal -> LE_REL .)
    QU_UOP          reduce using rule 78 (equal -> LE_REL .)
    OPENING_PARENTHESES reduce using rule 78 (equal -> LE_REL .)
    LETTER          reduce using rule 78 (equal -> LE_REL .)
    CONST_KW        reduce using rule 78 (equal -> LE_REL .)
    TRUE            reduce using rule 78 (equal -> LE_REL .)
    FALSE           reduce using rule 78 (equal -> LE_REL .)


state 90

    (79) equal -> GE_REL .

    MI_OP           reduce using rule 79 (equal -> GE_REL .)
    MU_OP           reduce using rule 79 (equal -> GE_REL .)
    QU_UOP          reduce using rule 79 (equal -> GE_REL .)
    OPENING_PARENTHESES reduce using rule 79 (equal -> GE_REL .)
    LETTER          reduce using rule 79 (equal -> GE_REL .)
    CONST_KW        reduce using rule 79 (equal -> GE_REL .)
    TRUE            reduce using rule 79 (equal -> GE_REL .)
    FALSE           reduce using rule 79 (equal -> GE_REL .)


state 91

    (80) equal -> EQ_REL .

    MI_OP           reduce using rule 80 (equal -> EQ_REL .)
    MU_OP           reduce using rule 80 (equal -> EQ_REL .)
    QU_UOP          reduce using rule 80 (equal -> EQ_REL .)
    OPENING_PARENTHESES reduce using rule 80 (equal -> EQ_REL .)
    LETTER          reduce using rule 80 (equal -> EQ_REL .)
    CONST_KW        reduce using rule 80 (equal -> EQ_REL .)
    TRUE            reduce using rule 80 (equal -> EQ_REL .)
    FALSE           reduce using rule 80 (equal -> EQ_REL .)


state 92

    (81) nonEQ_OP -> GT_REL .

    MI_OP           reduce using rule 81 (nonEQ_OP -> GT_REL .)
    MU_OP           reduce using rule 81 (nonEQ_OP -> GT_REL .)
    QU_UOP          reduce using rule 81 (nonEQ_OP -> GT_REL .)
    OPENING_PARENTHESES reduce using rule 81 (nonEQ_OP -> GT_REL .)
    LETTER          reduce using rule 81 (nonEQ_OP -> GT_REL .)
    CONST_KW        reduce using rule 81 (nonEQ_OP -> GT_REL .)
    TRUE            reduce using rule 81 (nonEQ_OP -> GT_REL .)
    FALSE           reduce using rule 81 (nonEQ_OP -> GT_REL .)


state 93

    (82) nonEQ_OP -> LT_REL .

    MI_OP           reduce using rule 82 (nonEQ_OP -> LT_REL .)
    MU_OP           reduce using rule 82 (nonEQ_OP -> LT_REL .)
    QU_UOP          reduce using rule 82 (nonEQ_OP -> LT_REL .)
    OPENING_PARENTHESES reduce using rule 82 (nonEQ_OP -> LT_REL .)
    LETTER          reduce using rule 82 (nonEQ_OP -> LT_REL .)
    CONST_KW        reduce using rule 82 (nonEQ_OP -> LT_REL .)
    TRUE            reduce using rule 82 (nonEQ_OP -> LT_REL .)
    FALSE           reduce using rule 82 (nonEQ_OP -> LT_REL .)


state 94

    (83) nonEQ_OP -> NEQ_REL .

    MI_OP           reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    MU_OP           reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    QU_UOP          reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    OPENING_PARENTHESES reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    LETTER          reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    CONST_KW        reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    TRUE            reduce using rule 83 (nonEQ_OP -> NEQ_REL .)
    FALSE           reduce using rule 83 (nonEQ_OP -> NEQ_REL .)


state 95

    (91) unaryExpression -> unaryop unaryExpression .

    PL_OP           reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    MI_OP           reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    MU_OP           reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    DI_OP           reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    PE_OP           reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    LE_REL          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    GE_REL          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    EQ_REL          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    GT_REL          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    LT_REL          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    NEQ_REL         reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_PARENTHESES reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    AA_LOP          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    OO_LOP          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    TIL_LOP         reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    AND_LOP         reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    OR_LOP          reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    SEMICOLON       reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    CLOSING_BRACKET reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)
    COMA            reduce using rule 91 (unaryExpression -> unaryop unaryExpression .)


state 96

    (99) alterable -> alterable OPENING_BRACKET . allExpression CLOSING_BRACKET
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    alterable                      shift and go to state 74
    allExpression                  shift and go to state 132
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 97

    (100) alterable -> alterable LETTER . numOrLetter
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    MI_OP           reduce using rule 4 (numOrLetter -> .)
    MU_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    CLOSING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    CLOSING_BRACKET reduce using rule 4 (numOrLetter -> .)
    COMA            reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 133

state 98

    (103) inalterable -> LETTER numOrLetter . OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> LETTER numOrLetter .

    OPENING_PARENTHESES shift and go to state 134
    OPENING_BRACKET reduce using rule 98 (alterable -> LETTER numOrLetter .)
    LETTER          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    PL_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MI_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MU_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    DI_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    PE_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    LE_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    GE_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    EQ_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    GT_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    LT_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    NEQ_REL         reduce using rule 98 (alterable -> LETTER numOrLetter .)
    CLOSING_PARENTHESES reduce using rule 98 (alterable -> LETTER numOrLetter .)
    AA_LOP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    OO_LOP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    TIL_LOP         reduce using rule 98 (alterable -> LETTER numOrLetter .)
    AND_LOP         reduce using rule 98 (alterable -> LETTER numOrLetter .)
    OR_LOP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    SEMICOLON       reduce using rule 98 (alterable -> LETTER numOrLetter .)
    CLOSING_BRACKET reduce using rule 98 (alterable -> LETTER numOrLetter .)
    COMA            reduce using rule 98 (alterable -> LETTER numOrLetter .)


state 99

    (25) function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 135


state 100

    (38) statement -> phrase .

    CLOSING_BRACKET reduce using rule 38 (statement -> phrase .)
    VOID_KW         reduce using rule 38 (statement -> phrase .)
    BOOLEAN_KW      reduce using rule 38 (statement -> phrase .)
    CHARACTER_KW    reduce using rule 38 (statement -> phrase .)
    INTEGER_KW      reduce using rule 38 (statement -> phrase .)
    CHAR_KW         reduce using rule 38 (statement -> phrase .)
    BOOL_KW         reduce using rule 38 (statement -> phrase .)
    INT_KW          reduce using rule 38 (statement -> phrase .)
    $end            reduce using rule 38 (statement -> phrase .)
    CLOSING_BRACE   reduce using rule 38 (statement -> phrase .)
    SEMICOLON       reduce using rule 38 (statement -> phrase .)
    OPENING_BRACE   reduce using rule 38 (statement -> phrase .)
    IF_KW           reduce using rule 38 (statement -> phrase .)
    TILL_KW         reduce using rule 38 (statement -> phrase .)
    COMEBACK_KW     reduce using rule 38 (statement -> phrase .)
    GIVEBACK_KW     reduce using rule 38 (statement -> phrase .)
    CONTINUE_KW     reduce using rule 38 (statement -> phrase .)
    LETTER          reduce using rule 38 (statement -> phrase .)
    AA_LOP          reduce using rule 38 (statement -> phrase .)
    OO_LOP          reduce using rule 38 (statement -> phrase .)
    TIL_LOP         reduce using rule 38 (statement -> phrase .)
    AND_LOP         reduce using rule 38 (statement -> phrase .)
    OR_LOP          reduce using rule 38 (statement -> phrase .)
    MI_OP           reduce using rule 38 (statement -> phrase .)
    MU_OP           reduce using rule 38 (statement -> phrase .)
    QU_UOP          reduce using rule 38 (statement -> phrase .)
    OPENING_PARENTHESES reduce using rule 38 (statement -> phrase .)
    CONST_KW        reduce using rule 38 (statement -> phrase .)
    TRUE            reduce using rule 38 (statement -> phrase .)
    FALSE           reduce using rule 38 (statement -> phrase .)
    OTHER_KW        reduce using rule 38 (statement -> phrase .)


state 101

    (39) statement -> compoundPhrase .

    CLOSING_BRACKET reduce using rule 39 (statement -> compoundPhrase .)
    VOID_KW         reduce using rule 39 (statement -> compoundPhrase .)
    BOOLEAN_KW      reduce using rule 39 (statement -> compoundPhrase .)
    CHARACTER_KW    reduce using rule 39 (statement -> compoundPhrase .)
    INTEGER_KW      reduce using rule 39 (statement -> compoundPhrase .)
    CHAR_KW         reduce using rule 39 (statement -> compoundPhrase .)
    BOOL_KW         reduce using rule 39 (statement -> compoundPhrase .)
    INT_KW          reduce using rule 39 (statement -> compoundPhrase .)
    $end            reduce using rule 39 (statement -> compoundPhrase .)
    CLOSING_BRACE   reduce using rule 39 (statement -> compoundPhrase .)
    SEMICOLON       reduce using rule 39 (statement -> compoundPhrase .)
    OPENING_BRACE   reduce using rule 39 (statement -> compoundPhrase .)
    IF_KW           reduce using rule 39 (statement -> compoundPhrase .)
    TILL_KW         reduce using rule 39 (statement -> compoundPhrase .)
    COMEBACK_KW     reduce using rule 39 (statement -> compoundPhrase .)
    GIVEBACK_KW     reduce using rule 39 (statement -> compoundPhrase .)
    CONTINUE_KW     reduce using rule 39 (statement -> compoundPhrase .)
    LETTER          reduce using rule 39 (statement -> compoundPhrase .)
    AA_LOP          reduce using rule 39 (statement -> compoundPhrase .)
    OO_LOP          reduce using rule 39 (statement -> compoundPhrase .)
    TIL_LOP         reduce using rule 39 (statement -> compoundPhrase .)
    AND_LOP         reduce using rule 39 (statement -> compoundPhrase .)
    OR_LOP          reduce using rule 39 (statement -> compoundPhrase .)
    MI_OP           reduce using rule 39 (statement -> compoundPhrase .)
    MU_OP           reduce using rule 39 (statement -> compoundPhrase .)
    QU_UOP          reduce using rule 39 (statement -> compoundPhrase .)
    OPENING_PARENTHESES reduce using rule 39 (statement -> compoundPhrase .)
    CONST_KW        reduce using rule 39 (statement -> compoundPhrase .)
    TRUE            reduce using rule 39 (statement -> compoundPhrase .)
    FALSE           reduce using rule 39 (statement -> compoundPhrase .)
    OTHER_KW        reduce using rule 39 (statement -> compoundPhrase .)


state 102

    (40) statement -> selectPhrase .

    CLOSING_BRACKET reduce using rule 40 (statement -> selectPhrase .)
    VOID_KW         reduce using rule 40 (statement -> selectPhrase .)
    BOOLEAN_KW      reduce using rule 40 (statement -> selectPhrase .)
    CHARACTER_KW    reduce using rule 40 (statement -> selectPhrase .)
    INTEGER_KW      reduce using rule 40 (statement -> selectPhrase .)
    CHAR_KW         reduce using rule 40 (statement -> selectPhrase .)
    BOOL_KW         reduce using rule 40 (statement -> selectPhrase .)
    INT_KW          reduce using rule 40 (statement -> selectPhrase .)
    $end            reduce using rule 40 (statement -> selectPhrase .)
    CLOSING_BRACE   reduce using rule 40 (statement -> selectPhrase .)
    SEMICOLON       reduce using rule 40 (statement -> selectPhrase .)
    OPENING_BRACE   reduce using rule 40 (statement -> selectPhrase .)
    IF_KW           reduce using rule 40 (statement -> selectPhrase .)
    TILL_KW         reduce using rule 40 (statement -> selectPhrase .)
    COMEBACK_KW     reduce using rule 40 (statement -> selectPhrase .)
    GIVEBACK_KW     reduce using rule 40 (statement -> selectPhrase .)
    CONTINUE_KW     reduce using rule 40 (statement -> selectPhrase .)
    LETTER          reduce using rule 40 (statement -> selectPhrase .)
    AA_LOP          reduce using rule 40 (statement -> selectPhrase .)
    OO_LOP          reduce using rule 40 (statement -> selectPhrase .)
    TIL_LOP         reduce using rule 40 (statement -> selectPhrase .)
    AND_LOP         reduce using rule 40 (statement -> selectPhrase .)
    OR_LOP          reduce using rule 40 (statement -> selectPhrase .)
    MI_OP           reduce using rule 40 (statement -> selectPhrase .)
    MU_OP           reduce using rule 40 (statement -> selectPhrase .)
    QU_UOP          reduce using rule 40 (statement -> selectPhrase .)
    OPENING_PARENTHESES reduce using rule 40 (statement -> selectPhrase .)
    CONST_KW        reduce using rule 40 (statement -> selectPhrase .)
    TRUE            reduce using rule 40 (statement -> selectPhrase .)
    FALSE           reduce using rule 40 (statement -> selectPhrase .)
    OTHER_KW        reduce using rule 40 (statement -> selectPhrase .)


state 103

    (41) statement -> iterationPhrase .

    CLOSING_BRACKET reduce using rule 41 (statement -> iterationPhrase .)
    VOID_KW         reduce using rule 41 (statement -> iterationPhrase .)
    BOOLEAN_KW      reduce using rule 41 (statement -> iterationPhrase .)
    CHARACTER_KW    reduce using rule 41 (statement -> iterationPhrase .)
    INTEGER_KW      reduce using rule 41 (statement -> iterationPhrase .)
    CHAR_KW         reduce using rule 41 (statement -> iterationPhrase .)
    BOOL_KW         reduce using rule 41 (statement -> iterationPhrase .)
    INT_KW          reduce using rule 41 (statement -> iterationPhrase .)
    $end            reduce using rule 41 (statement -> iterationPhrase .)
    CLOSING_BRACE   reduce using rule 41 (statement -> iterationPhrase .)
    SEMICOLON       reduce using rule 41 (statement -> iterationPhrase .)
    OPENING_BRACE   reduce using rule 41 (statement -> iterationPhrase .)
    IF_KW           reduce using rule 41 (statement -> iterationPhrase .)
    TILL_KW         reduce using rule 41 (statement -> iterationPhrase .)
    COMEBACK_KW     reduce using rule 41 (statement -> iterationPhrase .)
    GIVEBACK_KW     reduce using rule 41 (statement -> iterationPhrase .)
    CONTINUE_KW     reduce using rule 41 (statement -> iterationPhrase .)
    LETTER          reduce using rule 41 (statement -> iterationPhrase .)
    AA_LOP          reduce using rule 41 (statement -> iterationPhrase .)
    OO_LOP          reduce using rule 41 (statement -> iterationPhrase .)
    TIL_LOP         reduce using rule 41 (statement -> iterationPhrase .)
    AND_LOP         reduce using rule 41 (statement -> iterationPhrase .)
    OR_LOP          reduce using rule 41 (statement -> iterationPhrase .)
    MI_OP           reduce using rule 41 (statement -> iterationPhrase .)
    MU_OP           reduce using rule 41 (statement -> iterationPhrase .)
    QU_UOP          reduce using rule 41 (statement -> iterationPhrase .)
    OPENING_PARENTHESES reduce using rule 41 (statement -> iterationPhrase .)
    CONST_KW        reduce using rule 41 (statement -> iterationPhrase .)
    TRUE            reduce using rule 41 (statement -> iterationPhrase .)
    FALSE           reduce using rule 41 (statement -> iterationPhrase .)
    OTHER_KW        reduce using rule 41 (statement -> iterationPhrase .)


state 104

    (42) statement -> returnPhrase .

    CLOSING_BRACKET reduce using rule 42 (statement -> returnPhrase .)
    VOID_KW         reduce using rule 42 (statement -> returnPhrase .)
    BOOLEAN_KW      reduce using rule 42 (statement -> returnPhrase .)
    CHARACTER_KW    reduce using rule 42 (statement -> returnPhrase .)
    INTEGER_KW      reduce using rule 42 (statement -> returnPhrase .)
    CHAR_KW         reduce using rule 42 (statement -> returnPhrase .)
    BOOL_KW         reduce using rule 42 (statement -> returnPhrase .)
    INT_KW          reduce using rule 42 (statement -> returnPhrase .)
    $end            reduce using rule 42 (statement -> returnPhrase .)
    CLOSING_BRACE   reduce using rule 42 (statement -> returnPhrase .)
    SEMICOLON       reduce using rule 42 (statement -> returnPhrase .)
    OPENING_BRACE   reduce using rule 42 (statement -> returnPhrase .)
    IF_KW           reduce using rule 42 (statement -> returnPhrase .)
    TILL_KW         reduce using rule 42 (statement -> returnPhrase .)
    COMEBACK_KW     reduce using rule 42 (statement -> returnPhrase .)
    GIVEBACK_KW     reduce using rule 42 (statement -> returnPhrase .)
    CONTINUE_KW     reduce using rule 42 (statement -> returnPhrase .)
    LETTER          reduce using rule 42 (statement -> returnPhrase .)
    AA_LOP          reduce using rule 42 (statement -> returnPhrase .)
    OO_LOP          reduce using rule 42 (statement -> returnPhrase .)
    TIL_LOP         reduce using rule 42 (statement -> returnPhrase .)
    AND_LOP         reduce using rule 42 (statement -> returnPhrase .)
    OR_LOP          reduce using rule 42 (statement -> returnPhrase .)
    MI_OP           reduce using rule 42 (statement -> returnPhrase .)
    MU_OP           reduce using rule 42 (statement -> returnPhrase .)
    QU_UOP          reduce using rule 42 (statement -> returnPhrase .)
    OPENING_PARENTHESES reduce using rule 42 (statement -> returnPhrase .)
    CONST_KW        reduce using rule 42 (statement -> returnPhrase .)
    TRUE            reduce using rule 42 (statement -> returnPhrase .)
    FALSE           reduce using rule 42 (statement -> returnPhrase .)
    OTHER_KW        reduce using rule 42 (statement -> returnPhrase .)


state 105

    (43) statement -> continue .

    CLOSING_BRACKET reduce using rule 43 (statement -> continue .)
    VOID_KW         reduce using rule 43 (statement -> continue .)
    BOOLEAN_KW      reduce using rule 43 (statement -> continue .)
    CHARACTER_KW    reduce using rule 43 (statement -> continue .)
    INTEGER_KW      reduce using rule 43 (statement -> continue .)
    CHAR_KW         reduce using rule 43 (statement -> continue .)
    BOOL_KW         reduce using rule 43 (statement -> continue .)
    INT_KW          reduce using rule 43 (statement -> continue .)
    $end            reduce using rule 43 (statement -> continue .)
    CLOSING_BRACE   reduce using rule 43 (statement -> continue .)
    SEMICOLON       reduce using rule 43 (statement -> continue .)
    OPENING_BRACE   reduce using rule 43 (statement -> continue .)
    IF_KW           reduce using rule 43 (statement -> continue .)
    TILL_KW         reduce using rule 43 (statement -> continue .)
    COMEBACK_KW     reduce using rule 43 (statement -> continue .)
    GIVEBACK_KW     reduce using rule 43 (statement -> continue .)
    CONTINUE_KW     reduce using rule 43 (statement -> continue .)
    LETTER          reduce using rule 43 (statement -> continue .)
    AA_LOP          reduce using rule 43 (statement -> continue .)
    OO_LOP          reduce using rule 43 (statement -> continue .)
    TIL_LOP         reduce using rule 43 (statement -> continue .)
    AND_LOP         reduce using rule 43 (statement -> continue .)
    OR_LOP          reduce using rule 43 (statement -> continue .)
    MI_OP           reduce using rule 43 (statement -> continue .)
    MU_OP           reduce using rule 43 (statement -> continue .)
    QU_UOP          reduce using rule 43 (statement -> continue .)
    OPENING_PARENTHESES reduce using rule 43 (statement -> continue .)
    CONST_KW        reduce using rule 43 (statement -> continue .)
    TRUE            reduce using rule 43 (statement -> continue .)
    FALSE           reduce using rule 43 (statement -> continue .)
    OTHER_KW        reduce using rule 43 (statement -> continue .)


state 106

    (47) phrase -> allExpression . SEMICOLON

    SEMICOLON       shift and go to state 136


state 107

    (48) phrase -> SEMICOLON .

    CLOSING_BRACKET reduce using rule 48 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 48 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 48 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 48 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 48 (phrase -> SEMICOLON .)
    $end            reduce using rule 48 (phrase -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 48 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 48 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 48 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 48 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 48 (phrase -> SEMICOLON .)
    AA_LOP          reduce using rule 48 (phrase -> SEMICOLON .)
    OO_LOP          reduce using rule 48 (phrase -> SEMICOLON .)
    TIL_LOP         reduce using rule 48 (phrase -> SEMICOLON .)
    AND_LOP         reduce using rule 48 (phrase -> SEMICOLON .)
    OR_LOP          reduce using rule 48 (phrase -> SEMICOLON .)
    MI_OP           reduce using rule 48 (phrase -> SEMICOLON .)
    MU_OP           reduce using rule 48 (phrase -> SEMICOLON .)
    QU_UOP          reduce using rule 48 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 48 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 48 (phrase -> SEMICOLON .)
    TRUE            reduce using rule 48 (phrase -> SEMICOLON .)
    FALSE           reduce using rule 48 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 48 (phrase -> SEMICOLON .)


state 108

    (44) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (34) localDeclarations -> . localDeclarations ScopedVariableDec
    (35) localDeclarations -> .

    STATIC_KW       reduce using rule 35 (localDeclarations -> .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> .)
    INT_KW          reduce using rule 35 (localDeclarations -> .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> .)
    SEMICOLON       reduce using rule 35 (localDeclarations -> .)
    OPENING_BRACE   reduce using rule 35 (localDeclarations -> .)
    IF_KW           reduce using rule 35 (localDeclarations -> .)
    TILL_KW         reduce using rule 35 (localDeclarations -> .)
    COMEBACK_KW     reduce using rule 35 (localDeclarations -> .)
    GIVEBACK_KW     reduce using rule 35 (localDeclarations -> .)
    CONTINUE_KW     reduce using rule 35 (localDeclarations -> .)
    LETTER          reduce using rule 35 (localDeclarations -> .)
    AA_LOP          reduce using rule 35 (localDeclarations -> .)
    OO_LOP          reduce using rule 35 (localDeclarations -> .)
    TIL_LOP         reduce using rule 35 (localDeclarations -> .)
    AND_LOP         reduce using rule 35 (localDeclarations -> .)
    OR_LOP          reduce using rule 35 (localDeclarations -> .)
    MI_OP           reduce using rule 35 (localDeclarations -> .)
    MU_OP           reduce using rule 35 (localDeclarations -> .)
    QU_UOP          reduce using rule 35 (localDeclarations -> .)
    OPENING_PARENTHESES reduce using rule 35 (localDeclarations -> .)
    CONST_KW        reduce using rule 35 (localDeclarations -> .)
    TRUE            reduce using rule 35 (localDeclarations -> .)
    FALSE           reduce using rule 35 (localDeclarations -> .)

    localDeclarations              shift and go to state 137

state 109

    (49) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> IF_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE

    OPENING_PARENTHESES shift and go to state 138


state 110

    (54) iterationPhrase -> TILL_KW . OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement

    OPENING_PARENTHESES shift and go to state 139


state 111

    (55) returnPhrase -> COMEBACK_KW . SEMICOLON

    SEMICOLON       shift and go to state 140


state 112

    (56) returnPhrase -> GIVEBACK_KW . allExpression SEMICOLON
    (57) returnPhrase -> GIVEBACK_KW . numOrLetter SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    NUMBER          shift and go to state 16
    LETTER          shift and go to state 143
    SEMICOLON       reduce using rule 4 (numOrLetter -> .)
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    allExpression                  shift and go to state 141
    numOrLetter                    shift and go to state 142
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 113

    (58) continue -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 144


state 114

    (32) paramList -> paramList COMA paramId .

    COMA            reduce using rule 32 (paramList -> paramList COMA paramId .)
    SEMICOLON       reduce using rule 32 (paramList -> paramList COMA paramId .)
    CLOSING_PARENTHESES reduce using rule 32 (paramList -> paramList COMA paramId .)


state 115

    (37) paramId -> LETTER numOrLetter OPENING_BRACKET . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 145


state 116

    (26) function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .

    VOID_KW         reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)
    $end            reduce using rule 26 (function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement .)


state 117

    (101) inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .

    PL_OP           reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MI_OP           reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    MU_OP           reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    DI_OP           reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    PE_OP           reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LE_REL          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GE_REL          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    EQ_REL          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    GT_REL          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    LT_REL          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    NEQ_REL         reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AA_LOP          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OO_LOP          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    TIL_LOP         reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    AND_LOP         reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    OR_LOP          reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)
    COMA            reduce using rule 101 (inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES .)


state 118

    (59) allExpression -> alterable mathOp . allExpression
    (63) allExpression -> alterable mathOp . alterable
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    alterable                      shift and go to state 146
    allExpression                  shift and go to state 147
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 119

    (60) allExpression -> alterable PP_OP .

    CLOSING_PARENTHESES reduce using rule 60 (allExpression -> alterable PP_OP .)
    SEMICOLON       reduce using rule 60 (allExpression -> alterable PP_OP .)
    CLOSING_BRACKET reduce using rule 60 (allExpression -> alterable PP_OP .)
    COMA            reduce using rule 60 (allExpression -> alterable PP_OP .)


state 120

    (61) allExpression -> alterable MM_OP .

    CLOSING_PARENTHESES reduce using rule 61 (allExpression -> alterable MM_OP .)
    SEMICOLON       reduce using rule 61 (allExpression -> alterable MM_OP .)
    CLOSING_BRACKET reduce using rule 61 (allExpression -> alterable MM_OP .)
    COMA            reduce using rule 61 (allExpression -> alterable MM_OP .)


state 121

    (64) mathOp -> EQ_OP .

    LETTER          reduce using rule 64 (mathOp -> EQ_OP .)
    AA_LOP          reduce using rule 64 (mathOp -> EQ_OP .)
    OO_LOP          reduce using rule 64 (mathOp -> EQ_OP .)
    TIL_LOP         reduce using rule 64 (mathOp -> EQ_OP .)
    AND_LOP         reduce using rule 64 (mathOp -> EQ_OP .)
    OR_LOP          reduce using rule 64 (mathOp -> EQ_OP .)
    MI_OP           reduce using rule 64 (mathOp -> EQ_OP .)
    MU_OP           reduce using rule 64 (mathOp -> EQ_OP .)
    QU_UOP          reduce using rule 64 (mathOp -> EQ_OP .)
    OPENING_PARENTHESES reduce using rule 64 (mathOp -> EQ_OP .)
    CONST_KW        reduce using rule 64 (mathOp -> EQ_OP .)
    TRUE            reduce using rule 64 (mathOp -> EQ_OP .)
    FALSE           reduce using rule 64 (mathOp -> EQ_OP .)


state 122

    (65) mathOp -> PLE_OP .

    LETTER          reduce using rule 65 (mathOp -> PLE_OP .)
    AA_LOP          reduce using rule 65 (mathOp -> PLE_OP .)
    OO_LOP          reduce using rule 65 (mathOp -> PLE_OP .)
    TIL_LOP         reduce using rule 65 (mathOp -> PLE_OP .)
    AND_LOP         reduce using rule 65 (mathOp -> PLE_OP .)
    OR_LOP          reduce using rule 65 (mathOp -> PLE_OP .)
    MI_OP           reduce using rule 65 (mathOp -> PLE_OP .)
    MU_OP           reduce using rule 65 (mathOp -> PLE_OP .)
    QU_UOP          reduce using rule 65 (mathOp -> PLE_OP .)
    OPENING_PARENTHESES reduce using rule 65 (mathOp -> PLE_OP .)
    CONST_KW        reduce using rule 65 (mathOp -> PLE_OP .)
    TRUE            reduce using rule 65 (mathOp -> PLE_OP .)
    FALSE           reduce using rule 65 (mathOp -> PLE_OP .)


state 123

    (66) mathOp -> MIE_OP .

    LETTER          reduce using rule 66 (mathOp -> MIE_OP .)
    AA_LOP          reduce using rule 66 (mathOp -> MIE_OP .)
    OO_LOP          reduce using rule 66 (mathOp -> MIE_OP .)
    TIL_LOP         reduce using rule 66 (mathOp -> MIE_OP .)
    AND_LOP         reduce using rule 66 (mathOp -> MIE_OP .)
    OR_LOP          reduce using rule 66 (mathOp -> MIE_OP .)
    MI_OP           reduce using rule 66 (mathOp -> MIE_OP .)
    MU_OP           reduce using rule 66 (mathOp -> MIE_OP .)
    QU_UOP          reduce using rule 66 (mathOp -> MIE_OP .)
    OPENING_PARENTHESES reduce using rule 66 (mathOp -> MIE_OP .)
    CONST_KW        reduce using rule 66 (mathOp -> MIE_OP .)
    TRUE            reduce using rule 66 (mathOp -> MIE_OP .)
    FALSE           reduce using rule 66 (mathOp -> MIE_OP .)


state 124

    (67) mathOp -> MUE_OP .

    LETTER          reduce using rule 67 (mathOp -> MUE_OP .)
    AA_LOP          reduce using rule 67 (mathOp -> MUE_OP .)
    OO_LOP          reduce using rule 67 (mathOp -> MUE_OP .)
    TIL_LOP         reduce using rule 67 (mathOp -> MUE_OP .)
    AND_LOP         reduce using rule 67 (mathOp -> MUE_OP .)
    OR_LOP          reduce using rule 67 (mathOp -> MUE_OP .)
    MI_OP           reduce using rule 67 (mathOp -> MUE_OP .)
    MU_OP           reduce using rule 67 (mathOp -> MUE_OP .)
    QU_UOP          reduce using rule 67 (mathOp -> MUE_OP .)
    OPENING_PARENTHESES reduce using rule 67 (mathOp -> MUE_OP .)
    CONST_KW        reduce using rule 67 (mathOp -> MUE_OP .)
    TRUE            reduce using rule 67 (mathOp -> MUE_OP .)
    FALSE           reduce using rule 67 (mathOp -> MUE_OP .)


state 125

    (68) mathOp -> DIE_OP .

    LETTER          reduce using rule 68 (mathOp -> DIE_OP .)
    AA_LOP          reduce using rule 68 (mathOp -> DIE_OP .)
    OO_LOP          reduce using rule 68 (mathOp -> DIE_OP .)
    TIL_LOP         reduce using rule 68 (mathOp -> DIE_OP .)
    AND_LOP         reduce using rule 68 (mathOp -> DIE_OP .)
    OR_LOP          reduce using rule 68 (mathOp -> DIE_OP .)
    MI_OP           reduce using rule 68 (mathOp -> DIE_OP .)
    MU_OP           reduce using rule 68 (mathOp -> DIE_OP .)
    QU_UOP          reduce using rule 68 (mathOp -> DIE_OP .)
    OPENING_PARENTHESES reduce using rule 68 (mathOp -> DIE_OP .)
    CONST_KW        reduce using rule 68 (mathOp -> DIE_OP .)
    TRUE            reduce using rule 68 (mathOp -> DIE_OP .)
    FALSE           reduce using rule 68 (mathOp -> DIE_OP .)


state 126

    (98) alterable -> LETTER numOrLetter .
    (103) inalterable -> LETTER numOrLetter . OPENING_PARENTHESES args CLOSING_PARENTHESES

    PP_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MM_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    OPENING_BRACKET reduce using rule 98 (alterable -> LETTER numOrLetter .)
    LETTER          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    EQ_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    PLE_OP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MIE_OP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MUE_OP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    DIE_OP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    PL_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MI_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    MU_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    DI_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    PE_OP           reduce using rule 98 (alterable -> LETTER numOrLetter .)
    LE_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    GE_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    EQ_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    GT_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    LT_REL          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    NEQ_REL         reduce using rule 98 (alterable -> LETTER numOrLetter .)
    AA_LOP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    OO_LOP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    TIL_LOP         reduce using rule 98 (alterable -> LETTER numOrLetter .)
    AND_LOP         reduce using rule 98 (alterable -> LETTER numOrLetter .)
    OR_LOP          reduce using rule 98 (alterable -> LETTER numOrLetter .)
    CLOSING_PARENTHESES reduce using rule 98 (alterable -> LETTER numOrLetter .)
    SEMICOLON       reduce using rule 98 (alterable -> LETTER numOrLetter .)
    CLOSING_BRACKET reduce using rule 98 (alterable -> LETTER numOrLetter .)
    COMA            reduce using rule 98 (alterable -> LETTER numOrLetter .)
    OPENING_PARENTHESES shift and go to state 134


state 127

    (69) eachExpression -> eachExpression logicOp eachExpression .
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    CLOSING_PARENTHESES reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .)
    SEMICOLON       reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .)
    CLOSING_BRACKET reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .)
    COMA            reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .)
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

  ! AA_LOP          [ reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OO_LOP          [ reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! AND_LOP         [ reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! OR_LOP          [ reduce using rule 69 (eachExpression -> eachExpression logicOp eachExpression .) ]

    logicOp                        shift and go to state 78

state 128

    (70) eachExpression -> eachExpression logicOp THEN_KW . eachExpression
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 148
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 129

    (73) eachExpression -> eachExpression logicOp ELSE_KW . eachExpression
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 149
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 130

    (74) relExpression -> mathEXP compareType mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (86) op -> . PL_OP
    (87) op -> . MI_OP
    (88) op -> . MU_OP
    (89) op -> . DI_OP
    (90) op -> . PE_OP

    CLOSING_PARENTHESES reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    AA_LOP          reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    OO_LOP          reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    TIL_LOP         reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    AND_LOP         reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    OR_LOP          reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    SEMICOLON       reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    CLOSING_BRACKET reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    COMA            reduce using rule 74 (relExpression -> mathEXP compareType mathEXP .)
    PL_OP           shift and go to state 84
    MI_OP           shift and go to state 85
    MU_OP           shift and go to state 86
    DI_OP           shift and go to state 87
    PE_OP           shift and go to state 88

    op                             shift and go to state 81

state 131

    (84) mathEXP -> mathEXP op mathEXP .
    (84) mathEXP -> mathEXP . op mathEXP
    (86) op -> . PL_OP
    (87) op -> . MI_OP
    (88) op -> . MU_OP
    (89) op -> . DI_OP
    (90) op -> . PE_OP

  ! shift/reduce conflict for PL_OP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for DI_OP resolved as shift
  ! shift/reduce conflict for PE_OP resolved as shift
    LE_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    GE_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    EQ_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    GT_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    LT_REL          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    NEQ_REL         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_PARENTHESES reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    AA_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    OO_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    TIL_LOP         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    AND_LOP         reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    OR_LOP          reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    SEMICOLON       reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    CLOSING_BRACKET reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    COMA            reduce using rule 84 (mathEXP -> mathEXP op mathEXP .)
    PL_OP           shift and go to state 84
    MI_OP           shift and go to state 85
    MU_OP           shift and go to state 86
    DI_OP           shift and go to state 87
    PE_OP           shift and go to state 88

  ! PL_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! MI_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! MU_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! DI_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]
  ! PE_OP           [ reduce using rule 84 (mathEXP -> mathEXP op mathEXP .) ]

    op                             shift and go to state 81

state 132

    (99) alterable -> alterable OPENING_BRACKET allExpression . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 150


state 133

    (100) alterable -> alterable LETTER numOrLetter .

    OPENING_BRACKET reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    LETTER          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    PL_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    MI_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    MU_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    DI_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    PE_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    LE_REL          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    GE_REL          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    EQ_REL          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    GT_REL          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    LT_REL          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    NEQ_REL         reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    CLOSING_PARENTHESES reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    AA_LOP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    OO_LOP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    TIL_LOP         reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    AND_LOP         reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    OR_LOP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    PP_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    MM_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    EQ_OP           reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    PLE_OP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    MIE_OP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    MUE_OP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    DIE_OP          reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    SEMICOLON       reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    CLOSING_BRACKET reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)
    COMA            reduce using rule 100 (alterable -> alterable LETTER numOrLetter .)


state 134

    (103) inalterable -> LETTER numOrLetter OPENING_PARENTHESES . args CLOSING_PARENTHESES
    (104) args -> . arguments
    (105) args -> .
    (106) arguments -> . arguments COMA allExpression
    (107) arguments -> . allExpression
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    CLOSING_PARENTHESES reduce using rule 105 (args -> .)
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    args                           shift and go to state 151
    arguments                      shift and go to state 152
    allExpression                  shift and go to state 153
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 135

    (25) function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .

    VOID_KW         reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    BOOLEAN_KW      reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    CHARACTER_KW    reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    INTEGER_KW      reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    CHAR_KW         reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    BOOL_KW         reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    INT_KW          reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)
    $end            reduce using rule 25 (function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET .)


state 136

    (47) phrase -> allExpression SEMICOLON .

    CLOSING_BRACKET reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    VOID_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    INT_KW          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    $end            reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    IF_KW           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TILL_KW         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    LETTER          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    AA_LOP          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OO_LOP          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TIL_LOP         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    AND_LOP         reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OR_LOP          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    MI_OP           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    MU_OP           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    QU_UOP          reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    CONST_KW        reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    TRUE            reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    FALSE           reduce using rule 47 (phrase -> allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 47 (phrase -> allExpression SEMICOLON .)


state 137

    (44) compoundPhrase -> OPENING_BRACE localDeclarations . statementList CLOSING_BRACE
    (34) localDeclarations -> localDeclarations . ScopedVariableDec
    (45) statementList -> . statementList statement
    (46) statementList -> .
    (10) ScopedVariableDec -> . scopedSpecifier variableList SEMICOLON
    (17) scopedSpecifier -> . STATIC_KW type
    (18) scopedSpecifier -> . type
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    CLOSING_BRACE   reduce using rule 46 (statementList -> .)
    SEMICOLON       reduce using rule 46 (statementList -> .)
    OPENING_BRACE   reduce using rule 46 (statementList -> .)
    IF_KW           reduce using rule 46 (statementList -> .)
    TILL_KW         reduce using rule 46 (statementList -> .)
    COMEBACK_KW     reduce using rule 46 (statementList -> .)
    GIVEBACK_KW     reduce using rule 46 (statementList -> .)
    CONTINUE_KW     reduce using rule 46 (statementList -> .)
    LETTER          reduce using rule 46 (statementList -> .)
    AA_LOP          reduce using rule 46 (statementList -> .)
    OO_LOP          reduce using rule 46 (statementList -> .)
    TIL_LOP         reduce using rule 46 (statementList -> .)
    AND_LOP         reduce using rule 46 (statementList -> .)
    OR_LOP          reduce using rule 46 (statementList -> .)
    MI_OP           reduce using rule 46 (statementList -> .)
    MU_OP           reduce using rule 46 (statementList -> .)
    QU_UOP          reduce using rule 46 (statementList -> .)
    OPENING_PARENTHESES reduce using rule 46 (statementList -> .)
    CONST_KW        reduce using rule 46 (statementList -> .)
    TRUE            reduce using rule 46 (statementList -> .)
    FALSE           reduce using rule 46 (statementList -> .)
    STATIC_KW       shift and go to state 157
    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    statementList                  shift and go to state 154
    ScopedVariableDec              shift and go to state 155
    scopedSpecifier                shift and go to state 156
    type                           shift and go to state 158

state 138

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> IF_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 159
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 139

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES . eachExpression CLOSING_PARENTHESES statement
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    LETTER          shift and go to state 63
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 160
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 140

    (55) returnPhrase -> COMEBACK_KW SEMICOLON .

    CLOSING_BRACKET reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    VOID_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CHAR_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    BOOL_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    INT_KW          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    $end            reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    IF_KW           reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TILL_KW         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    LETTER          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AA_LOP          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OO_LOP          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TIL_LOP         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    AND_LOP         reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OR_LOP          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MI_OP           reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    MU_OP           reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    QU_UOP          reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    CONST_KW        reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    TRUE            reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    FALSE           reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)
    OTHER_KW        reduce using rule 55 (returnPhrase -> COMEBACK_KW SEMICOLON .)


state 141

    (56) returnPhrase -> GIVEBACK_KW allExpression . SEMICOLON

    SEMICOLON       shift and go to state 161


state 142

    (57) returnPhrase -> GIVEBACK_KW numOrLetter . SEMICOLON

    SEMICOLON       shift and go to state 162


state 143

    (3) numOrLetter -> LETTER .
    (98) alterable -> LETTER . numOrLetter
    (103) inalterable -> LETTER . numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (2) numOrLetter -> . NUMBER
    (3) numOrLetter -> . LETTER
    (4) numOrLetter -> .

  ! shift/reduce conflict for LETTER resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 3 (numOrLetter -> LETTER .)
    SEMICOLON       reduce using rule 3 (numOrLetter -> LETTER .)
    NUMBER          shift and go to state 16
    LETTER          shift and go to state 17
    OPENING_PARENTHESES reduce using rule 4 (numOrLetter -> .)
    PP_OP           reduce using rule 4 (numOrLetter -> .)
    MM_OP           reduce using rule 4 (numOrLetter -> .)
    OPENING_BRACKET reduce using rule 4 (numOrLetter -> .)
    EQ_OP           reduce using rule 4 (numOrLetter -> .)
    PLE_OP          reduce using rule 4 (numOrLetter -> .)
    MIE_OP          reduce using rule 4 (numOrLetter -> .)
    MUE_OP          reduce using rule 4 (numOrLetter -> .)
    DIE_OP          reduce using rule 4 (numOrLetter -> .)
    PL_OP           reduce using rule 4 (numOrLetter -> .)
    MI_OP           reduce using rule 4 (numOrLetter -> .)
    MU_OP           reduce using rule 4 (numOrLetter -> .)
    DI_OP           reduce using rule 4 (numOrLetter -> .)
    PE_OP           reduce using rule 4 (numOrLetter -> .)
    LE_REL          reduce using rule 4 (numOrLetter -> .)
    GE_REL          reduce using rule 4 (numOrLetter -> .)
    EQ_REL          reduce using rule 4 (numOrLetter -> .)
    GT_REL          reduce using rule 4 (numOrLetter -> .)
    LT_REL          reduce using rule 4 (numOrLetter -> .)
    NEQ_REL         reduce using rule 4 (numOrLetter -> .)
    AA_LOP          reduce using rule 4 (numOrLetter -> .)
    OO_LOP          reduce using rule 4 (numOrLetter -> .)
    TIL_LOP         reduce using rule 4 (numOrLetter -> .)
    AND_LOP         reduce using rule 4 (numOrLetter -> .)
    OR_LOP          reduce using rule 4 (numOrLetter -> .)

  ! LETTER          [ reduce using rule 4 (numOrLetter -> .) ]
  ! SEMICOLON       [ reduce using rule 4 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 126

state 144

    (58) continue -> CONTINUE_KW SEMICOLON .

    CLOSING_BRACKET reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    VOID_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    BOOLEAN_KW      reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CHARACTER_KW    reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    INTEGER_KW      reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CHAR_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    BOOL_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    INT_KW          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    $end            reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    IF_KW           reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    TILL_KW         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    COMEBACK_KW     reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    GIVEBACK_KW     reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    LETTER          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    AA_LOP          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OO_LOP          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    TIL_LOP         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    AND_LOP         reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OR_LOP          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    MI_OP           reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    MU_OP           reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    QU_UOP          reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    CONST_KW        reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    TRUE            reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    FALSE           reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)
    OTHER_KW        reduce using rule 58 (continue -> CONTINUE_KW SEMICOLON .)


state 145

    (37) paramId -> LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET .

    COMA            reduce using rule 37 (paramId -> LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 37 (paramId -> LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 37 (paramId -> LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET .)


state 146

    (63) allExpression -> alterable mathOp alterable .
    (59) allExpression -> alterable . mathOp allExpression
    (60) allExpression -> alterable . PP_OP
    (61) allExpression -> alterable . MM_OP
    (63) allExpression -> alterable . mathOp alterable
    (99) alterable -> alterable . OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> alterable . LETTER numOrLetter
    (97) factor -> alterable .
    (64) mathOp -> . EQ_OP
    (65) mathOp -> . PLE_OP
    (66) mathOp -> . MIE_OP
    (67) mathOp -> . MUE_OP
    (68) mathOp -> . DIE_OP

  ! reduce/reduce conflict for CLOSING_PARENTHESES resolved using rule 63 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 63 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for CLOSING_BRACKET resolved using rule 63 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for COMA resolved using rule 63 (allExpression -> alterable mathOp alterable .)
    CLOSING_PARENTHESES reduce using rule 63 (allExpression -> alterable mathOp alterable .)
    SEMICOLON       reduce using rule 63 (allExpression -> alterable mathOp alterable .)
    CLOSING_BRACKET reduce using rule 63 (allExpression -> alterable mathOp alterable .)
    COMA            reduce using rule 63 (allExpression -> alterable mathOp alterable .)
    PP_OP           shift and go to state 119
    MM_OP           shift and go to state 120
    OPENING_BRACKET shift and go to state 96
    LETTER          shift and go to state 97
    PL_OP           reduce using rule 97 (factor -> alterable .)
    MI_OP           reduce using rule 97 (factor -> alterable .)
    MU_OP           reduce using rule 97 (factor -> alterable .)
    DI_OP           reduce using rule 97 (factor -> alterable .)
    PE_OP           reduce using rule 97 (factor -> alterable .)
    LE_REL          reduce using rule 97 (factor -> alterable .)
    GE_REL          reduce using rule 97 (factor -> alterable .)
    EQ_REL          reduce using rule 97 (factor -> alterable .)
    GT_REL          reduce using rule 97 (factor -> alterable .)
    LT_REL          reduce using rule 97 (factor -> alterable .)
    NEQ_REL         reduce using rule 97 (factor -> alterable .)
    AA_LOP          reduce using rule 97 (factor -> alterable .)
    OO_LOP          reduce using rule 97 (factor -> alterable .)
    TIL_LOP         reduce using rule 97 (factor -> alterable .)
    AND_LOP         reduce using rule 97 (factor -> alterable .)
    OR_LOP          reduce using rule 97 (factor -> alterable .)
    EQ_OP           shift and go to state 121
    PLE_OP          shift and go to state 122
    MIE_OP          shift and go to state 123
    MUE_OP          shift and go to state 124
    DIE_OP          shift and go to state 125

  ! CLOSING_PARENTHESES [ reduce using rule 97 (factor -> alterable .) ]
  ! SEMICOLON       [ reduce using rule 97 (factor -> alterable .) ]
  ! CLOSING_BRACKET [ reduce using rule 97 (factor -> alterable .) ]
  ! COMA            [ reduce using rule 97 (factor -> alterable .) ]

    mathOp                         shift and go to state 118

state 147

    (59) allExpression -> alterable mathOp allExpression .

    CLOSING_PARENTHESES reduce using rule 59 (allExpression -> alterable mathOp allExpression .)
    SEMICOLON       reduce using rule 59 (allExpression -> alterable mathOp allExpression .)
    CLOSING_BRACKET reduce using rule 59 (allExpression -> alterable mathOp allExpression .)
    COMA            reduce using rule 59 (allExpression -> alterable mathOp allExpression .)


state 148

    (70) eachExpression -> eachExpression logicOp THEN_KW eachExpression .
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    CLOSING_PARENTHESES reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    SEMICOLON       reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    COMA            reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .)
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

  ! AA_LOP          [ reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! OO_LOP          [ reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! AND_LOP         [ reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]
  ! OR_LOP          [ reduce using rule 70 (eachExpression -> eachExpression logicOp THEN_KW eachExpression .) ]

    logicOp                        shift and go to state 78

state 149

    (73) eachExpression -> eachExpression logicOp ELSE_KW eachExpression .
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
    CLOSING_PARENTHESES reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    SEMICOLON       reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    CLOSING_BRACKET reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    COMA            reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .)
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

  ! AA_LOP          [ reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OO_LOP          [ reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! TIL_LOP         [ reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! AND_LOP         [ reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]
  ! OR_LOP          [ reduce using rule 73 (eachExpression -> eachExpression logicOp ELSE_KW eachExpression .) ]

    logicOp                        shift and go to state 78

state 150

    (99) alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .

    OPENING_BRACKET reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LETTER          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PL_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MI_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MU_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DI_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PE_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LE_REL          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GE_REL          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQ_REL          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    GT_REL          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    LT_REL          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    NEQ_REL         reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AA_LOP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OO_LOP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    TIL_LOP         reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    AND_LOP         reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    OR_LOP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PP_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MM_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    EQ_OP           reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    PLE_OP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MIE_OP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    MUE_OP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    DIE_OP          reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)
    COMA            reduce using rule 99 (alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET .)


state 151

    (103) inalterable -> LETTER numOrLetter OPENING_PARENTHESES args . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 163


state 152

    (104) args -> arguments .
    (106) arguments -> arguments . COMA allExpression

    CLOSING_PARENTHESES reduce using rule 104 (args -> arguments .)
    COMA            shift and go to state 164


state 153

    (107) arguments -> allExpression .

    COMA            reduce using rule 107 (arguments -> allExpression .)
    CLOSING_PARENTHESES reduce using rule 107 (arguments -> allExpression .)


state 154

    (44) compoundPhrase -> OPENING_BRACE localDeclarations statementList . CLOSING_BRACE
    (45) statementList -> statementList . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    CLOSING_BRACE   shift and go to state 165
    SEMICOLON       shift and go to state 107
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 166
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 155

    (34) localDeclarations -> localDeclarations ScopedVariableDec .

    STATIC_KW       reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOLEAN_KW      reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHARACTER_KW    reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INTEGER_KW      reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CHAR_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    BOOL_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    INT_KW          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CLOSING_BRACE   reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    SEMICOLON       reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_BRACE   reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    IF_KW           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TILL_KW         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    COMEBACK_KW     reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GIVEBACK_KW     reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONTINUE_KW     reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    LETTER          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    AA_LOP          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OO_LOP          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TIL_LOP         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    AND_LOP         reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OR_LOP          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    MI_OP           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    MU_OP           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QU_UOP          reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    OPENING_PARENTHESES reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    CONST_KW        reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    TRUE            reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)
    FALSE           reduce using rule 34 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 156

    (10) ScopedVariableDec -> scopedSpecifier . variableList SEMICOLON
    (11) variableList -> . variableList COMA varInitialization
    (12) variableList -> . varInitialization
    (13) varInitialization -> . varForm
    (14) varInitialization -> . varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES
    (15) varForm -> . LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET
    (16) varForm -> . LETTER numOrLetter

    LETTER          shift and go to state 34

    variableList                   shift and go to state 167
    varInitialization              shift and go to state 20
    varForm                        shift and go to state 21

state 157

    (17) scopedSpecifier -> STATIC_KW . type
    (19) type -> . BOOLEAN_KW
    (20) type -> . CHARACTER_KW
    (21) type -> . INTEGER_KW
    (22) type -> . CHAR_KW
    (23) type -> . BOOL_KW
    (24) type -> . INT_KW

    BOOLEAN_KW      shift and go to state 8
    CHARACTER_KW    shift and go to state 9
    INTEGER_KW      shift and go to state 10
    CHAR_KW         shift and go to state 11
    BOOL_KW         shift and go to state 12
    INT_KW          shift and go to state 13

    type                           shift and go to state 168

state 158

    (18) scopedSpecifier -> type .

    LETTER          reduce using rule 18 (scopedSpecifier -> type .)


state 159

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 169
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

    logicOp                        shift and go to state 78

state 160

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression . CLOSING_PARENTHESES statement
    (69) eachExpression -> eachExpression . logicOp eachExpression
    (70) eachExpression -> eachExpression . logicOp THEN_KW eachExpression
    (73) eachExpression -> eachExpression . logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP

    CLOSING_PARENTHESES shift and go to state 170
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52

    logicOp                        shift and go to state 78

state 161

    (56) returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .

    CLOSING_BRACKET reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    VOID_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOLEAN_KW      reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHARACTER_KW    reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INTEGER_KW      reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CHAR_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    BOOL_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    INT_KW          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    $end            reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CLOSING_BRACE   reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    SEMICOLON       reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_BRACE   reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    IF_KW           reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TILL_KW         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    COMEBACK_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    GIVEBACK_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONTINUE_KW     reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    LETTER          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AA_LOP          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OO_LOP          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TIL_LOP         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    AND_LOP         reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OR_LOP          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MI_OP           reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    MU_OP           reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    QU_UOP          reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    CONST_KW        reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    TRUE            reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    FALSE           reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)
    OTHER_KW        reduce using rule 56 (returnPhrase -> GIVEBACK_KW allExpression SEMICOLON .)


state 162

    (57) returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .

    CLOSING_BRACKET reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    VOID_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    BOOLEAN_KW      reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CHARACTER_KW    reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    INTEGER_KW      reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CHAR_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    BOOL_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    INT_KW          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    $end            reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CLOSING_BRACE   reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    SEMICOLON       reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    IF_KW           reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TILL_KW         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    COMEBACK_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    GIVEBACK_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    LETTER          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    AA_LOP          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OO_LOP          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TIL_LOP         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    AND_LOP         reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OR_LOP          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MI_OP           reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    MU_OP           reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    QU_UOP          reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    CONST_KW        reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    TRUE            reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    FALSE           reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)
    OTHER_KW        reduce using rule 57 (returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON .)


state 163

    (103) inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .

    PL_OP           reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MI_OP           reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    MU_OP           reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    DI_OP           reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    PE_OP           reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LE_REL          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GE_REL          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    EQ_REL          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    GT_REL          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    LT_REL          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    NEQ_REL         reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AA_LOP          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OO_LOP          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    TIL_LOP         reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    AND_LOP         reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    OR_LOP          reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)
    COMA            reduce using rule 103 (inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES .)


state 164

    (106) arguments -> arguments COMA . allExpression
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    allExpression                  shift and go to state 171
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 165

    (44) compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .

    CLOSING_BRACKET reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    VOID_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CHAR_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    BOOL_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    INT_KW          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    $end            reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    SEMICOLON       reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    IF_KW           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TILL_KW         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    LETTER          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AA_LOP          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OO_LOP          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TIL_LOP         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    AND_LOP         reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OR_LOP          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MI_OP           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    MU_OP           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    QU_UOP          reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    CONST_KW        reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    TRUE            reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    FALSE           reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)
    OTHER_KW        reduce using rule 44 (compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE .)


state 166

    (45) statementList -> statementList statement .

    CLOSING_BRACE   reduce using rule 45 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 45 (statementList -> statementList statement .)
    OPENING_BRACE   reduce using rule 45 (statementList -> statementList statement .)
    IF_KW           reduce using rule 45 (statementList -> statementList statement .)
    TILL_KW         reduce using rule 45 (statementList -> statementList statement .)
    COMEBACK_KW     reduce using rule 45 (statementList -> statementList statement .)
    GIVEBACK_KW     reduce using rule 45 (statementList -> statementList statement .)
    CONTINUE_KW     reduce using rule 45 (statementList -> statementList statement .)
    LETTER          reduce using rule 45 (statementList -> statementList statement .)
    AA_LOP          reduce using rule 45 (statementList -> statementList statement .)
    OO_LOP          reduce using rule 45 (statementList -> statementList statement .)
    TIL_LOP         reduce using rule 45 (statementList -> statementList statement .)
    AND_LOP         reduce using rule 45 (statementList -> statementList statement .)
    OR_LOP          reduce using rule 45 (statementList -> statementList statement .)
    MI_OP           reduce using rule 45 (statementList -> statementList statement .)
    MU_OP           reduce using rule 45 (statementList -> statementList statement .)
    QU_UOP          reduce using rule 45 (statementList -> statementList statement .)
    OPENING_PARENTHESES reduce using rule 45 (statementList -> statementList statement .)
    CONST_KW        reduce using rule 45 (statementList -> statementList statement .)
    TRUE            reduce using rule 45 (statementList -> statementList statement .)
    FALSE           reduce using rule 45 (statementList -> statementList statement .)


state 167

    (10) ScopedVariableDec -> scopedSpecifier variableList . SEMICOLON
    (11) variableList -> variableList . COMA varInitialization

    SEMICOLON       shift and go to state 172
    COMA            shift and go to state 25


state 168

    (17) scopedSpecifier -> STATIC_KW type .

    LETTER          reduce using rule 17 (scopedSpecifier -> STATIC_KW type .)


state 169

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . ifBody
    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (51) ifBody -> . statement
    (52) ifBody -> . statement OTHER_KW statement
    (53) ifBody -> . SEMICOLON
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    OPENING_BRACE   shift and go to state 174
    SEMICOLON       shift and go to state 176
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 75
    ifBody                         shift and go to state 173
    statement                      shift and go to state 175
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 170

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    SEMICOLON       shift and go to state 107
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 75
    statement                      shift and go to state 177
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 171

    (106) arguments -> arguments COMA allExpression .

    COMA            reduce using rule 106 (arguments -> arguments COMA allExpression .)
    CLOSING_PARENTHESES reduce using rule 106 (arguments -> arguments COMA allExpression .)


state 172

    (10) ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .

    STATIC_KW       reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    BOOLEAN_KW      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CHARACTER_KW    reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    INTEGER_KW      reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CHAR_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    BOOL_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    INT_KW          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CLOSING_BRACE   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    SEMICOLON       reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_BRACE   reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    IF_KW           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TILL_KW         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    COMEBACK_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    GIVEBACK_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CONTINUE_KW     reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    LETTER          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    AA_LOP          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OO_LOP          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TIL_LOP         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    AND_LOP         reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OR_LOP          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MI_OP           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    MU_OP           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    QU_UOP          reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    CONST_KW        reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    TRUE            reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)
    FALSE           reduce using rule 10 (ScopedVariableDec -> scopedSpecifier variableList SEMICOLON .)


state 173

    (49) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .

    CLOSING_BRACKET reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    VOID_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOLEAN_KW      reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHARACTER_KW    reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INTEGER_KW      reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CHAR_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    BOOL_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    INT_KW          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    $end            reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CLOSING_BRACE   reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    SEMICOLON       reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_BRACE   reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    IF_KW           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TILL_KW         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    COMEBACK_KW     reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    GIVEBACK_KW     reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONTINUE_KW     reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    LETTER          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    AA_LOP          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OO_LOP          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TIL_LOP         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    AND_LOP         reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OR_LOP          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    MI_OP           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    MU_OP           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    QU_UOP          reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OPENING_PARENTHESES reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    CONST_KW        reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    TRUE            reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    FALSE           reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)
    OTHER_KW        reduce using rule 49 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody .)


state 174

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE . ifBody ifBody CLOSING_BRACE
    (44) compoundPhrase -> OPENING_BRACE . localDeclarations statementList CLOSING_BRACE
    (51) ifBody -> . statement
    (52) ifBody -> . statement OTHER_KW statement
    (53) ifBody -> . SEMICOLON
    (34) localDeclarations -> . localDeclarations ScopedVariableDec
    (35) localDeclarations -> .
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for OPENING_BRACE resolved as shift
  ! shift/reduce conflict for IF_KW resolved as shift
  ! shift/reduce conflict for TILL_KW resolved as shift
  ! shift/reduce conflict for COMEBACK_KW resolved as shift
  ! shift/reduce conflict for GIVEBACK_KW resolved as shift
  ! shift/reduce conflict for CONTINUE_KW resolved as shift
  ! shift/reduce conflict for LETTER resolved as shift
  ! shift/reduce conflict for AA_LOP resolved as shift
  ! shift/reduce conflict for OO_LOP resolved as shift
  ! shift/reduce conflict for TIL_LOP resolved as shift
  ! shift/reduce conflict for AND_LOP resolved as shift
  ! shift/reduce conflict for OR_LOP resolved as shift
  ! shift/reduce conflict for MI_OP resolved as shift
  ! shift/reduce conflict for MU_OP resolved as shift
  ! shift/reduce conflict for QU_UOP resolved as shift
  ! shift/reduce conflict for OPENING_PARENTHESES resolved as shift
  ! shift/reduce conflict for CONST_KW resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 176
    STATIC_KW       reduce using rule 35 (localDeclarations -> .)
    BOOLEAN_KW      reduce using rule 35 (localDeclarations -> .)
    CHARACTER_KW    reduce using rule 35 (localDeclarations -> .)
    INTEGER_KW      reduce using rule 35 (localDeclarations -> .)
    CHAR_KW         reduce using rule 35 (localDeclarations -> .)
    BOOL_KW         reduce using rule 35 (localDeclarations -> .)
    INT_KW          reduce using rule 35 (localDeclarations -> .)
    CLOSING_BRACE   reduce using rule 35 (localDeclarations -> .)
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

  ! SEMICOLON       [ reduce using rule 35 (localDeclarations -> .) ]
  ! OPENING_BRACE   [ reduce using rule 35 (localDeclarations -> .) ]
  ! IF_KW           [ reduce using rule 35 (localDeclarations -> .) ]
  ! TILL_KW         [ reduce using rule 35 (localDeclarations -> .) ]
  ! COMEBACK_KW     [ reduce using rule 35 (localDeclarations -> .) ]
  ! GIVEBACK_KW     [ reduce using rule 35 (localDeclarations -> .) ]
  ! CONTINUE_KW     [ reduce using rule 35 (localDeclarations -> .) ]
  ! LETTER          [ reduce using rule 35 (localDeclarations -> .) ]
  ! AA_LOP          [ reduce using rule 35 (localDeclarations -> .) ]
  ! OO_LOP          [ reduce using rule 35 (localDeclarations -> .) ]
  ! TIL_LOP         [ reduce using rule 35 (localDeclarations -> .) ]
  ! AND_LOP         [ reduce using rule 35 (localDeclarations -> .) ]
  ! OR_LOP          [ reduce using rule 35 (localDeclarations -> .) ]
  ! MI_OP           [ reduce using rule 35 (localDeclarations -> .) ]
  ! MU_OP           [ reduce using rule 35 (localDeclarations -> .) ]
  ! QU_UOP          [ reduce using rule 35 (localDeclarations -> .) ]
  ! OPENING_PARENTHESES [ reduce using rule 35 (localDeclarations -> .) ]
  ! CONST_KW        [ reduce using rule 35 (localDeclarations -> .) ]
  ! TRUE            [ reduce using rule 35 (localDeclarations -> .) ]
  ! FALSE           [ reduce using rule 35 (localDeclarations -> .) ]

    eachExpression                 shift and go to state 75
    ifBody                         shift and go to state 178
    localDeclarations              shift and go to state 137
    statement                      shift and go to state 175
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 175

    (51) ifBody -> statement .
    (52) ifBody -> statement . OTHER_KW statement

  ! shift/reduce conflict for OTHER_KW resolved as shift
    CLOSING_BRACKET reduce using rule 51 (ifBody -> statement .)
    VOID_KW         reduce using rule 51 (ifBody -> statement .)
    BOOLEAN_KW      reduce using rule 51 (ifBody -> statement .)
    CHARACTER_KW    reduce using rule 51 (ifBody -> statement .)
    INTEGER_KW      reduce using rule 51 (ifBody -> statement .)
    CHAR_KW         reduce using rule 51 (ifBody -> statement .)
    BOOL_KW         reduce using rule 51 (ifBody -> statement .)
    INT_KW          reduce using rule 51 (ifBody -> statement .)
    $end            reduce using rule 51 (ifBody -> statement .)
    CLOSING_BRACE   reduce using rule 51 (ifBody -> statement .)
    SEMICOLON       reduce using rule 51 (ifBody -> statement .)
    OPENING_BRACE   reduce using rule 51 (ifBody -> statement .)
    IF_KW           reduce using rule 51 (ifBody -> statement .)
    TILL_KW         reduce using rule 51 (ifBody -> statement .)
    COMEBACK_KW     reduce using rule 51 (ifBody -> statement .)
    GIVEBACK_KW     reduce using rule 51 (ifBody -> statement .)
    CONTINUE_KW     reduce using rule 51 (ifBody -> statement .)
    LETTER          reduce using rule 51 (ifBody -> statement .)
    AA_LOP          reduce using rule 51 (ifBody -> statement .)
    OO_LOP          reduce using rule 51 (ifBody -> statement .)
    TIL_LOP         reduce using rule 51 (ifBody -> statement .)
    AND_LOP         reduce using rule 51 (ifBody -> statement .)
    OR_LOP          reduce using rule 51 (ifBody -> statement .)
    MI_OP           reduce using rule 51 (ifBody -> statement .)
    MU_OP           reduce using rule 51 (ifBody -> statement .)
    QU_UOP          reduce using rule 51 (ifBody -> statement .)
    OPENING_PARENTHESES reduce using rule 51 (ifBody -> statement .)
    CONST_KW        reduce using rule 51 (ifBody -> statement .)
    TRUE            reduce using rule 51 (ifBody -> statement .)
    FALSE           reduce using rule 51 (ifBody -> statement .)
    OTHER_KW        shift and go to state 179

  ! OTHER_KW        [ reduce using rule 51 (ifBody -> statement .) ]


state 176

    (53) ifBody -> SEMICOLON .
    (48) phrase -> SEMICOLON .

  ! reduce/reduce conflict for CLOSING_BRACKET resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for VOID_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for BOOLEAN_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CHARACTER_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for INTEGER_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CHAR_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for BOOL_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for INT_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CLOSING_BRACE resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OPENING_BRACE resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for IF_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TILL_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for COMEBACK_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for GIVEBACK_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for LETTER resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for AA_LOP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OO_LOP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TIL_LOP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for AND_LOP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OR_LOP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for MI_OP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for MU_OP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for QU_UOP resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OPENING_PARENTHESES resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for CONST_KW resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 48 (phrase -> SEMICOLON .)
  ! reduce/reduce conflict for OTHER_KW resolved using rule 48 (phrase -> SEMICOLON .)
    CLOSING_BRACKET reduce using rule 48 (phrase -> SEMICOLON .)
    VOID_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    BOOLEAN_KW      reduce using rule 48 (phrase -> SEMICOLON .)
    CHARACTER_KW    reduce using rule 48 (phrase -> SEMICOLON .)
    INTEGER_KW      reduce using rule 48 (phrase -> SEMICOLON .)
    CHAR_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    BOOL_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    INT_KW          reduce using rule 48 (phrase -> SEMICOLON .)
    $end            reduce using rule 48 (phrase -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 48 (phrase -> SEMICOLON .)
    SEMICOLON       reduce using rule 48 (phrase -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 48 (phrase -> SEMICOLON .)
    IF_KW           reduce using rule 48 (phrase -> SEMICOLON .)
    TILL_KW         reduce using rule 48 (phrase -> SEMICOLON .)
    COMEBACK_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    GIVEBACK_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 48 (phrase -> SEMICOLON .)
    LETTER          reduce using rule 48 (phrase -> SEMICOLON .)
    AA_LOP          reduce using rule 48 (phrase -> SEMICOLON .)
    OO_LOP          reduce using rule 48 (phrase -> SEMICOLON .)
    TIL_LOP         reduce using rule 48 (phrase -> SEMICOLON .)
    AND_LOP         reduce using rule 48 (phrase -> SEMICOLON .)
    OR_LOP          reduce using rule 48 (phrase -> SEMICOLON .)
    MI_OP           reduce using rule 48 (phrase -> SEMICOLON .)
    MU_OP           reduce using rule 48 (phrase -> SEMICOLON .)
    QU_UOP          reduce using rule 48 (phrase -> SEMICOLON .)
    OPENING_PARENTHESES reduce using rule 48 (phrase -> SEMICOLON .)
    CONST_KW        reduce using rule 48 (phrase -> SEMICOLON .)
    TRUE            reduce using rule 48 (phrase -> SEMICOLON .)
    FALSE           reduce using rule 48 (phrase -> SEMICOLON .)
    OTHER_KW        reduce using rule 48 (phrase -> SEMICOLON .)

  ! CLOSING_BRACKET [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! VOID_KW         [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! BOOLEAN_KW      [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! CHARACTER_KW    [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! INTEGER_KW      [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! CHAR_KW         [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! BOOL_KW         [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! INT_KW          [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! $end            [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! CLOSING_BRACE   [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! OPENING_BRACE   [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! IF_KW           [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! TILL_KW         [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! COMEBACK_KW     [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! GIVEBACK_KW     [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! CONTINUE_KW     [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! LETTER          [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! AA_LOP          [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! OO_LOP          [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! TIL_LOP         [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! AND_LOP         [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! OR_LOP          [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! MI_OP           [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! MU_OP           [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! QU_UOP          [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! OPENING_PARENTHESES [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! CONST_KW        [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! TRUE            [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! FALSE           [ reduce using rule 53 (ifBody -> SEMICOLON .) ]
  ! OTHER_KW        [ reduce using rule 53 (ifBody -> SEMICOLON .) ]


state 177

    (54) iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .

    CLOSING_BRACKET reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    VOID_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOLEAN_KW      reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHARACTER_KW    reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INTEGER_KW      reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CHAR_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    BOOL_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    INT_KW          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    $end            reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CLOSING_BRACE   reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    SEMICOLON       reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_BRACE   reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    IF_KW           reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TILL_KW         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    COMEBACK_KW     reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    GIVEBACK_KW     reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONTINUE_KW     reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    LETTER          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AA_LOP          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OO_LOP          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TIL_LOP         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    AND_LOP         reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OR_LOP          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MI_OP           reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    MU_OP           reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    QU_UOP          reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OPENING_PARENTHESES reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    CONST_KW        reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    TRUE            reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    FALSE           reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)
    OTHER_KW        reduce using rule 54 (iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement .)


state 178

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody . ifBody CLOSING_BRACE
    (51) ifBody -> . statement
    (52) ifBody -> . statement OTHER_KW statement
    (53) ifBody -> . SEMICOLON
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    SEMICOLON       shift and go to state 176
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    eachExpression                 shift and go to state 75
    ifBody                         shift and go to state 180
    statement                      shift and go to state 175
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 179

    (52) ifBody -> statement OTHER_KW . statement
    (38) statement -> . phrase
    (39) statement -> . compoundPhrase
    (40) statement -> . selectPhrase
    (41) statement -> . iterationPhrase
    (42) statement -> . returnPhrase
    (43) statement -> . continue
    (47) phrase -> . allExpression SEMICOLON
    (48) phrase -> . SEMICOLON
    (44) compoundPhrase -> . OPENING_BRACE localDeclarations statementList CLOSING_BRACE
    (49) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody
    (50) selectPhrase -> . IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE
    (54) iterationPhrase -> . TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement
    (55) returnPhrase -> . COMEBACK_KW SEMICOLON
    (56) returnPhrase -> . GIVEBACK_KW allExpression SEMICOLON
    (57) returnPhrase -> . GIVEBACK_KW numOrLetter SEMICOLON
    (58) continue -> . CONTINUE_KW SEMICOLON
    (59) allExpression -> . alterable mathOp allExpression
    (60) allExpression -> . alterable PP_OP
    (61) allExpression -> . alterable MM_OP
    (62) allExpression -> . eachExpression
    (63) allExpression -> . alterable mathOp alterable
    (98) alterable -> . LETTER numOrLetter
    (99) alterable -> . alterable OPENING_BRACKET allExpression CLOSING_BRACKET
    (100) alterable -> . alterable LETTER numOrLetter
    (69) eachExpression -> . eachExpression logicOp eachExpression
    (70) eachExpression -> . eachExpression logicOp THEN_KW eachExpression
    (71) eachExpression -> . logicOp eachExpression
    (72) eachExpression -> . relExpression
    (73) eachExpression -> . eachExpression logicOp ELSE_KW eachExpression
    (111) logicOp -> . AA_LOP
    (112) logicOp -> . OO_LOP
    (113) logicOp -> . TIL_LOP
    (114) logicOp -> . AND_LOP
    (115) logicOp -> . OR_LOP
    (74) relExpression -> . mathEXP compareType mathEXP
    (75) relExpression -> . mathEXP
    (84) mathEXP -> . mathEXP op mathEXP
    (85) mathEXP -> . unaryExpression
    (91) unaryExpression -> . unaryop unaryExpression
    (92) unaryExpression -> . factor
    (93) unaryop -> . MI_OP
    (94) unaryop -> . MU_OP
    (95) unaryop -> . QU_UOP
    (96) factor -> . inalterable
    (97) factor -> . alterable
    (101) inalterable -> . OPENING_PARENTHESES allExpression CLOSING_PARENTHESES
    (102) inalterable -> . constant
    (103) inalterable -> . LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES
    (108) constant -> . CONST_KW
    (109) constant -> . TRUE
    (110) constant -> . FALSE

    SEMICOLON       shift and go to state 107
    OPENING_BRACE   shift and go to state 108
    IF_KW           shift and go to state 109
    TILL_KW         shift and go to state 110
    COMEBACK_KW     shift and go to state 111
    GIVEBACK_KW     shift and go to state 112
    CONTINUE_KW     shift and go to state 113
    LETTER          shift and go to state 76
    AA_LOP          shift and go to state 48
    OO_LOP          shift and go to state 49
    TIL_LOP         shift and go to state 50
    AND_LOP         shift and go to state 51
    OR_LOP          shift and go to state 52
    MI_OP           shift and go to state 57
    MU_OP           shift and go to state 58
    QU_UOP          shift and go to state 59
    OPENING_PARENTHESES shift and go to state 44
    CONST_KW        shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66

    statement                      shift and go to state 181
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 180

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 182


state 181

    (52) ifBody -> statement OTHER_KW statement .

    CLOSING_BRACKET reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    VOID_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    BOOLEAN_KW      reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CHARACTER_KW    reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    INTEGER_KW      reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CHAR_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    BOOL_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    INT_KW          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    $end            reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CLOSING_BRACE   reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    SEMICOLON       reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OPENING_BRACE   reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    IF_KW           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TILL_KW         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    COMEBACK_KW     reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    GIVEBACK_KW     reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CONTINUE_KW     reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    LETTER          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    AA_LOP          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OO_LOP          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TIL_LOP         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    AND_LOP         reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OR_LOP          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    MI_OP           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    MU_OP           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    QU_UOP          reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OPENING_PARENTHESES reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    CONST_KW        reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    TRUE            reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    FALSE           reduce using rule 52 (ifBody -> statement OTHER_KW statement .)
    OTHER_KW        reduce using rule 52 (ifBody -> statement OTHER_KW statement .)


state 182

    (50) selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .

    CLOSING_BRACKET reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    VOID_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOLEAN_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHARACTER_KW    reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INTEGER_KW      reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CHAR_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    BOOL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    INT_KW          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    $end            reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    SEMICOLON       reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    IF_KW           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TILL_KW         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    COMEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    GIVEBACK_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    LETTER          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    AA_LOP          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OO_LOP          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TIL_LOP         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    AND_LOP         reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OR_LOP          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    MI_OP           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    MU_OP           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    QU_UOP          reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OPENING_PARENTHESES reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    CONST_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    TRUE            reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    FALSE           reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)
    OTHER_KW        reduce using rule 50 (selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LETTER in state 63 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 76 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 79 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 79 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 79 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 79 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 79 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 97 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 127 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 127 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 127 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 127 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 127 resolved as shift
WARNING: shift/reduce conflict for PL_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for DI_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for PE_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 143 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 148 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 149 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 149 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 149 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 149 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 149 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 174 resolved as shift
WARNING: shift/reduce conflict for OPENING_BRACE in state 174 resolved as shift
WARNING: shift/reduce conflict for IF_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for TILL_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for COMEBACK_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for GIVEBACK_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for LETTER in state 174 resolved as shift
WARNING: shift/reduce conflict for AA_LOP in state 174 resolved as shift
WARNING: shift/reduce conflict for OO_LOP in state 174 resolved as shift
WARNING: shift/reduce conflict for TIL_LOP in state 174 resolved as shift
WARNING: shift/reduce conflict for AND_LOP in state 174 resolved as shift
WARNING: shift/reduce conflict for OR_LOP in state 174 resolved as shift
WARNING: shift/reduce conflict for MI_OP in state 174 resolved as shift
WARNING: shift/reduce conflict for MU_OP in state 174 resolved as shift
WARNING: shift/reduce conflict for QU_UOP in state 174 resolved as shift
WARNING: shift/reduce conflict for OPENING_PARENTHESES in state 174 resolved as shift
WARNING: shift/reduce conflict for CONST_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 174 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 174 resolved as shift
WARNING: shift/reduce conflict for OTHER_KW in state 175 resolved as shift
WARNING: reduce/reduce conflict in state 143 resolved using rule (numOrLetter -> LETTER)
WARNING: rejected rule (numOrLetter -> <empty>) in state 143
WARNING: reduce/reduce conflict in state 146 resolved using rule (allExpression -> alterable mathOp alterable)
WARNING: rejected rule (factor -> alterable) in state 146
WARNING: reduce/reduce conflict in state 176 resolved using rule (phrase -> SEMICOLON)
WARNING: rejected rule (ifBody -> SEMICOLON) in state 176
WARNING: Rule (ifBody -> SEMICOLON) is never reduced
