
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocOpening_ParenthesesnonassocOther_KWleftThen_KWleftElse_KWleftDoubleAndDoubleOrTildaAnd_KWOr_KWleftEqualPlusEqualMinusEqualTimesEqualDivideEqualleftPlusMinusTimesDivideModeOPleftMinusTimesQMarkAnd_KW Boolean_KW Character_KW Closing_Brace Closing_Bracket Closing_Parentheses Colon ComeBack_KW Comma Comment Const_KW Continue_KW Divide DivideEqual Dot DoubleAnd DoubleOr EEqual Else_KW Equal False_KW GEqual GiveBack_KW GreaterOP If_KW Integer_KW LEqual LessOP Letter MM Minus MinusEqual ModeOP NonEqualOP Num Opening_Brace Opening_Bracket Opening_Parentheses Or_KW Other_KW PP Plus PlusEqual QMark Semicolon Static_KW Then_KW Tilda Till_KW Times TimesEqual True_KW bool_KW char_KW idLetter idNum int_KW reserved void_KWprogram : listnumOrLetter : NumnumOrLetter : idLetterlist : list declaration\n        | declarationdeclaration : void_KW idNum Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace\n                    | type idNum Opening_Parentheses parameter Closing_Parentheses statement\n                    declaration :  void_KW idLetter Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace\n                    | type idLetter Opening_Parentheses parameter Closing_Parentheses statement\n                    | type  variableList SemicolonvariableList : variableList Comma varInitialization\n        | varInitializationvarInitialization : varForm\n        | varForm Colon Opening_Parentheses eachExpression Closing_ParenthesesvarForm : idLetter Opening_Bracket Num Closing_Bracket\n        | idLetter type : Boolean_KW\n        | Character_KW\n        | Integer_KW\n        | char_KW\n        | bool_KW\n        | int_KWparameter : listOfParameters\n        | listOfParameters : listOfParameters Semicolon paramTypeList\n        | paramTypeListparamTypeList : type paramListparamList :  paramList Comma paramId\n        | paramIdlocalDeclarations : localDeclarations Static_KW type variableList Semicolon\n        | localDeclarations type variableList Semicolon\n        | paramId : idLetter\n        | idLetter Opening_Bracket Closing_BracketstatementList :  statement statementList\n        | statement : phrase\n        statement : compoundPhrase\n        statement : selectPhrase\n        statement : iterationPhrase\n        statement : returnPhrasestatement : continuecompoundPhrase : Opening_Brace localDeclarations  statementList Closing_Bracephrase : allExpression Semicolon\n        | SemicolonselectPhrase : If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody\n                        | If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_BraceifBody : statement\n        | statement Other_KW statement\n        ifBody : SemicoloniterationPhrase : Till_KW Opening_Parentheses eachExpression Closing_Parentheses statementreturnPhrase : ComeBack_KW SemicolonreturnPhrase : GiveBack_KW allExpression SemicolonreturnPhrase : GiveBack_KW numOrLetter Semicoloncontinue : Continue_KW SemicolonallExpression : alterable mathOp allExpressionallExpression : alterable PPallExpression : alterable MMallExpression : eachExpressionallExpression : alterable mathOp alterablemathOp : EqualmathOp : PlusEqualmathOp : MinusEqualmathOp : TimesEqualmathOp : DivideEqualeachExpression : eachExpression logicOp eachExpressioneachExpression : eachExpression logicOp Then_KW eachExpressioneachExpression : logicOp eachExpressioneachExpression : relExpressioneachExpression : eachExpression logicOp Else_KW eachExpressionrelExpression : mathEXP compareType mathEXPrelExpression : mathEXPcompareType : equalcompareType : nonEqualequal : LEqualequal : GEqualequal : EEqualnonEqual : GreaterOPnonEqual : LessOPnonEqual : NonEqualOPmathEXP : unaryExpressionmathEXP : mathEXP op mathEXPop : Plusop : Minusop : Timesop : Divideop : ModeOPunaryExpression : unaryop unaryExpressionunaryExpression : factorunaryop : Minusunaryop : Timesunaryop : QMarkfactor : inalterablefactor : alterablealterable : numOrLetteralterable : alterable Opening_Bracket allExpression Closing_Bracketalterable : alterable Dot numOrLetterinalterable : Opening_Parentheses allExpression Closing_Parenthesesinalterable : constantinalterable : idLetter Opening_Parentheses args Closing_Parenthesesargs : argumentsargs : arguments : arguments Comma allExpressionarguments : allExpressionconstant : Const_KWconstant : True_KWconstant : False_KWlogicOp : DoubleAndlogicOp : DoubleOrlogicOp : TildalogicOp : And_KWlogicOp : Or_KW'
    
_lr_action_items = {'void_KW':([0,2,3,12,25,78,79,80,81,82,83,84,86,96,124,128,131,152,153,160,161,169,178,180,181,182,187,188,],[4,4,-5,-4,-10,-7,-37,-38,-39,-40,-41,-42,-45,-9,-44,-52,-55,-6,-8,-53,-54,-43,-46,-48,-45,-51,-49,-47,]),'Boolean_KW':([0,2,3,12,20,21,22,23,25,40,78,79,80,81,82,83,84,86,87,96,124,125,128,131,152,153,155,160,161,169,177,178,179,180,181,182,183,187,188,],[6,6,-5,-4,6,6,6,6,-10,6,-7,-37,-38,-39,-40,-41,-42,-45,-32,-9,-44,6,-52,-55,-6,-8,6,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'Character_KW':([0,2,3,12,20,21,22,23,25,40,78,79,80,81,82,83,84,86,87,96,124,125,128,131,152,153,155,160,161,169,177,178,179,180,181,182,183,187,188,],[7,7,-5,-4,7,7,7,7,-10,7,-7,-37,-38,-39,-40,-41,-42,-45,-32,-9,-44,7,-52,-55,-6,-8,7,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'Integer_KW':([0,2,3,12,20,21,22,23,25,40,78,79,80,81,82,83,84,86,87,96,124,125,128,131,152,153,155,160,161,169,177,178,179,180,181,182,183,187,188,],[8,8,-5,-4,8,8,8,8,-10,8,-7,-37,-38,-39,-40,-41,-42,-45,-32,-9,-44,8,-52,-55,-6,-8,8,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'char_KW':([0,2,3,12,20,21,22,23,25,40,78,79,80,81,82,83,84,86,87,96,124,125,128,131,152,153,155,160,161,169,177,178,179,180,181,182,183,187,188,],[9,9,-5,-4,9,9,9,9,-10,9,-7,-37,-38,-39,-40,-41,-42,-45,-32,-9,-44,9,-52,-55,-6,-8,9,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'bool_KW':([0,2,3,12,20,21,22,23,25,40,78,79,80,81,82,83,84,86,87,96,124,125,128,131,152,153,155,160,161,169,177,178,179,180,181,182,183,187,188,],[10,10,-5,-4,10,10,10,10,-10,10,-7,-37,-38,-39,-40,-41,-42,-45,-32,-9,-44,10,-52,-55,-6,-8,10,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'int_KW':([0,2,3,12,20,21,22,23,25,40,78,79,80,81,82,83,84,86,87,96,124,125,128,131,152,153,155,160,161,169,177,178,179,180,181,182,183,187,188,],[11,11,-5,-4,11,11,11,11,-10,11,-7,-37,-38,-39,-40,-41,-42,-45,-32,-9,-44,11,-52,-55,-6,-8,11,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'$end':([1,2,3,12,25,78,79,80,81,82,83,84,86,96,124,128,131,152,153,160,161,169,178,180,181,182,187,188,],[0,-1,-5,-4,-10,-7,-37,-38,-39,-40,-41,-42,-45,-9,-44,-52,-55,-6,-8,-53,-54,-43,-46,-48,-45,-51,-49,-47,]),'idNum':([4,5,6,7,8,9,10,11,],[13,15,-17,-18,-19,-20,-21,-22,]),'idLetter':([4,5,6,7,8,9,10,11,26,31,38,45,46,48,50,52,53,54,55,56,59,61,62,63,73,75,77,79,80,81,82,83,84,86,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,156,157,160,161,168,169,170,173,174,177,178,179,180,181,182,183,184,185,187,188,],[14,16,-17,-18,-19,-20,-21,-22,37,43,67,95,95,95,67,-108,-109,-110,-111,-112,67,-90,-91,-92,95,43,95,-37,-38,-39,-40,-41,-42,-45,-32,95,67,67,67,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,95,148,95,-44,95,67,67,-52,-55,95,-61,-62,-63,-64,-65,67,67,37,95,-53,-54,95,-43,37,95,95,-31,-46,95,-48,-45,-51,-30,95,95,-49,-47,]),'Opening_Parentheses':([13,14,15,16,27,38,45,46,48,50,52,53,54,55,56,59,61,62,63,67,73,77,79,80,81,82,83,84,86,87,88,90,92,95,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,157,160,161,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[20,21,22,23,38,48,48,48,48,48,-108,-109,-110,-111,-112,48,-90,-91,-92,119,48,48,-37,-38,-39,-40,-41,-42,-45,-32,126,127,48,119,48,48,48,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,48,48,-44,48,48,48,-52,-55,48,-61,-62,-63,-64,-65,48,48,48,-53,-54,48,-43,48,48,-31,-46,48,-48,-45,-51,-30,48,48,-49,-47,]),'Opening_Bracket':([16,37,43,65,67,68,72,94,95,130,147,148,162,166,],[24,24,76,117,-3,-95,-2,117,-3,-95,-97,-3,117,-96,]),'Colon':([16,19,37,47,],[-16,27,-16,-15,]),'Semicolon':([16,17,18,19,29,30,36,37,41,42,43,45,46,47,51,57,58,60,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,89,91,93,94,95,98,100,116,121,122,124,125,128,129,130,131,133,134,140,141,144,145,147,148,157,160,161,162,163,164,165,166,167,169,171,173,174,176,177,178,179,180,181,182,183,184,185,187,188,],[-16,25,-12,-13,40,-26,-11,-16,-27,-29,-33,86,86,-15,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,86,-25,86,-37,-38,-39,-40,-41,-42,124,-45,-32,-59,128,131,-94,-3,-14,-68,-88,-28,-34,-44,86,-52,160,161,-55,-57,-58,-98,-66,-71,-82,-97,-3,86,-53,-54,-60,-56,-67,-70,-96,-100,-43,177,181,86,183,-31,-46,181,-48,-45,-51,-30,181,86,-49,-47,]),'Comma':([16,17,18,19,36,37,41,42,43,47,51,57,58,60,64,65,66,67,68,69,70,71,72,89,94,95,98,100,116,121,122,133,134,140,141,144,145,147,148,150,151,162,163,164,165,166,167,171,175,176,],[-16,26,-12,-13,-11,-16,75,-29,-33,-15,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-59,-94,-3,-14,-68,-88,-28,-34,-57,-58,-98,-66,-71,-82,-97,-3,168,-104,-60,-56,-67,-70,-96,-100,26,-103,26,]),'Closing_Parentheses':([20,21,22,23,28,29,30,32,33,34,41,42,43,49,51,57,58,60,64,65,66,67,68,69,70,71,72,74,89,94,95,97,100,116,119,121,122,133,134,140,141,144,145,147,148,149,150,151,158,159,162,163,164,165,166,167,175,],[-24,-24,-24,-24,39,-23,-26,44,45,46,-27,-29,-33,98,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-25,-59,-94,-3,140,-68,-88,-102,-28,-34,-57,-58,-98,-66,-71,-82,-97,-3,167,-101,-104,173,174,-60,-56,-67,-70,-96,-100,-103,]),'Num':([24,38,45,46,48,50,52,53,54,55,56,59,61,62,63,73,77,79,80,81,82,83,84,86,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,157,160,161,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[35,72,72,72,72,72,-108,-109,-110,-111,-112,72,-90,-91,-92,72,72,-37,-38,-39,-40,-41,-42,-45,-32,72,72,72,72,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,72,72,72,-44,72,72,72,-52,-55,72,-61,-62,-63,-64,-65,72,72,72,-53,-54,72,-43,72,72,-31,-46,72,-48,-45,-51,-30,72,72,-49,-47,]),'Closing_Bracket':([35,51,57,58,60,64,65,66,67,68,69,70,71,72,76,89,94,95,100,116,133,134,140,141,144,145,146,147,148,162,163,164,165,166,167,],[47,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,122,-59,-94,-3,-68,-88,-57,-58,-98,-66,-71,-82,166,-97,-3,-60,-56,-67,-70,-96,-100,]),'DoubleAnd':([38,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,89,92,94,95,99,100,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,141,142,143,144,145,147,148,157,158,159,160,161,162,164,165,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[52,52,52,52,52,52,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,52,52,-37,-38,-39,-40,-41,-42,-45,-32,52,52,-94,-3,52,52,-88,52,52,-44,52,52,52,-52,-95,-55,52,-61,-62,-63,-64,-65,-98,52,52,52,-71,-82,-97,-3,52,52,52,-53,-54,-94,52,52,-96,-100,52,-43,52,52,-31,-46,52,-48,-45,-51,-30,52,52,-49,-47,]),'DoubleOr':([38,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,89,92,94,95,99,100,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,141,142,143,144,145,147,148,157,158,159,160,161,162,164,165,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[53,53,53,53,53,53,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,53,53,-37,-38,-39,-40,-41,-42,-45,-32,53,53,-94,-3,53,53,-88,53,53,-44,53,53,53,-52,-95,-55,53,-61,-62,-63,-64,-65,-98,53,53,53,-71,-82,-97,-3,53,53,53,-53,-54,-94,53,53,-96,-100,53,-43,53,53,-31,-46,53,-48,-45,-51,-30,53,53,-49,-47,]),'Tilda':([38,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,89,92,94,95,99,100,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,141,142,143,144,145,147,148,157,158,159,160,161,162,164,165,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[54,54,54,54,54,54,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,54,54,-37,-38,-39,-40,-41,-42,-45,-32,54,54,-94,-3,54,54,-88,54,54,-44,54,54,54,-52,-95,-55,54,-61,-62,-63,-64,-65,-98,54,54,54,-71,-82,-97,-3,54,54,54,-53,-54,-94,54,54,-96,-100,54,-43,54,54,-31,-46,54,-48,-45,-51,-30,54,54,-49,-47,]),'And_KW':([38,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,89,92,94,95,99,100,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,141,142,143,144,145,147,148,157,158,159,160,161,162,164,165,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[55,55,55,55,55,55,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,55,55,-37,-38,-39,-40,-41,-42,-45,-32,55,55,-94,-3,55,55,-88,55,55,-44,55,55,55,-52,-95,-55,55,-61,-62,-63,-64,-65,-98,55,55,55,-71,-82,-97,-3,55,55,55,-53,-54,-94,55,55,-96,-100,55,-43,55,55,-31,-46,55,-48,-45,-51,-30,55,55,-49,-47,]),'Or_KW':([38,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,89,92,94,95,99,100,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,141,142,143,144,145,147,148,157,158,159,160,161,162,164,165,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[56,56,56,56,56,56,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,56,56,-37,-38,-39,-40,-41,-42,-45,-32,56,56,-94,-3,56,56,-88,56,56,-44,56,56,56,-52,-95,-55,56,-61,-62,-63,-64,-65,-98,56,56,56,-71,-82,-97,-3,56,56,56,-53,-54,-94,56,56,-96,-100,56,-43,56,56,-31,-46,56,-48,-45,-51,-30,56,56,-49,-47,]),'Minus':([38,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,92,94,95,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,142,143,144,145,147,148,157,160,161,162,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[61,61,61,61,61,-108,-109,-110,-111,-112,106,-81,61,-89,-90,-91,-92,-93,-94,-99,-3,-95,-105,-106,-107,-2,61,61,-37,-38,-39,-40,-41,-42,-45,-32,61,-94,-3,61,61,61,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,-88,61,61,-44,61,61,61,-52,-95,-55,61,-61,-62,-63,-64,-65,-98,61,61,106,106,-97,-3,61,-53,-54,-94,-96,-100,61,-43,61,61,-31,-46,61,-48,-45,-51,-30,61,61,-49,-47,]),'Times':([38,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,79,80,81,82,83,84,86,87,92,94,95,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,124,125,126,127,128,130,131,132,135,136,137,138,139,140,142,143,144,145,147,148,157,160,161,162,166,167,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[62,62,62,62,62,-108,-109,-110,-111,-112,107,-81,62,-89,-90,-91,-92,-93,-94,-99,-3,-95,-105,-106,-107,-2,62,62,-37,-38,-39,-40,-41,-42,-45,-32,62,-94,-3,62,62,62,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,-88,62,62,-44,62,62,62,-52,-95,-55,62,-61,-62,-63,-64,-65,-98,62,62,107,107,-97,-3,62,-53,-54,-94,-96,-100,62,-43,62,62,-31,-46,62,-48,-45,-51,-30,62,62,-49,-47,]),'QMark':([38,45,46,48,50,52,53,54,55,56,59,61,62,63,73,77,79,80,81,82,83,84,86,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,157,160,161,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[63,63,63,63,63,-108,-109,-110,-111,-112,63,-90,-91,-92,63,63,-37,-38,-39,-40,-41,-42,-45,-32,63,63,63,63,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,63,63,-44,63,63,63,-52,-55,63,-61,-62,-63,-64,-65,63,63,63,-53,-54,63,-43,63,63,-31,-46,63,-48,-45,-51,-30,63,63,-49,-47,]),'Const_KW':([38,45,46,48,50,52,53,54,55,56,59,61,62,63,73,77,79,80,81,82,83,84,86,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,157,160,161,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[69,69,69,69,69,-108,-109,-110,-111,-112,69,-90,-91,-92,69,69,-37,-38,-39,-40,-41,-42,-45,-32,69,69,69,69,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,69,69,-44,69,69,69,-52,-55,69,-61,-62,-63,-64,-65,69,69,69,-53,-54,69,-43,69,69,-31,-46,69,-48,-45,-51,-30,69,69,-49,-47,]),'True_KW':([38,45,46,48,50,52,53,54,55,56,59,61,62,63,73,77,79,80,81,82,83,84,86,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,157,160,161,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[70,70,70,70,70,-108,-109,-110,-111,-112,70,-90,-91,-92,70,70,-37,-38,-39,-40,-41,-42,-45,-32,70,70,70,70,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,70,70,-44,70,70,70,-52,-55,70,-61,-62,-63,-64,-65,70,70,70,-53,-54,70,-43,70,70,-31,-46,70,-48,-45,-51,-30,70,70,-49,-47,]),'False_KW':([38,45,46,48,50,52,53,54,55,56,59,61,62,63,73,77,79,80,81,82,83,84,86,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,124,125,126,127,128,131,132,135,136,137,138,139,142,143,157,160,161,168,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[71,71,71,71,71,-108,-109,-110,-111,-112,71,-90,-91,-92,71,71,-37,-38,-39,-40,-41,-42,-45,-32,71,71,71,71,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,71,71,-44,71,71,71,-52,-55,71,-61,-62,-63,-64,-65,71,71,71,-53,-54,71,-43,71,71,-31,-46,71,-48,-45,-51,-30,71,71,-49,-47,]),'Opening_Brace':([39,44,45,46,73,77,79,80,81,82,83,84,86,87,124,125,128,131,157,160,161,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[73,77,87,87,87,87,-37,-38,-39,-40,-41,-42,-45,-32,-44,87,-52,-55,87,-53,-54,-43,179,87,-31,-46,87,-48,-45,-51,-30,87,87,-49,-47,]),'If_KW':([45,46,73,77,79,80,81,82,83,84,86,87,124,125,128,131,157,160,161,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[88,88,88,88,-37,-38,-39,-40,-41,-42,-45,-32,-44,88,-52,-55,88,-53,-54,-43,88,88,-31,-46,88,-48,-45,-51,-30,88,88,-49,-47,]),'Till_KW':([45,46,73,77,79,80,81,82,83,84,86,87,124,125,128,131,157,160,161,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[90,90,90,90,-37,-38,-39,-40,-41,-42,-45,-32,-44,90,-52,-55,90,-53,-54,-43,90,90,-31,-46,90,-48,-45,-51,-30,90,90,-49,-47,]),'ComeBack_KW':([45,46,73,77,79,80,81,82,83,84,86,87,124,125,128,131,157,160,161,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[91,91,91,91,-37,-38,-39,-40,-41,-42,-45,-32,-44,91,-52,-55,91,-53,-54,-43,91,91,-31,-46,91,-48,-45,-51,-30,91,91,-49,-47,]),'GiveBack_KW':([45,46,73,77,79,80,81,82,83,84,86,87,124,125,128,131,157,160,161,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[92,92,92,92,-37,-38,-39,-40,-41,-42,-45,-32,-44,92,-52,-55,92,-53,-54,-43,92,92,-31,-46,92,-48,-45,-51,-30,92,92,-49,-47,]),'Continue_KW':([45,46,73,77,79,80,81,82,83,84,86,87,124,125,128,131,157,160,161,169,173,174,177,178,179,180,181,182,183,184,185,187,188,],[93,93,93,93,-37,-38,-39,-40,-41,-42,-45,-32,-44,93,-52,-55,93,-53,-54,-43,93,93,-31,-46,93,-48,-45,-51,-30,93,93,-49,-47,]),'Then_KW':([52,53,54,55,56,99,],[-108,-109,-110,-111,-112,142,]),'Else_KW':([52,53,54,55,56,99,],[-108,-109,-110,-111,-112,143,]),'Plus':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,144,145,147,148,162,166,167,],[105,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,105,105,-97,-3,-94,-96,-100,]),'Divide':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,144,145,147,148,162,166,167,],[108,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,108,108,-97,-3,-94,-96,-100,]),'ModeOP':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,144,145,147,148,162,166,167,],[109,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,109,109,-97,-3,-94,-96,-100,]),'LEqual':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,145,147,148,162,166,167,],[110,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'GEqual':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,145,147,148,162,166,167,],[111,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'EEqual':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,145,147,148,162,166,167,],[112,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'GreaterOP':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,145,147,148,162,166,167,],[113,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'LessOP':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,145,147,148,162,166,167,],[114,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'NonEqualOP':([57,58,60,64,65,66,67,68,69,70,71,72,94,95,116,130,140,145,147,148,162,166,167,],[115,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'Dot':([65,67,68,72,94,95,130,147,148,162,166,],[118,-3,-95,-2,118,-3,-95,-97,-3,118,-96,]),'PP':([68,72,94,95,130,147,148,162,166,],[-95,-2,133,-3,-95,-97,-3,133,-96,]),'MM':([68,72,94,95,130,147,148,162,166,],[-95,-2,134,-3,-95,-97,-3,134,-96,]),'Equal':([68,72,94,95,130,147,148,162,166,],[-95,-2,135,-3,-95,-97,-3,135,-96,]),'PlusEqual':([68,72,94,95,130,147,148,162,166,],[-95,-2,136,-3,-95,-97,-3,136,-96,]),'MinusEqual':([68,72,94,95,130,147,148,162,166,],[-95,-2,137,-3,-95,-97,-3,137,-96,]),'TimesEqual':([68,72,94,95,130,147,148,162,166,],[-95,-2,138,-3,-95,-97,-3,138,-96,]),'DivideEqual':([68,72,94,95,130,147,148,162,166,],[-95,-2,139,-3,-95,-97,-3,139,-96,]),'Closing_Brace':([79,80,81,82,83,84,86,87,120,123,124,125,128,131,154,157,160,161,169,172,177,178,179,180,181,182,183,186,187,188,],[-37,-38,-39,-40,-41,-42,-45,-32,152,153,-44,-36,-52,-55,169,-36,-53,-54,-43,-35,-31,-46,-32,-48,-45,-51,-30,188,-49,-47,]),'Other_KW':([79,80,81,82,83,84,86,124,128,131,160,161,169,178,180,181,182,187,188,],[-37,-38,-39,-40,-41,-42,-45,-44,-52,-55,-53,-54,-43,-46,185,-45,-51,-49,-47,]),'Static_KW':([87,125,177,179,183,],[-32,155,-31,-32,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list':([0,],[2,]),'declaration':([0,2,],[3,12,]),'type':([0,2,20,21,22,23,40,125,155,],[5,5,31,31,31,31,31,156,170,]),'variableList':([5,156,170,],[17,171,176,]),'varInitialization':([5,26,156,170,],[18,36,18,18,]),'varForm':([5,26,156,170,],[19,19,19,19,]),'parameter':([20,21,22,23,],[28,32,33,34,]),'listOfParameters':([20,21,22,23,],[29,29,29,29,]),'paramTypeList':([20,21,22,23,40,],[30,30,30,30,74,]),'paramList':([31,],[41,]),'paramId':([31,75,],[42,121,]),'eachExpression':([38,45,46,48,50,73,77,92,99,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[49,89,89,89,100,89,89,89,141,89,89,89,158,159,89,164,165,89,89,89,89,89,89,89,]),'logicOp':([38,45,46,48,49,50,73,77,89,92,99,100,117,119,125,126,127,132,141,142,143,157,158,159,164,165,168,173,174,179,184,185,],[50,50,50,50,99,50,50,50,99,50,50,99,50,50,50,50,50,50,99,50,50,50,99,99,99,99,50,50,50,50,50,50,]),'relExpression':([38,45,46,48,50,73,77,92,99,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'mathEXP':([38,45,46,48,50,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[57,57,57,57,57,57,57,57,57,144,145,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'unaryExpression':([38,45,46,48,50,59,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[58,58,58,58,58,116,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'unaryop':([38,45,46,48,50,59,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'factor':([38,45,46,48,50,59,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'inalterable':([38,45,46,48,50,59,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'alterable':([38,45,46,48,50,59,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[65,94,94,94,65,65,94,94,94,65,65,65,94,94,94,65,65,162,65,65,94,94,94,94,94,94,94,]),'constant':([38,45,46,48,50,59,73,77,92,99,101,102,117,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'numOrLetter':([38,45,46,48,50,59,73,77,92,99,101,102,117,118,119,125,126,127,132,142,143,157,168,173,174,179,184,185,],[68,68,68,68,68,68,68,68,130,68,68,68,68,147,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'statement':([45,46,73,77,125,157,173,174,179,184,185,],[78,96,120,123,157,157,180,182,180,180,187,]),'phrase':([45,46,73,77,125,157,173,174,179,184,185,],[79,79,79,79,79,79,79,79,79,79,79,]),'compoundPhrase':([45,46,73,77,125,157,173,174,179,184,185,],[80,80,80,80,80,80,80,80,80,80,80,]),'selectPhrase':([45,46,73,77,125,157,173,174,179,184,185,],[81,81,81,81,81,81,81,81,81,81,81,]),'iterationPhrase':([45,46,73,77,125,157,173,174,179,184,185,],[82,82,82,82,82,82,82,82,82,82,82,]),'returnPhrase':([45,46,73,77,125,157,173,174,179,184,185,],[83,83,83,83,83,83,83,83,83,83,83,]),'continue':([45,46,73,77,125,157,173,174,179,184,185,],[84,84,84,84,84,84,84,84,84,84,84,]),'allExpression':([45,46,48,73,77,92,117,119,125,132,157,168,173,174,179,184,185,],[85,85,97,85,85,129,146,151,85,163,85,175,85,85,85,85,85,]),'compareType':([57,],[101,]),'op':([57,144,145,],[102,102,102,]),'equal':([57,],[103,]),'nonEqual':([57,],[104,]),'localDeclarations':([87,179,],[125,125,]),'mathOp':([94,162,],[132,132,]),'args':([119,],[149,]),'arguments':([119,],[150,]),'statementList':([125,157,],[154,172,]),'ifBody':([173,179,184,],[178,184,186,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','parser.py',48),
  ('numOrLetter -> Num','numOrLetter',1,'p_numOrLetter_num','parser.py',58),
  ('numOrLetter -> idLetter','numOrLetter',1,'p_numOrLetter_idLetter','parser.py',61),
  ('list -> list declaration','list',2,'p_list','parser.py',66),
  ('list -> declaration','list',1,'p_list','parser.py',67),
  ('declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace','declaration',8,'p_declaration_idNum','parser.py',74),
  ('declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement','declaration',6,'p_declaration_idNum','parser.py',75),
  ('declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace','declaration',8,'p_declaration_idLetter','parser.py',83),
  ('declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement','declaration',6,'p_declaration_idLetter','parser.py',84),
  ('declaration -> type variableList Semicolon','declaration',3,'p_declaration_idLetter','parser.py',85),
  ('variableList -> variableList Comma varInitialization','variableList',3,'p_variableList','parser.py',94),
  ('variableList -> varInitialization','variableList',1,'p_variableList','parser.py',95),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization','parser.py',103),
  ('varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses','varInitialization',5,'p_varInitialization','parser.py',104),
  ('varForm -> idLetter Opening_Bracket Num Closing_Bracket','varForm',4,'p_varForm','parser.py',112),
  ('varForm -> idLetter','varForm',1,'p_varForm','parser.py',113),
  ('type -> Boolean_KW','type',1,'p_type','parser.py',122),
  ('type -> Character_KW','type',1,'p_type','parser.py',123),
  ('type -> Integer_KW','type',1,'p_type','parser.py',124),
  ('type -> char_KW','type',1,'p_type','parser.py',125),
  ('type -> bool_KW','type',1,'p_type','parser.py',126),
  ('type -> int_KW','type',1,'p_type','parser.py',127),
  ('parameter -> listOfParameters','parameter',1,'p_parameter','parser.py',131),
  ('parameter -> <empty>','parameter',0,'p_parameter','parser.py',132),
  ('listOfParameters -> listOfParameters Semicolon paramTypeList','listOfParameters',3,'p_listOfParameters','parser.py',139),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters','parser.py',140),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','parser.py',147),
  ('paramList -> paramList Comma paramId','paramList',3,'p_paramList','parser.py',151),
  ('paramList -> paramId','paramList',1,'p_paramList','parser.py',152),
  ('localDeclarations -> localDeclarations Static_KW type variableList Semicolon','localDeclarations',5,'p_localDeclarations','parser.py',159),
  ('localDeclarations -> localDeclarations type variableList Semicolon','localDeclarations',4,'p_localDeclarations','parser.py',160),
  ('localDeclarations -> <empty>','localDeclarations',0,'p_localDeclarations','parser.py',161),
  ('paramId -> idLetter','paramId',1,'p_paramId','parser.py',170),
  ('paramId -> idLetter Opening_Bracket Closing_Bracket','paramId',3,'p_paramId','parser.py',171),
  ('statementList -> statement statementList','statementList',2,'p_statementList','parser.py',178),
  ('statementList -> <empty>','statementList',0,'p_statementList','parser.py',179),
  ('statement -> phrase','statement',1,'p_statement_phrase','parser.py',187),
  ('statement -> compoundPhrase','statement',1,'p_statement_compoundphrase','parser.py',192),
  ('statement -> selectPhrase','statement',1,'p_statement_selectphrase','parser.py',196),
  ('statement -> iterationPhrase','statement',1,'p_statement_iterationphrase','parser.py',200),
  ('statement -> returnPhrase','statement',1,'p_statement_returnphrase','parser.py',204),
  ('statement -> continue','statement',1,'p_statement_continue','parser.py',207),
  ('compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace','compoundPhrase',4,'p_compoundPhrase','parser.py',211),
  ('phrase -> allExpression Semicolon','phrase',2,'p_phrase','parser.py',216),
  ('phrase -> Semicolon','phrase',1,'p_phrase','parser.py',217),
  ('selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody','selectPhrase',5,'p_selectPhrase','parser.py',224),
  ('selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace','selectPhrase',8,'p_selectPhrase','parser.py',225),
  ('ifBody -> statement','ifBody',1,'p_ifBody','parser.py',233),
  ('ifBody -> statement Other_KW statement','ifBody',3,'p_ifBody','parser.py',234),
  ('ifBody -> Semicolon','ifBody',1,'p_ifBody_semicolon','parser.py',243),
  ('iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement','iterationPhrase',5,'p_iterationPhrase','parser.py',247),
  ('returnPhrase -> ComeBack_KW Semicolon','returnPhrase',2,'p_returnPhrase_cs','parser.py',251),
  ('returnPhrase -> GiveBack_KW allExpression Semicolon','returnPhrase',3,'p_returnPhrase_gas','parser.py',255),
  ('returnPhrase -> GiveBack_KW numOrLetter Semicolon','returnPhrase',3,'p_returnPhrase_gns','parser.py',259),
  ('continue -> Continue_KW Semicolon','continue',2,'p_continue','parser.py',263),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression_a','parser.py',267),
  ('allExpression -> alterable PP','allExpression',2,'p_allExpression_pp','parser.py',271),
  ('allExpression -> alterable MM','allExpression',2,'p_allExpression_mm','parser.py',275),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression_e','parser.py',279),
  ('allExpression -> alterable mathOp alterable','allExpression',3,'p_allExpression_ama','parser.py',283),
  ('mathOp -> Equal','mathOp',1,'p_mathOp_e','parser.py',287),
  ('mathOp -> PlusEqual','mathOp',1,'p_mathOp_p','parser.py',291),
  ('mathOp -> MinusEqual','mathOp',1,'p_mathOp_mi','parser.py',295),
  ('mathOp -> TimesEqual','mathOp',1,'p_mathOp_t','parser.py',299),
  ('mathOp -> DivideEqual','mathOp',1,'p_mathOp_d','parser.py',303),
  ('eachExpression -> eachExpression logicOp eachExpression','eachExpression',3,'p_eachExpression_e','parser.py',307),
  ('eachExpression -> eachExpression logicOp Then_KW eachExpression','eachExpression',4,'p_eachExpression_et','parser.py',311),
  ('eachExpression -> logicOp eachExpression','eachExpression',2,'p_eachExpression_l','parser.py',315),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression_r','parser.py',319),
  ('eachExpression -> eachExpression logicOp Else_KW eachExpression','eachExpression',4,'p_eachExpression_ele','parser.py',323),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression_c','parser.py',327),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression_m','parser.py',331),
  ('compareType -> equal','compareType',1,'p_compareType_e','parser.py',335),
  ('compareType -> nonEqual','compareType',1,'p_compareType_n','parser.py',339),
  ('equal -> LEqual','equal',1,'p_equal_l','parser.py',343),
  ('equal -> GEqual','equal',1,'p_equal_g','parser.py',347),
  ('equal -> EEqual','equal',1,'p_equal_e','parser.py',352),
  ('nonEqual -> GreaterOP','nonEqual',1,'p_nonEqual_g','parser.py',357),
  ('nonEqual -> LessOP','nonEqual',1,'p_nonEqual_l','parser.py',362),
  ('nonEqual -> NonEqualOP','nonEqual',1,'p_nonEqual_n','parser.py',367),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP_u','parser.py',372),
  ('mathEXP -> mathEXP op mathEXP','mathEXP',3,'p_mathEXP_m','parser.py',377),
  ('op -> Plus','op',1,'p_op_p','parser.py',382),
  ('op -> Minus','op',1,'p_op_m','parser.py',387),
  ('op -> Times','op',1,'p_op_t','parser.py',393),
  ('op -> Divide','op',1,'p_op_d','parser.py',398),
  ('op -> ModeOP','op',1,'p_op_mo','parser.py',403),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression_u','parser.py',408),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression_f','parser.py',413),
  ('unaryop -> Minus','unaryop',1,'p_unaryop_m','parser.py',418),
  ('unaryop -> Times','unaryop',1,'p_unaryop_t','parser.py',423),
  ('unaryop -> QMark','unaryop',1,'p_unaryop_q','parser.py',428),
  ('factor -> inalterable','factor',1,'p_factor_i','parser.py',433),
  ('factor -> alterable','factor',1,'p_factor_a','parser.py',437),
  ('alterable -> numOrLetter','alterable',1,'p_alterable_n','parser.py',442),
  ('alterable -> alterable Opening_Bracket allExpression Closing_Bracket','alterable',4,'p_alterable_a','parser.py',447),
  ('alterable -> alterable Dot numOrLetter','alterable',3,'p_alterable_ad','parser.py',452),
  ('inalterable -> Opening_Parentheses allExpression Closing_Parentheses','inalterable',3,'p_inalterable_o','parser.py',457),
  ('inalterable -> constant','inalterable',1,'p_inalterable_c','parser.py',462),
  ('inalterable -> idLetter Opening_Parentheses args Closing_Parentheses','inalterable',4,'p_inalterable_i','parser.py',467),
  ('args -> arguments','args',1,'p_args_a','parser.py',472),
  ('args -> <empty>','args',0,'p_args_e','parser.py',477),
  ('arguments -> arguments Comma allExpression','arguments',3,'p_arguments_ar','parser.py',482),
  ('arguments -> allExpression','arguments',1,'p_arguments_al','parser.py',487),
  ('constant -> Const_KW','constant',1,'p_constant_C','parser.py',492),
  ('constant -> True_KW','constant',1,'p_constant_T','parser.py',497),
  ('constant -> False_KW','constant',1,'p_constant_F','parser.py',502),
  ('logicOp -> DoubleAnd','logicOp',1,'p_logicOp_DA','parser.py',507),
  ('logicOp -> DoubleOr','logicOp',1,'p_logicOp_DO','parser.py',512),
  ('logicOp -> Tilda','logicOp',1,'p_logicOp_T','parser.py',517),
  ('logicOp -> And_KW','logicOp',1,'p_logicOp_A','parser.py',522),
  ('logicOp -> Or_KW','logicOp',1,'p_logicOp_O','parser.py',527),
]
