
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AA_LOP AND_LOP BOOLEAN_KW BOOL_KW CHARACTER_KW CHAR_KW CLOSING_BRACE CLOSING_BRACKET CLOSING_PARENTHESES COLON COMA COMEBACK_KW COMMENT CONST_KW CONTINUE_KW DIE_OP DI_OP ELSE_KW EQ_OP EQ_REL FALSE GE_REL GIVEBACK_KW GT_REL IF_KW INTEGER_KW INT_KW LETTER LE_REL LT_REL MIE_OP MI_OP MM_OP MUE_OP MU_OP NEQ_REL NUMBER OO_LOP OPENING_BRACE OPENING_BRACKET OPENING_PARENTHESES OR_LOP OTHER_KW PE_OP PLE_OP PL_OP PP_OP QU_UOP SEMICOLON STATIC_KW THEN_KW TILL_KW TIL_LOP TRUE VOID_KWprogram : listnumOrLetter : NUMBER\n        | LETTER\n        |\n        list : list declaration\n        | declarationdeclaration : function\n        | varDeclarationvarDeclaration : type  variableList SEMICOLONScopedVariableDec : scopedSpecifier variableList SEMICOLONvariableList : variableList COMA varInitialization\n        | varInitializationvarInitialization : varForm\n        | varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESESvarForm : LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET\n        | LETTER  numOrLetter scopedSpecifier : STATIC_KW type\n        | typetype : BOOLEAN_KW\n        | CHARACTER_KW\n        | INTEGER_KW\n        | CHAR_KW\n        | BOOL_KW\n        | INT_KWfunction : VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET\n                    | type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementparameter : listOfParameters\n        | listOfParameters : listOfParameters SEMICOLON paramTypeList\n        | paramTypeListparamTypeList : type paramListparamList :  paramList COMA paramId\n        | paramIdlocalDeclarations : localDeclarations ScopedVariableDec\n        | paramId : LETTER numOrLetter\n        | LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKETstatement : phrase\n        | compoundPhrase\n        | selectPhrase\n        | iterationPhrase\n        | returnPhrase\n        | continuecompoundPhrase : OPENING_BRACE localDeclarations  statementList CLOSING_BRACEstatementList : statementList statement\n        | phrase : allExpression SEMICOLON\n        | SEMICOLONselectPhrase : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody\n                        | IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACEifBody : statement\n        | statement OTHER_KW statement\n        | SEMICOLONiterationPhrase : TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementreturnPhrase : COMEBACK_KW SEMICOLON\n        | GIVEBACK_KW allExpression SEMICOLON\n        | GIVEBACK_KW numOrLetter SEMICOLONcontinue : CONTINUE_KW SEMICOLONallExpression : alterable mathOp allExpression\n        | alterable PP_OP\n        | alterable MM_OP\n        | eachExpression\n        | alterable mathOp alterablemathOp : EQ_OP\n        | PLE_OP\n        | MIE_OP\n        | MUE_OP\n        | DIE_OPeachExpression : eachExpression logicOp eachExpression\n        | eachExpression logicOp THEN_KW eachExpression\n        | logicOp eachExpression\n        | relExpression\n        | eachExpression logicOp ELSE_KW eachExpressionrelExpression : mathEXP compareType mathEXP\n        | mathEXPcompareType : equal\n        | nonEQ_OPequal : LE_REL\n        | GE_REL\n        | EQ_RELnonEQ_OP : GT_REL\n        | LT_REL\n        | NEQ_RELmathEXP : mathEXP op mathEXP\n        | unaryExpressionop : PL_OP\n        | MI_OP\n        | MU_OP\n        | DI_OP\n        | PE_OPunaryExpression : unaryop unaryExpression\n        | factorunaryop : MI_OP\n        | MU_OP\n        | QU_UOPfactor : inalterable\n        | alterablealterable : LETTER numOrLetter\n        | alterable OPENING_BRACKET allExpression CLOSING_BRACKET\n        | alterable LETTER numOrLetterinalterable : OPENING_PARENTHESES allExpression CLOSING_PARENTHESES\n        | constant\n        | LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESESargs : arguments\n        | arguments : arguments COMA allExpression\n        | allExpressionconstant : CONST_KW\n        | TRUE\n        | FALSElogicOp : AA_LOP\n        | OO_LOP\n        | TIL_LOP\n        | AND_LOP\n        | OR_LOP'
    
_lr_action_items = {'VOID_KW':([0,2,3,4,5,14,24,100,101,102,103,104,105,107,116,135,136,140,144,161,162,165,173,175,176,177,181,182,],[6,6,-6,-7,-8,-5,-9,-38,-39,-40,-41,-42,-43,-48,-26,-25,-47,-55,-58,-56,-57,-44,-49,-51,-48,-54,-52,-50,]),'BOOLEAN_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[8,8,-6,-7,-8,-5,8,-9,8,8,-38,-39,-40,-41,-42,-43,-48,-35,-26,-25,-47,8,-55,-58,-34,8,-56,-57,-44,-10,-49,-35,-51,-48,-54,-52,-50,]),'CHARACTER_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[9,9,-6,-7,-8,-5,9,-9,9,9,-38,-39,-40,-41,-42,-43,-48,-35,-26,-25,-47,9,-55,-58,-34,9,-56,-57,-44,-10,-49,-35,-51,-48,-54,-52,-50,]),'INTEGER_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[10,10,-6,-7,-8,-5,10,-9,10,10,-38,-39,-40,-41,-42,-43,-48,-35,-26,-25,-47,10,-55,-58,-34,10,-56,-57,-44,-10,-49,-35,-51,-48,-54,-52,-50,]),'CHAR_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[11,11,-6,-7,-8,-5,11,-9,11,11,-38,-39,-40,-41,-42,-43,-48,-35,-26,-25,-47,11,-55,-58,-34,11,-56,-57,-44,-10,-49,-35,-51,-48,-54,-52,-50,]),'BOOL_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[12,12,-6,-7,-8,-5,12,-9,12,12,-38,-39,-40,-41,-42,-43,-48,-35,-26,-25,-47,12,-55,-58,-34,12,-56,-57,-44,-10,-49,-35,-51,-48,-54,-52,-50,]),'INT_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[13,13,-6,-7,-8,-5,13,-9,13,13,-38,-39,-40,-41,-42,-43,-48,-35,-26,-25,-47,13,-55,-58,-34,13,-56,-57,-44,-10,-49,-35,-51,-48,-54,-52,-50,]),'$end':([1,2,3,4,5,14,24,100,101,102,103,104,105,107,116,135,136,140,144,161,162,165,173,175,176,177,181,182,],[0,-1,-6,-7,-8,-5,-9,-38,-39,-40,-41,-42,-43,-48,-26,-25,-47,-55,-58,-56,-57,-44,-49,-51,-48,-54,-52,-50,]),'NUMBER':([6,18,32,34,40,63,76,97,112,143,],[16,16,42,16,16,16,16,16,16,16,]),'LETTER':([6,7,8,9,10,11,12,13,16,17,18,25,30,34,35,40,44,46,48,49,50,51,52,55,57,58,59,61,63,67,69,71,74,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,126,128,129,133,134,136,137,138,139,140,143,144,146,150,154,155,156,158,161,162,164,165,166,168,169,170,172,173,174,175,176,177,178,179,181,182,],[17,18,-19,-20,-21,-22,-23,-24,-2,-3,17,34,40,17,63,17,76,63,-111,-112,-113,-114,-115,63,-93,-94,-95,97,17,76,40,76,97,17,63,63,63,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,76,17,-98,-38,-39,-40,-41,-42,-43,-48,-35,143,76,-64,-65,-66,-67,-68,-98,63,63,-100,76,-47,-46,63,63,-55,17,-58,97,-99,76,-34,34,-18,-56,-57,76,-44,-45,-17,76,76,-10,-49,76,-51,-48,-54,76,76,-52,-50,]),'OPENING_PARENTHESES':([6,15,16,17,18,23,26,35,44,46,48,49,50,51,52,55,57,58,59,63,67,71,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,100,101,102,103,104,105,107,108,109,110,112,118,121,122,123,124,125,126,128,129,134,136,137,138,139,140,143,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-4,22,-2,-3,-4,31,35,44,44,44,-111,-112,-113,-114,-115,44,-93,-94,-95,-4,44,44,-4,44,44,44,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,44,134,-38,-39,-40,-41,-42,-43,-48,-35,138,139,44,44,-64,-65,-66,-67,-68,134,44,44,44,-47,-46,44,44,-55,-4,-58,44,-34,-56,-57,44,-44,-45,44,44,-10,-49,44,-51,-48,-54,44,44,-52,-50,]),'OPENING_BRACKET':([16,17,18,23,34,36,40,43,61,63,70,74,76,97,98,126,133,143,146,150,],[-2,-3,-4,32,-4,67,-4,32,96,-4,115,96,-4,-4,-98,-98,-100,-4,96,-99,]),'COLON':([16,17,18,21,23,34,43,72,],[-2,-3,-4,26,-16,-4,-16,-15,]),'SEMICOLON':([16,17,18,19,20,21,23,28,29,33,34,38,39,40,43,47,53,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,79,95,97,98,100,101,102,103,104,105,106,107,108,111,112,113,114,117,119,120,126,127,130,131,133,136,137,140,141,142,143,144,145,146,147,148,149,150,154,155,161,162,163,165,166,167,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,-4,24,-12,-13,-16,37,-30,-11,-4,-31,-33,-4,-16,-72,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,107,-29,-36,107,-15,-97,-62,-4,-14,-71,-91,-4,-98,-38,-39,-40,-41,-42,-43,136,-48,-35,140,-4,144,-32,-101,-60,-61,-98,-69,-74,-84,-100,-47,-46,-55,161,162,-3,-58,-37,-63,-59,-70,-73,-99,107,-34,-56,-57,-103,-44,-45,172,176,107,-10,-49,176,-51,-48,-54,176,107,-52,-50,]),'COMA':([16,17,18,19,20,21,23,33,34,38,39,40,43,47,53,54,56,60,61,62,63,64,65,66,70,72,74,75,76,77,79,95,97,98,114,117,119,120,126,127,130,131,133,145,146,147,148,149,150,152,153,163,167,171,],[-2,-3,-4,25,-12,-13,-16,-11,-4,69,-33,-4,-16,-72,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,-36,-15,-97,-62,-4,-14,-71,-91,-4,-98,-32,-101,-60,-61,-98,-69,-74,-84,-100,-37,-63,-59,-70,-73,-99,164,-107,-103,25,-106,]),'CLOSING_PARENTHESES':([16,17,22,27,28,29,31,38,39,40,41,45,47,53,54,56,60,61,62,63,64,65,66,68,70,73,74,75,76,79,95,97,98,114,117,119,120,126,127,130,131,133,134,145,146,147,148,149,150,151,152,153,159,160,163,171,],[-2,-3,-28,36,-27,-30,-28,-31,-33,-4,71,77,-72,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,-29,-36,117,-97,-62,-4,-71,-91,-4,-98,-32,-101,-60,-61,-98,-69,-74,-84,-100,-105,-37,-63,-59,-70,-73,-99,163,-104,-107,169,170,-103,-106,]),'PL_OP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,130,131,133,143,146,150,163,],[-2,-3,84,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,84,84,-100,-4,-97,-99,-103,]),'MI_OP':([16,17,35,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,74,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,128,129,130,131,133,134,136,137,138,139,140,143,144,146,150,154,155,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,57,57,57,-111,-112,-113,-114,-115,85,-85,57,-92,-93,-94,-95,-96,-97,-102,-4,-108,-109,-110,57,57,-97,-4,57,57,57,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,-91,57,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,57,-101,57,-64,-65,-66,-67,-68,-98,57,57,85,85,-100,57,-47,-46,57,57,-55,-4,-58,-97,-99,57,-34,-56,-57,-103,57,-44,-45,57,57,-10,-49,57,-51,-48,-54,57,57,-52,-50,]),'MU_OP':([16,17,35,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,74,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,128,129,130,131,133,134,136,137,138,139,140,143,144,146,150,154,155,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,58,58,58,-111,-112,-113,-114,-115,86,-85,58,-92,-93,-94,-95,-96,-97,-102,-4,-108,-109,-110,58,58,-97,-4,58,58,58,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,-91,58,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,58,-101,58,-64,-65,-66,-67,-68,-98,58,58,86,86,-100,58,-47,-46,58,58,-55,-4,-58,-97,-99,58,-34,-56,-57,-103,58,-44,-45,58,58,-10,-49,58,-51,-48,-54,58,58,-52,-50,]),'DI_OP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,130,131,133,143,146,150,163,],[-2,-3,87,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,87,87,-100,-4,-97,-99,-103,]),'PE_OP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,130,131,133,143,146,150,163,],[-2,-3,88,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,88,88,-100,-4,-97,-99,-103,]),'LE_REL':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,89,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,-84,-100,-4,-97,-99,-103,]),'GE_REL':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,90,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,-84,-100,-4,-97,-99,-103,]),'EQ_REL':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,91,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,-84,-100,-4,-97,-99,-103,]),'GT_REL':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,92,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,-84,-100,-4,-97,-99,-103,]),'LT_REL':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,93,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,-84,-100,-4,-97,-99,-103,]),'NEQ_REL':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,94,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-4,-91,-4,-98,-101,-98,-84,-100,-4,-97,-99,-103,]),'AA_LOP':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,48,48,48,48,-72,-111,-112,-113,-114,-115,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,48,48,-97,48,-4,48,48,-91,48,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,48,-101,48,-64,-65,-66,-67,-68,-98,48,48,48,-74,-84,-100,48,-47,-46,48,48,-55,-4,-58,-97,48,48,-99,48,-34,48,48,-56,-57,-103,48,-44,-45,48,48,-10,-49,48,-51,-48,-54,48,48,-52,-50,]),'OO_LOP':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,49,49,49,49,-72,-111,-112,-113,-114,-115,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,49,49,-97,49,-4,49,49,-91,49,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,49,-101,49,-64,-65,-66,-67,-68,-98,49,49,49,-74,-84,-100,49,-47,-46,49,49,-55,-4,-58,-97,49,49,-99,49,-34,49,49,-56,-57,-103,49,-44,-45,49,49,-10,-49,49,-51,-48,-54,49,49,-52,-50,]),'TIL_LOP':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,50,50,50,50,-72,-111,-112,-113,-114,-115,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,50,50,-97,50,-4,50,50,-91,50,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,50,-101,50,-64,-65,-66,-67,-68,-98,50,50,50,-74,-84,-100,50,-47,-46,50,50,-55,-4,-58,-97,50,50,-99,50,-34,50,50,-56,-57,-103,50,-44,-45,50,50,-10,-49,50,-51,-48,-54,50,50,-52,-50,]),'AND_LOP':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,51,51,51,51,-72,-111,-112,-113,-114,-115,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,51,51,-97,51,-4,51,51,-91,51,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,51,-101,51,-64,-65,-66,-67,-68,-98,51,51,51,-74,-84,-100,51,-47,-46,51,51,-55,-4,-58,-97,51,51,-99,51,-34,51,51,-56,-57,-103,51,-44,-45,51,51,-10,-49,51,-51,-48,-54,51,51,-52,-50,]),'OR_LOP':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,52,52,52,52,-72,-111,-112,-113,-114,-115,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,52,52,-97,52,-4,52,52,-91,52,-4,-98,-38,-39,-40,-41,-42,-43,-48,-35,52,-101,52,-64,-65,-66,-67,-68,-98,52,52,52,-74,-84,-100,52,-47,-46,52,52,-55,-4,-58,-97,52,52,-99,52,-34,52,52,-56,-57,-103,52,-44,-45,52,52,-10,-49,52,-51,-48,-54,52,52,-52,-50,]),'CLOSING_BRACKET':([16,17,42,47,53,54,56,60,61,62,63,64,65,66,74,75,76,79,95,97,98,99,100,101,102,103,104,105,107,115,117,119,120,126,127,130,131,132,133,136,140,144,146,147,148,149,150,161,162,163,165,173,175,176,177,181,182,],[-2,-3,72,-72,-75,-85,-92,-96,-97,-102,-4,-108,-109,-110,-97,-62,-4,-71,-91,-4,-98,135,-38,-39,-40,-41,-42,-43,-48,145,-101,-60,-61,-98,-69,-74,-84,150,-100,-47,-55,-58,-63,-59,-70,-73,-99,-56,-57,-103,-44,-49,-51,-48,-54,-52,-50,]),'PP_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,119,-4,-4,-98,-100,-4,119,-99,]),'MM_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,120,-4,-4,-98,-100,-4,120,-99,]),'EQ_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,121,-4,-4,-98,-100,-4,121,-99,]),'PLE_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,122,-4,-4,-98,-100,-4,122,-99,]),'MIE_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,123,-4,-4,-98,-100,-4,123,-99,]),'MUE_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,124,-4,-4,-98,-100,-4,124,-99,]),'DIE_OP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,125,-4,-4,-98,-100,-4,125,-99,]),'QU_UOP':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[59,59,59,-111,-112,-113,-114,-115,59,-93,-94,-95,59,59,59,59,59,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,59,-38,-39,-40,-41,-42,-43,-48,-35,59,59,-64,-65,-66,-67,-68,59,59,59,-47,-46,59,59,-55,-58,59,-34,-56,-57,59,-44,-45,59,59,-10,-49,59,-51,-48,-54,59,59,-52,-50,]),'CONST_KW':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[64,64,64,-111,-112,-113,-114,-115,64,-93,-94,-95,64,64,64,64,64,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,64,-38,-39,-40,-41,-42,-43,-48,-35,64,64,-64,-65,-66,-67,-68,64,64,64,-47,-46,64,64,-55,-58,64,-34,-56,-57,64,-44,-45,64,64,-10,-49,64,-51,-48,-54,64,64,-52,-50,]),'TRUE':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[65,65,65,-111,-112,-113,-114,-115,65,-93,-94,-95,65,65,65,65,65,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,65,-38,-39,-40,-41,-42,-43,-48,-35,65,65,-64,-65,-66,-67,-68,65,65,65,-47,-46,65,65,-55,-58,65,-34,-56,-57,65,-44,-45,65,65,-10,-49,65,-51,-48,-54,65,65,-52,-50,]),'FALSE':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[66,66,66,-111,-112,-113,-114,-115,66,-93,-94,-95,66,66,66,66,66,-76,-77,-86,-87,-88,-89,-90,-78,-79,-80,-81,-82,-83,66,-38,-39,-40,-41,-42,-43,-48,-35,66,66,-64,-65,-66,-67,-68,66,66,66,-47,-46,66,66,-55,-58,66,-34,-56,-57,66,-44,-45,66,66,-10,-49,66,-51,-48,-54,66,66,-52,-50,]),'THEN_KW':([48,49,50,51,52,78,],[-111,-112,-113,-114,-115,128,]),'ELSE_KW':([48,49,50,51,52,78,],[-111,-112,-113,-114,-115,129,]),'OPENING_BRACE':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[108,108,-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,108,-34,-56,-57,-44,-45,174,108,-10,-49,108,-51,-48,-54,108,108,-52,-50,]),'IF_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[109,109,-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,109,-34,-56,-57,-44,-45,109,109,-10,-49,109,-51,-48,-54,109,109,-52,-50,]),'TILL_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[110,110,-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,110,-34,-56,-57,-44,-45,110,110,-10,-49,110,-51,-48,-54,110,110,-52,-50,]),'COMEBACK_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[111,111,-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,111,-34,-56,-57,-44,-45,111,111,-10,-49,111,-51,-48,-54,111,111,-52,-50,]),'GIVEBACK_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[112,112,-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,112,-34,-56,-57,-44,-45,112,112,-10,-49,112,-51,-48,-54,112,112,-52,-50,]),'CONTINUE_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[113,113,-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,113,-34,-56,-57,-44,-45,113,113,-10,-49,113,-51,-48,-54,113,113,-52,-50,]),'CLOSING_BRACE':([100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,172,173,174,175,176,177,180,181,182,],[-38,-39,-40,-41,-42,-43,-48,-35,-47,-46,-55,-58,165,-34,-56,-57,-44,-45,-10,-49,-35,-51,-48,-54,182,-52,-50,]),'OTHER_KW':([100,101,102,103,104,105,107,136,140,144,161,162,165,173,175,176,177,181,182,],[-38,-39,-40,-41,-42,-43,-48,-47,-55,-58,-56,-57,-44,-49,179,-48,-54,-52,-50,]),'STATIC_KW':([108,137,155,172,174,],[-35,157,-34,-10,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list':([0,],[2,]),'declaration':([0,2,],[3,14,]),'function':([0,2,],[4,4,]),'varDeclaration':([0,2,],[5,5,]),'type':([0,2,22,31,37,137,157,],[7,7,30,30,30,158,168,]),'numOrLetter':([6,18,34,40,63,76,97,112,143,],[15,23,43,70,98,126,133,142,126,]),'variableList':([7,156,],[19,167,]),'varInitialization':([7,25,156,],[20,33,20,]),'varForm':([7,25,156,],[21,21,21,]),'parameter':([22,31,],[27,41,]),'listOfParameters':([22,31,],[28,28,]),'paramTypeList':([22,31,37,],[29,29,68,]),'paramList':([30,],[38,]),'paramId':([30,69,],[39,114,]),'eachExpression':([35,44,46,67,71,78,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[45,75,79,75,75,127,75,75,75,148,149,75,159,160,75,75,75,75,75,75,75,]),'logicOp':([35,44,45,46,67,71,75,78,79,96,112,118,127,128,129,134,138,139,148,149,154,159,160,164,169,170,174,178,179,],[46,46,78,46,46,46,78,46,78,46,46,46,78,46,46,46,46,46,78,78,46,78,78,46,46,46,46,46,46,]),'relExpression':([35,44,46,67,71,78,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'mathEXP':([35,44,46,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[53,53,53,53,53,53,130,131,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unaryExpression':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[54,54,54,95,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unaryop':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'factor':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'inalterable':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'alterable':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[61,74,61,61,74,74,61,61,61,74,74,146,61,61,74,61,61,74,74,74,74,74,74,74,]),'constant':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'allExpression':([44,67,71,96,112,118,134,154,164,169,170,174,178,179,],[73,106,106,132,141,147,153,106,171,106,106,106,106,106,]),'compareType':([53,],[80,]),'op':([53,130,131,],[81,81,81,]),'equal':([53,],[82,]),'nonEQ_OP':([53,],[83,]),'statement':([67,71,154,169,170,174,178,179,],[99,116,166,175,177,175,175,181,]),'phrase':([67,71,154,169,170,174,178,179,],[100,100,100,100,100,100,100,100,]),'compoundPhrase':([67,71,154,169,170,174,178,179,],[101,101,101,101,101,101,101,101,]),'selectPhrase':([67,71,154,169,170,174,178,179,],[102,102,102,102,102,102,102,102,]),'iterationPhrase':([67,71,154,169,170,174,178,179,],[103,103,103,103,103,103,103,103,]),'returnPhrase':([67,71,154,169,170,174,178,179,],[104,104,104,104,104,104,104,104,]),'continue':([67,71,154,169,170,174,178,179,],[105,105,105,105,105,105,105,105,]),'mathOp':([74,146,],[118,118,]),'localDeclarations':([108,174,],[137,137,]),'args':([134,],[151,]),'arguments':([134,],[152,]),'statementList':([137,],[154,]),'ScopedVariableDec':([137,],[155,]),'scopedSpecifier':([137,],[156,]),'ifBody':([169,174,178,],[173,178,180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','parser.py',9),
  ('numOrLetter -> NUMBER','numOrLetter',1,'p_numOrLetter','parser.py',18),
  ('numOrLetter -> LETTER','numOrLetter',1,'p_numOrLetter','parser.py',19),
  ('numOrLetter -> <empty>','numOrLetter',0,'p_numOrLetter','parser.py',20),
  ('list -> list declaration','list',2,'p_list','parser.py',24),
  ('list -> declaration','list',1,'p_list','parser.py',25),
  ('declaration -> function','declaration',1,'p_declaration','parser.py',29),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','parser.py',30),
  ('varDeclaration -> type variableList SEMICOLON','varDeclaration',3,'p_varDeclaration','parser.py',33),
  ('ScopedVariableDec -> scopedSpecifier variableList SEMICOLON','ScopedVariableDec',3,'p_ScopedVariableDec','parser.py',36),
  ('variableList -> variableList COMA varInitialization','variableList',3,'p_variableList','parser.py',39),
  ('variableList -> varInitialization','variableList',1,'p_variableList','parser.py',40),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization','parser.py',43),
  ('varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES','varInitialization',5,'p_varInitialization','parser.py',44),
  ('varForm -> LETTER numOrLetter OPENING_BRACKET NUMBER CLOSING_BRACKET','varForm',5,'p_varForm','parser.py',47),
  ('varForm -> LETTER numOrLetter','varForm',2,'p_varForm','parser.py',48),
  ('scopedSpecifier -> STATIC_KW type','scopedSpecifier',2,'p_scopedSpecifier','parser.py',51),
  ('scopedSpecifier -> type','scopedSpecifier',1,'p_scopedSpecifier','parser.py',52),
  ('type -> BOOLEAN_KW','type',1,'p_type','parser.py',55),
  ('type -> CHARACTER_KW','type',1,'p_type','parser.py',56),
  ('type -> INTEGER_KW','type',1,'p_type','parser.py',57),
  ('type -> CHAR_KW','type',1,'p_type','parser.py',58),
  ('type -> BOOL_KW','type',1,'p_type','parser.py',59),
  ('type -> INT_KW','type',1,'p_type','parser.py',60),
  ('function -> VOID_KW numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACKET statement CLOSING_BRACKET','function',8,'p_function','parser.py',63),
  ('function -> type LETTER numOrLetter OPENING_PARENTHESES parameter CLOSING_PARENTHESES statement','function',7,'p_function','parser.py',64),
  ('parameter -> listOfParameters','parameter',1,'p_parameter','parser.py',67),
  ('parameter -> <empty>','parameter',0,'p_parameter','parser.py',68),
  ('listOfParameters -> listOfParameters SEMICOLON paramTypeList','listOfParameters',3,'p_listOfParameters','parser.py',71),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters','parser.py',72),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','parser.py',75),
  ('paramList -> paramList COMA paramId','paramList',3,'p_paramList','parser.py',78),
  ('paramList -> paramId','paramList',1,'p_paramList','parser.py',79),
  ('localDeclarations -> localDeclarations ScopedVariableDec','localDeclarations',2,'p_localDeclarations','parser.py',82),
  ('localDeclarations -> <empty>','localDeclarations',0,'p_localDeclarations','parser.py',83),
  ('paramId -> LETTER numOrLetter','paramId',2,'p_paramId','parser.py',86),
  ('paramId -> LETTER numOrLetter OPENING_BRACKET CLOSING_BRACKET','paramId',4,'p_paramId','parser.py',87),
  ('statement -> phrase','statement',1,'p_statement','parser.py',90),
  ('statement -> compoundPhrase','statement',1,'p_statement','parser.py',91),
  ('statement -> selectPhrase','statement',1,'p_statement','parser.py',92),
  ('statement -> iterationPhrase','statement',1,'p_statement','parser.py',93),
  ('statement -> returnPhrase','statement',1,'p_statement','parser.py',94),
  ('statement -> continue','statement',1,'p_statement','parser.py',95),
  ('compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE','compoundPhrase',4,'p_compoundPhrase','parser.py',98),
  ('statementList -> statementList statement','statementList',2,'p_statementList','parser.py',101),
  ('statementList -> <empty>','statementList',0,'p_statementList','parser.py',102),
  ('phrase -> allExpression SEMICOLON','phrase',2,'p_phrase','parser.py',105),
  ('phrase -> SEMICOLON','phrase',1,'p_phrase','parser.py',106),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBody','selectPhrase',5,'p_selectPhrase','parser.py',109),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES OPENING_BRACE ifBody ifBody CLOSING_BRACE','selectPhrase',8,'p_selectPhrase','parser.py',110),
  ('ifBody -> statement','ifBody',1,'p_ifBody','parser.py',113),
  ('ifBody -> statement OTHER_KW statement','ifBody',3,'p_ifBody','parser.py',114),
  ('ifBody -> SEMICOLON','ifBody',1,'p_ifBody','parser.py',115),
  ('iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement','iterationPhrase',5,'p_iterationPhrase','parser.py',118),
  ('returnPhrase -> COMEBACK_KW SEMICOLON','returnPhrase',2,'p_returnPhrase','parser.py',121),
  ('returnPhrase -> GIVEBACK_KW allExpression SEMICOLON','returnPhrase',3,'p_returnPhrase','parser.py',122),
  ('returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON','returnPhrase',3,'p_returnPhrase','parser.py',123),
  ('continue -> CONTINUE_KW SEMICOLON','continue',2,'p_continue','parser.py',126),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression','parser.py',129),
  ('allExpression -> alterable PP_OP','allExpression',2,'p_allExpression','parser.py',130),
  ('allExpression -> alterable MM_OP','allExpression',2,'p_allExpression','parser.py',131),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression','parser.py',132),
  ('allExpression -> alterable mathOp alterable','allExpression',3,'p_allExpression','parser.py',133),
  ('mathOp -> EQ_OP','mathOp',1,'p_mathOp','parser.py',136),
  ('mathOp -> PLE_OP','mathOp',1,'p_mathOp','parser.py',137),
  ('mathOp -> MIE_OP','mathOp',1,'p_mathOp','parser.py',138),
  ('mathOp -> MUE_OP','mathOp',1,'p_mathOp','parser.py',139),
  ('mathOp -> DIE_OP','mathOp',1,'p_mathOp','parser.py',140),
  ('eachExpression -> eachExpression logicOp eachExpression','eachExpression',3,'p_eachExpression','parser.py',143),
  ('eachExpression -> eachExpression logicOp THEN_KW eachExpression','eachExpression',4,'p_eachExpression','parser.py',144),
  ('eachExpression -> logicOp eachExpression','eachExpression',2,'p_eachExpression','parser.py',145),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression','parser.py',146),
  ('eachExpression -> eachExpression logicOp ELSE_KW eachExpression','eachExpression',4,'p_eachExpression','parser.py',147),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression','parser.py',150),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression','parser.py',151),
  ('compareType -> equal','compareType',1,'p_compareType','parser.py',154),
  ('compareType -> nonEQ_OP','compareType',1,'p_compareType','parser.py',155),
  ('equal -> LE_REL','equal',1,'p_equal','parser.py',158),
  ('equal -> GE_REL','equal',1,'p_equal','parser.py',159),
  ('equal -> EQ_REL','equal',1,'p_equal','parser.py',160),
  ('nonEQ_OP -> GT_REL','nonEQ_OP',1,'p_nonEQ_OP','parser.py',163),
  ('nonEQ_OP -> LT_REL','nonEQ_OP',1,'p_nonEQ_OP','parser.py',164),
  ('nonEQ_OP -> NEQ_REL','nonEQ_OP',1,'p_nonEQ_OP','parser.py',165),
  ('mathEXP -> mathEXP op mathEXP','mathEXP',3,'p_mathEXP','parser.py',168),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP','parser.py',169),
  ('op -> PL_OP','op',1,'p_op','parser.py',172),
  ('op -> MI_OP','op',1,'p_op','parser.py',173),
  ('op -> MU_OP','op',1,'p_op','parser.py',174),
  ('op -> DI_OP','op',1,'p_op','parser.py',175),
  ('op -> PE_OP','op',1,'p_op','parser.py',176),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression','parser.py',179),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression','parser.py',180),
  ('unaryop -> MI_OP','unaryop',1,'p_unaryop','parser.py',183),
  ('unaryop -> MU_OP','unaryop',1,'p_unaryop','parser.py',184),
  ('unaryop -> QU_UOP','unaryop',1,'p_unaryop','parser.py',185),
  ('factor -> inalterable','factor',1,'p_factor','parser.py',188),
  ('factor -> alterable','factor',1,'p_factor','parser.py',189),
  ('alterable -> LETTER numOrLetter','alterable',2,'p_alterable','parser.py',192),
  ('alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET','alterable',4,'p_alterable','parser.py',193),
  ('alterable -> alterable LETTER numOrLetter','alterable',3,'p_alterable','parser.py',194),
  ('inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES','inalterable',3,'p_inalterable','parser.py',197),
  ('inalterable -> constant','inalterable',1,'p_inalterable','parser.py',198),
  ('inalterable -> LETTER numOrLetter OPENING_PARENTHESES args CLOSING_PARENTHESES','inalterable',5,'p_inalterable','parser.py',199),
  ('args -> arguments','args',1,'p_args','parser.py',202),
  ('args -> <empty>','args',0,'p_args','parser.py',203),
  ('arguments -> arguments COMA allExpression','arguments',3,'p_arguments','parser.py',206),
  ('arguments -> allExpression','arguments',1,'p_arguments','parser.py',207),
  ('constant -> CONST_KW','constant',1,'p_constant','parser.py',210),
  ('constant -> TRUE','constant',1,'p_constant','parser.py',211),
  ('constant -> FALSE','constant',1,'p_constant','parser.py',212),
  ('logicOp -> AA_LOP','logicOp',1,'p_logicOp','parser.py',215),
  ('logicOp -> OO_LOP','logicOp',1,'p_logicOp','parser.py',216),
  ('logicOp -> TIL_LOP','logicOp',1,'p_logicOp','parser.py',217),
  ('logicOp -> AND_LOP','logicOp',1,'p_logicOp','parser.py',218),
  ('logicOp -> OR_LOP','logicOp',1,'p_logicOp','parser.py',219),
]
