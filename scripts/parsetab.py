
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocOPENING_PARENTHESESnonassocOTHER_KWleftTHEN_KWleftELSE_KWleftAA_LOPOO_LOPTIL_LOPAND_LOPOR_LOPleftEQ_OPPLE_OPMIE_OPMUE_OPDIE_OPleftPL_OPMI_OPMU_OPDI_OPPE_OPleftMI_OPMU_OPQU_UOPAA_LOP AND_LOP BOOLEAN_KW BOOL_KW CHARACTER_KW CHAR_KW CLOSING_BRACE CLOSING_BRACKET CLOSING_PARENTHESES COLON COMA COMEBACK_KW COMMENT CONST_KW CONTINUE_KW DIE_OP DI_OP ELSE_KW EQ_OP EQ_REL FALSE GE_REL GIVEBACK_KW GT_REL IF_KW INTEGER_KW INT_KW LETTER LE_REL LT_REL MIE_OP MI_OP MM_OP MUE_OP MU_OP NEQ_REL NUMBER OO_LOP OPENING_BRACE OPENING_BRACKET OPENING_PARENTHESES OR_LOP OTHER_KW PE_OP PLE_OP PL_OP PP_OP QU_UOP SEMICOLON STATIC_KW THEN_KW TILL_KW TIL_LOP TRUE VOID_KWprogram : listnumOrLetter : NUMBER\n        | LETTER\n        |\n        list : list declaration\n        | declarationdeclaration : VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE\n        | VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket\n        | type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE\n        | type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket\n        | type LETTER varInitialization SEMICOLON\n        | type LETTER varInitialization COMA variableList SEMICOLONScopedVariableDec : scopedSpecifier variableList SEMICOLONvariableList : variableList COMA variableList\n        | varInitializationvarInitialization : varForm\n        | varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESESvarForm : LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET\n        | LETTER scopedSpecifier : STATIC_KW type\n        | typetype : BOOLEAN_KW\n        | CHARACTER_KW\n        | INTEGER_KW\n        | CHAR_KW\n        | BOOL_KW\n        | INT_KWparameter : listOfParameters\n        | listOfParameters : listOfParameters SEMICOLON paramTypeList\n        | paramTypeListparamTypeList : type paramListparamList :  paramList COMA paramId\n        | paramIdlocalDeclarations : ScopedVariableDec localDeclarations\n        | paramId : LETTER\n        | LETTER OPENING_BRACKET CLOSING_BRACKETstatement : phrase\n        | compoundPhrase\n        | selectPhrase\n        | iterationPhrase\n        | returnPhrase\n        | continuestatementWithoutBracket : phrase\n        | selectPhrase\n        | iterationPhrase\n        | returnPhrase\n        | continuecompoundPhrase : OPENING_BRACE localDeclarations  statementList CLOSING_BRACEstatementList : statementList statement\n        | phrase : allExpression SEMICOLON\n        | SEMICOLONselectPhrase : IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket\n                        | IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement\n                        | IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket\n                            ifBodyWithBracket : OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE\n        | OPENING_BRACE statement statement statementList CLOSING_BRACE\n        | OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE\n        | OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE\n        | OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE\n        iterationPhrase : TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementreturnPhrase : COMEBACK_KW SEMICOLON\n        | GIVEBACK_KW allExpression SEMICOLON\n        | GIVEBACK_KW numOrLetter SEMICOLONcontinue : CONTINUE_KW SEMICOLONallExpression : alterable mathOp allExpression\n        | alterable PP_OP\n        | alterable MM_OP\n        | eachExpressionmathOp : EQ_OP\n        | PLE_OP\n        | MIE_OP\n        | MUE_OP\n        | DIE_OPeachExpression : eachExpression logicOp eachExpression\n        | eachExpression logicOp THEN_KW eachExpression\n        | logicOp eachExpression\n        | relExpression\n        | eachExpression logicOp ELSE_KW eachExpressionrelExpression : mathEXP compareType mathEXP\n        | mathEXPmathEXP : mathEXP op mathEXP\n        | unaryExpressioncompareType : equal\n        | nonEqualequal : LE_REL\n        | GE_REL\n        | EQ_RELnonEqual : GT_REL\n        | LT_REL\n        | NEQ_RELop : PL_OP\n        | MI_OP\n        | MU_OP\n        | DI_OP\n        | PE_OPunaryExpression : unaryop unaryExpression\n        | factorunaryop : MI_OP\n        | MU_OP\n        | QU_UOPfactor : inalterable\n        | alterablealterable : LETTER\n        | alterable OPENING_BRACKET allExpression CLOSING_BRACKET\n        | alterable LETTERinalterable : OPENING_PARENTHESES allExpression CLOSING_PARENTHESES\n        | constant\n        | LETTER OPENING_PARENTHESES args CLOSING_PARENTHESESargs : arguments\n        | arguments : arguments COMA allExpression\n        | allExpressionconstant : CONST_KW\n        | TRUE\n        | FALSElogicOp : AA_LOP\n        | OO_LOP\n        | TIL_LOP\n        | AND_LOP\n        | OR_LOP'
    
_lr_action_items = {'VOID_KW':([0,2,3,12,26,42,43,44,45,46,47,49,81,83,94,98,103,149,150,159,161,162,163,164,165,166,173,176,177,179,184,185,193,194,197,199,201,],[4,4,-6,-5,-11,-8,-45,-46,-47,-48,-49,-54,-10,-12,-53,-64,-67,-65,-66,-7,-39,-40,-41,-42,-43,-44,-9,-55,-57,-63,-50,-56,-58,-59,-61,-60,-62,]),'BOOLEAN_KW':([0,2,3,12,15,17,26,30,41,42,43,44,45,46,47,49,80,81,83,90,92,94,98,103,149,150,158,159,161,162,163,164,165,166,167,173,176,177,178,179,182,184,185,193,194,197,199,201,],[6,6,-6,-5,6,6,-11,6,6,-8,-45,-46,-47,-48,-49,-54,6,-10,-12,6,6,-53,-64,-67,-65,-66,6,-7,-39,-40,-41,-42,-43,-44,-13,-9,-55,-57,6,-63,6,-50,-56,-58,-59,-61,-60,-62,]),'CHARACTER_KW':([0,2,3,12,15,17,26,30,41,42,43,44,45,46,47,49,80,81,83,90,92,94,98,103,149,150,158,159,161,162,163,164,165,166,167,173,176,177,178,179,182,184,185,193,194,197,199,201,],[7,7,-6,-5,7,7,-11,7,7,-8,-45,-46,-47,-48,-49,-54,7,-10,-12,7,7,-53,-64,-67,-65,-66,7,-7,-39,-40,-41,-42,-43,-44,-13,-9,-55,-57,7,-63,7,-50,-56,-58,-59,-61,-60,-62,]),'INTEGER_KW':([0,2,3,12,15,17,26,30,41,42,43,44,45,46,47,49,80,81,83,90,92,94,98,103,149,150,158,159,161,162,163,164,165,166,167,173,176,177,178,179,182,184,185,193,194,197,199,201,],[8,8,-6,-5,8,8,-11,8,8,-8,-45,-46,-47,-48,-49,-54,8,-10,-12,8,8,-53,-64,-67,-65,-66,8,-7,-39,-40,-41,-42,-43,-44,-13,-9,-55,-57,8,-63,8,-50,-56,-58,-59,-61,-60,-62,]),'CHAR_KW':([0,2,3,12,15,17,26,30,41,42,43,44,45,46,47,49,80,81,83,90,92,94,98,103,149,150,158,159,161,162,163,164,165,166,167,173,176,177,178,179,182,184,185,193,194,197,199,201,],[9,9,-6,-5,9,9,-11,9,9,-8,-45,-46,-47,-48,-49,-54,9,-10,-12,9,9,-53,-64,-67,-65,-66,9,-7,-39,-40,-41,-42,-43,-44,-13,-9,-55,-57,9,-63,9,-50,-56,-58,-59,-61,-60,-62,]),'BOOL_KW':([0,2,3,12,15,17,26,30,41,42,43,44,45,46,47,49,80,81,83,90,92,94,98,103,149,150,158,159,161,162,163,164,165,166,167,173,176,177,178,179,182,184,185,193,194,197,199,201,],[10,10,-6,-5,10,10,-11,10,10,-8,-45,-46,-47,-48,-49,-54,10,-10,-12,10,10,-53,-64,-67,-65,-66,10,-7,-39,-40,-41,-42,-43,-44,-13,-9,-55,-57,10,-63,10,-50,-56,-58,-59,-61,-60,-62,]),'INT_KW':([0,2,3,12,15,17,26,30,41,42,43,44,45,46,47,49,80,81,83,90,92,94,98,103,149,150,158,159,161,162,163,164,165,166,167,173,176,177,178,179,182,184,185,193,194,197,199,201,],[11,11,-6,-5,11,11,-11,11,11,-8,-45,-46,-47,-48,-49,-54,11,-10,-12,11,11,-53,-64,-67,-65,-66,11,-7,-39,-40,-41,-42,-43,-44,-13,-9,-55,-57,11,-63,11,-50,-56,-58,-59,-61,-60,-62,]),'$end':([1,2,3,12,26,42,43,44,45,46,47,49,81,83,94,98,103,149,150,159,161,162,163,164,165,166,173,176,177,179,184,185,193,194,197,199,201,],[0,-1,-6,-5,-11,-8,-45,-46,-47,-48,-49,-54,-10,-12,-53,-64,-67,-65,-66,-7,-39,-40,-41,-42,-43,-44,-9,-55,-57,-63,-50,-56,-58,-59,-61,-60,-62,]),'LETTER':([4,5,6,7,8,9,10,11,14,23,27,29,35,38,39,40,41,43,44,45,46,47,49,54,56,57,59,60,61,62,63,66,68,69,70,77,80,82,85,86,87,89,90,91,93,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,140,141,143,146,147,149,150,155,157,158,160,161,162,163,164,165,166,167,168,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[13,14,-22,-23,-24,-25,-26,-27,16,33,16,39,39,86,-106,39,-36,-45,-46,-47,-48,-49,-54,102,108,86,-119,-120,-121,-122,-123,86,-101,-102,-103,33,-36,16,108,-106,39,-52,-36,16,-21,-53,86,86,86,-64,-106,-67,39,39,-108,-72,-73,-74,-75,-76,86,86,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-52,39,-35,-20,86,86,-65,-66,39,39,-36,-51,-39,-40,-41,-42,-43,-44,-13,39,39,-107,-52,-55,-57,39,-63,39,39,-36,39,-50,-56,-52,-52,39,39,39,39,39,-58,-59,-61,39,-60,-62,]),'OPENING_PARENTHESES':([13,14,28,29,35,38,39,40,41,43,44,45,46,47,49,50,52,54,57,59,60,61,62,63,66,68,69,70,80,86,87,89,90,94,95,96,97,98,102,103,104,107,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,140,141,146,147,149,150,155,157,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[15,17,38,40,40,40,87,40,-36,-45,-46,-47,-48,-49,-54,95,97,40,40,-119,-120,-121,-122,-123,40,-101,-102,-103,-36,87,40,-52,-36,-53,40,40,40,-64,87,-67,40,40,-72,-73,-74,-75,-76,40,40,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-52,40,-35,40,40,-65,-66,40,40,-36,-51,-39,-40,-41,-42,-43,-44,-13,40,40,-52,-55,-57,40,-63,40,40,-36,40,-50,-56,-52,-52,40,40,40,40,40,-58,-59,-61,40,-60,-62,]),'CLOSING_PARENTHESES':([15,17,20,21,22,25,31,32,33,39,51,56,58,64,65,67,71,72,73,74,75,76,84,85,86,87,88,105,106,108,114,130,131,132,136,137,138,139,144,145,148,151,153,154,156,169,170,172,174,],[-29,-29,29,-28,-31,35,-32,-34,-37,-106,-71,-105,-80,-83,-85,-100,-104,-110,-116,-117,-118,-30,135,-105,-106,-113,139,-69,-70,-108,-79,-99,-33,-38,156,-112,-115,-109,168,-77,171,-68,-82,-84,-111,-78,-81,-107,-114,]),'OPENING_BRACKET':([16,33,39,56,85,86,102,108,172,],[24,78,-106,107,107,-106,-106,-108,-107,]),'COLON':([16,19,79,],[-19,28,-18,]),'SEMICOLON':([16,18,19,21,22,29,31,32,33,35,36,37,39,41,43,44,45,46,47,48,49,51,53,54,55,56,58,64,65,67,71,72,73,74,75,76,79,80,85,86,89,90,94,98,99,100,101,102,103,105,106,108,114,130,131,132,133,134,135,139,140,141,142,145,149,150,151,153,154,155,156,158,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[-19,26,-16,30,-31,49,-32,-34,-37,49,-15,83,-106,-36,-45,-46,-47,-48,-49,94,-54,-71,98,-4,103,-105,-80,-83,-85,-100,-104,-110,-116,-117,-118,-30,-18,-36,-105,-106,-52,-36,-53,-64,149,150,-2,-3,-67,-69,-70,-108,-79,-99,-33,-38,-52,-14,-17,-109,49,-35,167,-77,-65,-66,-68,-82,-84,49,-111,-36,-51,-39,-40,-41,-42,-43,-44,-13,49,-78,-81,49,-107,-52,-55,-57,49,-63,49,49,-36,49,-50,-56,-52,-52,49,49,49,49,49,-58,-59,-61,49,-60,-62,]),'COMA':([16,18,19,31,32,33,36,37,39,51,56,58,64,65,67,71,72,73,74,75,79,85,86,105,106,108,114,130,131,132,134,135,137,138,139,142,145,151,153,154,156,169,170,172,174,],[-19,27,-16,77,-34,-37,-15,82,-106,-71,-105,-80,-83,-85,-100,-104,-110,-116,-117,-118,-18,-105,-106,-69,-70,-108,-79,-99,-33,-38,82,-17,157,-115,-109,82,-77,-68,-82,-84,-111,-78,-81,-107,-114,]),'NUMBER':([24,54,],[34,101,]),'OPENING_BRACE':([29,35,41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[41,80,-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,158,-35,-65,-66,158,-36,-51,-39,-40,-41,-42,-43,-44,-13,178,158,-52,-55,-57,158,-63,158,158,-36,158,-50,-56,-52,-52,158,158,158,158,158,-58,-59,-61,158,-60,-62,]),'IF_KW':([29,35,41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[50,50,-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,50,-35,-65,-66,50,-36,-51,-39,-40,-41,-42,-43,-44,-13,50,50,-52,-55,-57,50,-63,50,50,-36,50,-50,-56,-52,-52,50,50,50,50,50,-58,-59,-61,50,-60,-62,]),'TILL_KW':([29,35,41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[52,52,-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,52,-35,-65,-66,52,-36,-51,-39,-40,-41,-42,-43,-44,-13,52,52,-52,-55,-57,52,-63,52,52,-36,52,-50,-56,-52,-52,52,52,52,52,52,-58,-59,-61,52,-60,-62,]),'COMEBACK_KW':([29,35,41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[53,53,-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,53,-35,-65,-66,53,-36,-51,-39,-40,-41,-42,-43,-44,-13,53,53,-52,-55,-57,53,-63,53,53,-36,53,-50,-56,-52,-52,53,53,53,53,53,-58,-59,-61,53,-60,-62,]),'GIVEBACK_KW':([29,35,41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[54,54,-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,54,-35,-65,-66,54,-36,-51,-39,-40,-41,-42,-43,-44,-13,54,54,-52,-55,-57,54,-63,54,54,-36,54,-50,-56,-52,-52,54,54,54,54,54,-58,-59,-61,54,-60,-62,]),'CONTINUE_KW':([29,35,41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[55,55,-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,55,-35,-65,-66,55,-36,-51,-39,-40,-41,-42,-43,-44,-13,55,55,-52,-55,-57,55,-63,55,55,-36,55,-50,-56,-52,-52,55,55,55,55,55,-58,-59,-61,55,-60,-62,]),'AA_LOP':([29,35,38,39,40,41,43,44,45,46,47,49,51,54,56,57,58,59,60,61,62,63,64,65,67,71,72,73,74,75,80,84,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,114,130,133,139,140,141,144,145,146,147,148,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[59,59,59,-106,59,-36,-45,-46,-47,-48,-49,-54,59,59,-105,59,-80,-119,-120,-121,-122,-123,-83,-85,-100,-104,-110,-116,-117,-118,-36,59,-105,-106,59,-52,-36,-53,59,59,59,-64,-106,-67,59,59,-108,-72,-73,-74,-75,-76,59,-99,-52,-109,59,-35,59,59,59,59,59,-65,-66,-82,-84,59,-111,59,-36,-51,-39,-40,-41,-42,-43,-44,-13,59,59,59,59,-107,-52,-55,-57,59,-63,59,59,-36,59,-50,-56,-52,-52,59,59,59,59,59,-58,-59,-61,59,-60,-62,]),'OO_LOP':([29,35,38,39,40,41,43,44,45,46,47,49,51,54,56,57,58,59,60,61,62,63,64,65,67,71,72,73,74,75,80,84,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,114,130,133,139,140,141,144,145,146,147,148,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[60,60,60,-106,60,-36,-45,-46,-47,-48,-49,-54,60,60,-105,60,-80,-119,-120,-121,-122,-123,-83,-85,-100,-104,-110,-116,-117,-118,-36,60,-105,-106,60,-52,-36,-53,60,60,60,-64,-106,-67,60,60,-108,-72,-73,-74,-75,-76,60,-99,-52,-109,60,-35,60,60,60,60,60,-65,-66,-82,-84,60,-111,60,-36,-51,-39,-40,-41,-42,-43,-44,-13,60,60,60,60,-107,-52,-55,-57,60,-63,60,60,-36,60,-50,-56,-52,-52,60,60,60,60,60,-58,-59,-61,60,-60,-62,]),'TIL_LOP':([29,35,38,39,40,41,43,44,45,46,47,49,51,54,56,57,58,59,60,61,62,63,64,65,67,71,72,73,74,75,80,84,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,114,130,133,139,140,141,144,145,146,147,148,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[61,61,61,-106,61,-36,-45,-46,-47,-48,-49,-54,61,61,-105,61,-80,-119,-120,-121,-122,-123,-83,-85,-100,-104,-110,-116,-117,-118,-36,61,-105,-106,61,-52,-36,-53,61,61,61,-64,-106,-67,61,61,-108,-72,-73,-74,-75,-76,61,-99,-52,-109,61,-35,61,61,61,61,61,-65,-66,-82,-84,61,-111,61,-36,-51,-39,-40,-41,-42,-43,-44,-13,61,61,61,61,-107,-52,-55,-57,61,-63,61,61,-36,61,-50,-56,-52,-52,61,61,61,61,61,-58,-59,-61,61,-60,-62,]),'AND_LOP':([29,35,38,39,40,41,43,44,45,46,47,49,51,54,56,57,58,59,60,61,62,63,64,65,67,71,72,73,74,75,80,84,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,114,130,133,139,140,141,144,145,146,147,148,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[62,62,62,-106,62,-36,-45,-46,-47,-48,-49,-54,62,62,-105,62,-80,-119,-120,-121,-122,-123,-83,-85,-100,-104,-110,-116,-117,-118,-36,62,-105,-106,62,-52,-36,-53,62,62,62,-64,-106,-67,62,62,-108,-72,-73,-74,-75,-76,62,-99,-52,-109,62,-35,62,62,62,62,62,-65,-66,-82,-84,62,-111,62,-36,-51,-39,-40,-41,-42,-43,-44,-13,62,62,62,62,-107,-52,-55,-57,62,-63,62,62,-36,62,-50,-56,-52,-52,62,62,62,62,62,-58,-59,-61,62,-60,-62,]),'OR_LOP':([29,35,38,39,40,41,43,44,45,46,47,49,51,54,56,57,58,59,60,61,62,63,64,65,67,71,72,73,74,75,80,84,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,114,130,133,139,140,141,144,145,146,147,148,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[63,63,63,-106,63,-36,-45,-46,-47,-48,-49,-54,63,63,-105,63,-80,-119,-120,-121,-122,-123,-83,-85,-100,-104,-110,-116,-117,-118,-36,63,-105,-106,63,-52,-36,-53,63,63,63,-64,-106,-67,63,63,-108,-72,-73,-74,-75,-76,63,-99,-52,-109,63,-35,63,63,63,63,63,-65,-66,-82,-84,63,-111,63,-36,-51,-39,-40,-41,-42,-43,-44,-13,63,63,63,63,-107,-52,-55,-57,63,-63,63,63,-36,63,-50,-56,-52,-52,63,63,63,63,63,-58,-59,-61,63,-60,-62,]),'MI_OP':([29,35,38,39,40,41,43,44,45,46,47,49,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,139,140,141,146,147,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[68,68,68,-106,68,-36,-45,-46,-47,-48,-49,-54,68,-105,68,-119,-120,-121,-122,-123,120,-85,68,-100,-101,-102,-103,-104,-110,-116,-117,-118,-36,-105,-106,68,-52,-36,-53,68,68,68,-64,-106,-67,68,68,-108,-72,-73,-74,-75,-76,68,68,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-99,-52,-109,68,-35,68,68,-65,-66,120,120,68,-111,68,-36,-51,-39,-40,-41,-42,-43,-44,-13,68,68,-107,-52,-55,-57,68,-63,68,68,-36,68,-50,-56,-52,-52,68,68,68,68,68,-58,-59,-61,68,-60,-62,]),'MU_OP':([29,35,38,39,40,41,43,44,45,46,47,49,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,85,86,87,89,90,94,95,96,97,98,102,103,104,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,139,140,141,146,147,149,150,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[69,69,69,-106,69,-36,-45,-46,-47,-48,-49,-54,69,-105,69,-119,-120,-121,-122,-123,121,-85,69,-100,-101,-102,-103,-104,-110,-116,-117,-118,-36,-105,-106,69,-52,-36,-53,69,69,69,-64,-106,-67,69,69,-108,-72,-73,-74,-75,-76,69,69,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-99,-52,-109,69,-35,69,69,-65,-66,121,121,69,-111,69,-36,-51,-39,-40,-41,-42,-43,-44,-13,69,69,-107,-52,-55,-57,69,-63,69,69,-36,69,-50,-56,-52,-52,69,69,69,69,69,-58,-59,-61,69,-60,-62,]),'QU_UOP':([29,35,38,40,41,43,44,45,46,47,49,54,57,59,60,61,62,63,66,68,69,70,80,87,89,90,94,95,96,97,98,103,104,107,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,140,141,146,147,149,150,155,157,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[70,70,70,70,-36,-45,-46,-47,-48,-49,-54,70,70,-119,-120,-121,-122,-123,70,-101,-102,-103,-36,70,-52,-36,-53,70,70,70,-64,-67,70,70,-72,-73,-74,-75,-76,70,70,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-52,70,-35,70,70,-65,-66,70,70,-36,-51,-39,-40,-41,-42,-43,-44,-13,70,70,-52,-55,-57,70,-63,70,70,-36,70,-50,-56,-52,-52,70,70,70,70,70,-58,-59,-61,70,-60,-62,]),'CONST_KW':([29,35,38,40,41,43,44,45,46,47,49,54,57,59,60,61,62,63,66,68,69,70,80,87,89,90,94,95,96,97,98,103,104,107,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,140,141,146,147,149,150,155,157,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[73,73,73,73,-36,-45,-46,-47,-48,-49,-54,73,73,-119,-120,-121,-122,-123,73,-101,-102,-103,-36,73,-52,-36,-53,73,73,73,-64,-67,73,73,-72,-73,-74,-75,-76,73,73,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-52,73,-35,73,73,-65,-66,73,73,-36,-51,-39,-40,-41,-42,-43,-44,-13,73,73,-52,-55,-57,73,-63,73,73,-36,73,-50,-56,-52,-52,73,73,73,73,73,-58,-59,-61,73,-60,-62,]),'TRUE':([29,35,38,40,41,43,44,45,46,47,49,54,57,59,60,61,62,63,66,68,69,70,80,87,89,90,94,95,96,97,98,103,104,107,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,140,141,146,147,149,150,155,157,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[74,74,74,74,-36,-45,-46,-47,-48,-49,-54,74,74,-119,-120,-121,-122,-123,74,-101,-102,-103,-36,74,-52,-36,-53,74,74,74,-64,-67,74,74,-72,-73,-74,-75,-76,74,74,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-52,74,-35,74,74,-65,-66,74,74,-36,-51,-39,-40,-41,-42,-43,-44,-13,74,74,-52,-55,-57,74,-63,74,74,-36,74,-50,-56,-52,-52,74,74,74,74,74,-58,-59,-61,74,-60,-62,]),'FALSE':([29,35,38,40,41,43,44,45,46,47,49,54,57,59,60,61,62,63,66,68,69,70,80,87,89,90,94,95,96,97,98,103,104,107,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,140,141,146,147,149,150,155,157,158,160,161,162,163,164,165,166,167,168,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,197,198,199,201,],[75,75,75,75,-36,-45,-46,-47,-48,-49,-54,75,75,-119,-120,-121,-122,-123,75,-101,-102,-103,-36,75,-52,-36,-53,75,75,75,-64,-67,75,75,-72,-73,-74,-75,-76,75,75,-86,-87,-94,-95,-96,-97,-98,-88,-89,-90,-91,-92,-93,-52,75,-35,75,75,-65,-66,75,75,-36,-51,-39,-40,-41,-42,-43,-44,-13,75,75,-52,-55,-57,75,-63,75,75,-36,75,-50,-56,-52,-52,75,75,75,75,75,-58,-59,-61,75,-60,-62,]),'CLOSING_BRACKET':([34,39,51,56,58,64,65,67,71,72,73,74,75,78,85,86,105,106,108,114,130,139,145,151,152,153,154,156,169,170,172,],[79,-106,-71,-105,-80,-83,-85,-100,-104,-110,-116,-117,-118,132,-105,-106,-69,-70,-108,-79,-99,-109,-77,-68,172,-82,-84,-111,-78,-81,-107,]),'PP_OP':([39,56,102,108,172,],[-106,105,-106,-108,-107,]),'MM_OP':([39,56,102,108,172,],[-106,106,-106,-108,-107,]),'EQ_OP':([39,56,102,108,172,],[-106,109,-106,-108,-107,]),'PLE_OP':([39,56,102,108,172,],[-106,110,-106,-108,-107,]),'MIE_OP':([39,56,102,108,172,],[-106,111,-106,-108,-107,]),'MUE_OP':([39,56,102,108,172,],[-106,112,-106,-108,-107,]),'DIE_OP':([39,56,102,108,172,],[-106,113,-106,-108,-107,]),'PL_OP':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,153,154,156,172,],[-106,-105,119,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,119,119,-111,-107,]),'DI_OP':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,153,154,156,172,],[-106,-105,122,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,122,122,-111,-107,]),'PE_OP':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,153,154,156,172,],[-106,-105,123,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,123,123,-111,-107,]),'LE_REL':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,154,156,172,],[-106,-105,124,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,-84,-111,-107,]),'GE_REL':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,154,156,172,],[-106,-105,125,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,-84,-111,-107,]),'EQ_REL':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,154,156,172,],[-106,-105,126,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,-84,-111,-107,]),'GT_REL':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,154,156,172,],[-106,-105,127,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,-84,-111,-107,]),'LT_REL':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,154,156,172,],[-106,-105,128,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,-84,-111,-107,]),'NEQ_REL':([39,56,64,65,67,71,72,73,74,75,85,86,102,108,130,139,154,156,172,],[-106,-105,129,-85,-100,-104,-110,-116,-117,-118,-105,-106,-106,-108,-99,-109,-84,-111,-107,]),'CLOSING_BRACE':([41,43,44,45,46,47,49,80,89,90,94,98,103,133,140,141,149,150,155,158,160,161,162,163,164,165,166,167,175,176,177,179,180,182,184,185,186,187,189,190,193,194,195,196,197,199,200,201,],[-36,-45,-46,-47,-48,-49,-54,-36,-52,-36,-53,-64,-67,-52,159,-35,-65,-66,173,-36,-51,-39,-40,-41,-42,-43,-44,-13,-52,-55,-57,-63,184,-36,-50,-56,-52,-52,193,194,-58,-59,197,199,-61,-60,201,-62,]),'STATIC_KW':([41,80,90,158,167,178,182,],[92,92,92,92,-13,92,92,]),'OTHER_KW':([43,44,45,46,47,49,94,98,103,149,150,161,162,163,164,165,166,176,177,179,183,184,185,187,193,194,196,197,199,201,],[-45,-46,-47,-48,-49,-54,-53,-64,-67,-65,-66,-39,-40,-41,-42,-43,-44,181,-57,-63,188,-50,-56,191,-58,-59,198,-61,-60,-62,]),'THEN_KW':([59,60,61,62,63,96,],[-119,-120,-121,-122,-123,146,]),'ELSE_KW':([59,60,61,62,63,96,],[-119,-120,-121,-122,-123,147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list':([0,],[2,]),'declaration':([0,2,],[3,12,]),'type':([0,2,15,17,30,41,80,90,92,158,178,182,],[5,5,23,23,23,93,93,93,143,93,93,93,]),'varInitialization':([14,27,82,91,],[18,36,36,36,]),'varForm':([14,27,82,91,],[19,19,19,19,]),'parameter':([15,17,],[20,25,]),'listOfParameters':([15,17,],[21,21,]),'paramTypeList':([15,17,30,],[22,22,76,]),'paramList':([23,],[31,]),'paramId':([23,77,],[32,131,]),'variableList':([27,82,91,],[37,134,142,]),'statementWithoutBracket':([29,35,168,],[42,81,176,]),'phrase':([29,35,140,155,168,171,178,180,181,183,188,189,190,191,192,198,],[43,43,161,161,43,161,161,161,161,161,161,161,161,161,161,161,]),'selectPhrase':([29,35,140,155,168,171,178,180,181,183,188,189,190,191,192,198,],[44,44,163,163,44,163,163,163,163,163,163,163,163,163,163,163,]),'iterationPhrase':([29,35,140,155,168,171,178,180,181,183,188,189,190,191,192,198,],[45,45,164,164,45,164,164,164,164,164,164,164,164,164,164,164,]),'returnPhrase':([29,35,140,155,168,171,178,180,181,183,188,189,190,191,192,198,],[46,46,165,165,46,165,165,165,165,165,165,165,165,165,165,165,]),'continue':([29,35,140,155,168,171,178,180,181,183,188,189,190,191,192,198,],[47,47,166,166,47,166,166,166,166,166,166,166,166,166,166,166,]),'allExpression':([29,35,40,54,87,104,107,140,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[48,48,88,99,138,151,152,48,48,174,48,48,48,48,48,48,48,48,48,48,48,48,]),'eachExpression':([29,35,38,40,54,57,87,95,96,97,104,107,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[51,51,84,51,51,114,51,144,145,148,51,51,51,169,170,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'alterable':([29,35,38,40,54,57,66,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[56,56,85,56,56,85,85,56,85,85,85,56,56,85,85,56,85,85,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'logicOp':([29,35,38,40,51,54,57,84,87,95,96,97,104,107,114,140,144,145,146,147,148,155,157,168,169,170,171,178,180,181,183,188,189,190,191,192,198,],[57,57,57,57,96,57,57,96,57,57,57,57,57,57,96,57,96,96,57,57,96,57,57,57,96,96,57,57,57,57,57,57,57,57,57,57,57,]),'relExpression':([29,35,38,40,54,57,87,95,96,97,104,107,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'mathEXP':([29,35,38,40,54,57,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[64,64,64,64,64,64,64,64,64,64,64,64,153,154,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'unaryExpression':([29,35,38,40,54,57,66,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[65,65,65,65,65,65,130,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'unaryop':([29,35,38,40,54,57,66,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'factor':([29,35,38,40,54,57,66,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'inalterable':([29,35,38,40,54,57,66,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'constant':([29,35,38,40,54,57,66,87,95,96,97,104,107,115,116,140,146,147,155,157,168,171,178,180,181,183,188,189,190,191,192,198,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'localDeclarations':([41,80,90,158,182,],[89,133,141,175,186,]),'ScopedVariableDec':([41,80,90,158,178,182,],[90,90,90,90,182,90,]),'scopedSpecifier':([41,80,90,158,178,182,],[91,91,91,91,91,91,]),'numOrLetter':([54,],[100,]),'mathOp':([56,],[104,]),'compareType':([64,],[115,]),'op':([64,153,154,],[116,116,116,]),'equal':([64,],[117,]),'nonEqual':([64,],[118,]),'args':([87,],[136,]),'arguments':([87,],[137,]),'statementList':([89,133,175,186,187,],[140,155,180,189,190,]),'statement':([140,155,171,178,180,181,183,188,189,190,191,192,198,],[160,160,179,183,160,185,187,192,160,160,195,196,200,]),'compoundPhrase':([140,155,171,178,180,181,183,188,189,190,191,192,198,],[162,162,162,162,162,162,162,162,162,162,162,162,162,]),'ifBodyWithBracket':([168,],[177,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','parser.py',46),
  ('numOrLetter -> NUMBER','numOrLetter',1,'p_numOrLetter','parser.py',50),
  ('numOrLetter -> LETTER','numOrLetter',1,'p_numOrLetter','parser.py',51),
  ('numOrLetter -> <empty>','numOrLetter',0,'p_numOrLetter','parser.py',52),
  ('list -> list declaration','list',2,'p_list','parser.py',57),
  ('list -> declaration','list',1,'p_list','parser.py',58),
  ('declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE','declaration',9,'p_declaration','parser.py',62),
  ('declaration -> VOID_KW LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket','declaration',6,'p_declaration','parser.py',63),
  ('declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES OPENING_BRACE localDeclarations statementList CLOSING_BRACE','declaration',9,'p_declaration','parser.py',64),
  ('declaration -> type LETTER OPENING_PARENTHESES parameter CLOSING_PARENTHESES statementWithoutBracket','declaration',6,'p_declaration','parser.py',65),
  ('declaration -> type LETTER varInitialization SEMICOLON','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> type LETTER varInitialization COMA variableList SEMICOLON','declaration',6,'p_declaration','parser.py',67),
  ('ScopedVariableDec -> scopedSpecifier variableList SEMICOLON','ScopedVariableDec',3,'p_ScopedVariableDec','parser.py',74),
  ('variableList -> variableList COMA variableList','variableList',3,'p_variableList','parser.py',79),
  ('variableList -> varInitialization','variableList',1,'p_variableList','parser.py',80),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization','parser.py',85),
  ('varInitialization -> varForm COLON OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES','varInitialization',5,'p_varInitialization','parser.py',86),
  ('varForm -> LETTER OPENING_BRACKET NUMBER CLOSING_BRACKET','varForm',4,'p_varForm','parser.py',91),
  ('varForm -> LETTER','varForm',1,'p_varForm','parser.py',92),
  ('scopedSpecifier -> STATIC_KW type','scopedSpecifier',2,'p_scopedSpecifier','parser.py',96),
  ('scopedSpecifier -> type','scopedSpecifier',1,'p_scopedSpecifier','parser.py',97),
  ('type -> BOOLEAN_KW','type',1,'p_type','parser.py',102),
  ('type -> CHARACTER_KW','type',1,'p_type','parser.py',103),
  ('type -> INTEGER_KW','type',1,'p_type','parser.py',104),
  ('type -> CHAR_KW','type',1,'p_type','parser.py',105),
  ('type -> BOOL_KW','type',1,'p_type','parser.py',106),
  ('type -> INT_KW','type',1,'p_type','parser.py',107),
  ('parameter -> listOfParameters','parameter',1,'p_parameter','parser.py',111),
  ('parameter -> <empty>','parameter',0,'p_parameter','parser.py',112),
  ('listOfParameters -> listOfParameters SEMICOLON paramTypeList','listOfParameters',3,'p_listOfParameters','parser.py',117),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters','parser.py',118),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','parser.py',123),
  ('paramList -> paramList COMA paramId','paramList',3,'p_paramList','parser.py',128),
  ('paramList -> paramId','paramList',1,'p_paramList','parser.py',129),
  ('localDeclarations -> ScopedVariableDec localDeclarations','localDeclarations',2,'p_localDeclarations','parser.py',134),
  ('localDeclarations -> <empty>','localDeclarations',0,'p_localDeclarations','parser.py',135),
  ('paramId -> LETTER','paramId',1,'p_paramId','parser.py',139),
  ('paramId -> LETTER OPENING_BRACKET CLOSING_BRACKET','paramId',3,'p_paramId','parser.py',140),
  ('statement -> phrase','statement',1,'p_statement','parser.py',145),
  ('statement -> compoundPhrase','statement',1,'p_statement','parser.py',146),
  ('statement -> selectPhrase','statement',1,'p_statement','parser.py',147),
  ('statement -> iterationPhrase','statement',1,'p_statement','parser.py',148),
  ('statement -> returnPhrase','statement',1,'p_statement','parser.py',149),
  ('statement -> continue','statement',1,'p_statement','parser.py',150),
  ('statementWithoutBracket -> phrase','statementWithoutBracket',1,'p_statement_without_bracket','parser.py',155),
  ('statementWithoutBracket -> selectPhrase','statementWithoutBracket',1,'p_statement_without_bracket','parser.py',156),
  ('statementWithoutBracket -> iterationPhrase','statementWithoutBracket',1,'p_statement_without_bracket','parser.py',157),
  ('statementWithoutBracket -> returnPhrase','statementWithoutBracket',1,'p_statement_without_bracket','parser.py',158),
  ('statementWithoutBracket -> continue','statementWithoutBracket',1,'p_statement_without_bracket','parser.py',159),
  ('compoundPhrase -> OPENING_BRACE localDeclarations statementList CLOSING_BRACE','compoundPhrase',4,'p_compoundPhrase','parser.py',164),
  ('statementList -> statementList statement','statementList',2,'p_statementList','parser.py',169),
  ('statementList -> <empty>','statementList',0,'p_statementList','parser.py',170),
  ('phrase -> allExpression SEMICOLON','phrase',2,'p_phrase','parser.py',175),
  ('phrase -> SEMICOLON','phrase',1,'p_phrase','parser.py',176),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket','selectPhrase',5,'p_selectPhrase','parser.py',181),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statementWithoutBracket OTHER_KW statement','selectPhrase',7,'p_selectPhrase','parser.py',182),
  ('selectPhrase -> IF_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES ifBodyWithBracket','selectPhrase',5,'p_selectPhrase','parser.py',183),
  ('ifBodyWithBracket -> OPENING_BRACE ScopedVariableDec localDeclarations statementList CLOSING_BRACE','ifBodyWithBracket',5,'p_ifBody','parser.py',189),
  ('ifBodyWithBracket -> OPENING_BRACE statement statement statementList CLOSING_BRACE','ifBodyWithBracket',5,'p_ifBody','parser.py',190),
  ('ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement CLOSING_BRACE','ifBodyWithBracket',6,'p_ifBody','parser.py',191),
  ('ifBodyWithBracket -> OPENING_BRACE statement statement OTHER_KW statement CLOSING_BRACE','ifBodyWithBracket',6,'p_ifBody','parser.py',192),
  ('ifBodyWithBracket -> OPENING_BRACE statement OTHER_KW statement statement OTHER_KW statement CLOSING_BRACE','ifBodyWithBracket',8,'p_ifBody','parser.py',193),
  ('iterationPhrase -> TILL_KW OPENING_PARENTHESES eachExpression CLOSING_PARENTHESES statement','iterationPhrase',5,'p_iterationPhrase','parser.py',199),
  ('returnPhrase -> COMEBACK_KW SEMICOLON','returnPhrase',2,'p_returnPhrase','parser.py',204),
  ('returnPhrase -> GIVEBACK_KW allExpression SEMICOLON','returnPhrase',3,'p_returnPhrase','parser.py',205),
  ('returnPhrase -> GIVEBACK_KW numOrLetter SEMICOLON','returnPhrase',3,'p_returnPhrase','parser.py',206),
  ('continue -> CONTINUE_KW SEMICOLON','continue',2,'p_continue','parser.py',211),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression','parser.py',216),
  ('allExpression -> alterable PP_OP','allExpression',2,'p_allExpression','parser.py',217),
  ('allExpression -> alterable MM_OP','allExpression',2,'p_allExpression','parser.py',218),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression','parser.py',219),
  ('mathOp -> EQ_OP','mathOp',1,'p_mathOp','parser.py',224),
  ('mathOp -> PLE_OP','mathOp',1,'p_mathOp','parser.py',225),
  ('mathOp -> MIE_OP','mathOp',1,'p_mathOp','parser.py',226),
  ('mathOp -> MUE_OP','mathOp',1,'p_mathOp','parser.py',227),
  ('mathOp -> DIE_OP','mathOp',1,'p_mathOp','parser.py',228),
  ('eachExpression -> eachExpression logicOp eachExpression','eachExpression',3,'p_eachExpression','parser.py',233),
  ('eachExpression -> eachExpression logicOp THEN_KW eachExpression','eachExpression',4,'p_eachExpression','parser.py',234),
  ('eachExpression -> logicOp eachExpression','eachExpression',2,'p_eachExpression','parser.py',235),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression','parser.py',236),
  ('eachExpression -> eachExpression logicOp ELSE_KW eachExpression','eachExpression',4,'p_eachExpression','parser.py',237),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression','parser.py',242),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression','parser.py',243),
  ('mathEXP -> mathEXP op mathEXP','mathEXP',3,'p_mathEXP','parser.py',248),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP','parser.py',249),
  ('compareType -> equal','compareType',1,'p_compareType','parser.py',254),
  ('compareType -> nonEqual','compareType',1,'p_compareType','parser.py',255),
  ('equal -> LE_REL','equal',1,'p_equal','parser.py',260),
  ('equal -> GE_REL','equal',1,'p_equal','parser.py',261),
  ('equal -> EQ_REL','equal',1,'p_equal','parser.py',262),
  ('nonEqual -> GT_REL','nonEqual',1,'p_nonEqual','parser.py',267),
  ('nonEqual -> LT_REL','nonEqual',1,'p_nonEqual','parser.py',268),
  ('nonEqual -> NEQ_REL','nonEqual',1,'p_nonEqual','parser.py',269),
  ('op -> PL_OP','op',1,'p_op','parser.py',274),
  ('op -> MI_OP','op',1,'p_op','parser.py',275),
  ('op -> MU_OP','op',1,'p_op','parser.py',276),
  ('op -> DI_OP','op',1,'p_op','parser.py',277),
  ('op -> PE_OP','op',1,'p_op','parser.py',278),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression','parser.py',283),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression','parser.py',284),
  ('unaryop -> MI_OP','unaryop',1,'p_unaryop','parser.py',289),
  ('unaryop -> MU_OP','unaryop',1,'p_unaryop','parser.py',290),
  ('unaryop -> QU_UOP','unaryop',1,'p_unaryop','parser.py',291),
  ('factor -> inalterable','factor',1,'p_factor','parser.py',296),
  ('factor -> alterable','factor',1,'p_factor','parser.py',297),
  ('alterable -> LETTER','alterable',1,'p_alterable','parser.py',302),
  ('alterable -> alterable OPENING_BRACKET allExpression CLOSING_BRACKET','alterable',4,'p_alterable','parser.py',303),
  ('alterable -> alterable LETTER','alterable',2,'p_alterable','parser.py',304),
  ('inalterable -> OPENING_PARENTHESES allExpression CLOSING_PARENTHESES','inalterable',3,'p_inalterable','parser.py',309),
  ('inalterable -> constant','inalterable',1,'p_inalterable','parser.py',310),
  ('inalterable -> LETTER OPENING_PARENTHESES args CLOSING_PARENTHESES','inalterable',4,'p_inalterable','parser.py',311),
  ('args -> arguments','args',1,'p_args','parser.py',316),
  ('args -> <empty>','args',0,'p_args','parser.py',317),
  ('arguments -> arguments COMA allExpression','arguments',3,'p_arguments','parser.py',322),
  ('arguments -> allExpression','arguments',1,'p_arguments','parser.py',323),
  ('constant -> CONST_KW','constant',1,'p_constant','parser.py',328),
  ('constant -> TRUE','constant',1,'p_constant','parser.py',329),
  ('constant -> FALSE','constant',1,'p_constant','parser.py',330),
  ('logicOp -> AA_LOP','logicOp',1,'p_logicOp','parser.py',335),
  ('logicOp -> OO_LOP','logicOp',1,'p_logicOp','parser.py',336),
  ('logicOp -> TIL_LOP','logicOp',1,'p_logicOp','parser.py',337),
  ('logicOp -> AND_LOP','logicOp',1,'p_logicOp','parser.py',338),
  ('logicOp -> OR_LOP','logicOp',1,'p_logicOp','parser.py',339),
]
