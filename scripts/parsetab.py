
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocOpening_ParenthesesnonassocOther_KWleftThen_KWleftElse_KWleftDoubleAndDoubleOrTildaAnd_KWOr_KWleftEqualPlusEqualMinusEqualTimesEqualDivideEqualleftPlusMinusTimesDivideModeOPleftMinusTimesQMarkAnd_KW Boolean_KW Character_KW Closing_Brace Closing_Bracket Closing_Parentheses Colon ComeBack_KW Comma Comment Const_KW Continue_KW Divide DivideEqual Dot DoubleAnd DoubleOr EEqual Else_KW Equal False_KW GEqual GiveBack_KW GreaterOP If_KW Integer_KW LEqual LessOP Letter MM Minus MinusEqual ModeOP NonEqualOP Num Opening_Brace Opening_Bracket Opening_Parentheses Or_KW Other_KW PP Plus PlusEqual QMark Semicolon Static_KW Then_KW Tilda Till_KW Times TimesEqual True_KW bool_KW char_KW idLetter idNum int_KW reserved void_KWprogram : listnumOrLetter : NumnumOrLetter : idLetterlist : list declaration\n        | declarationdeclaration : void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement\n                    | type idNum Opening_Parentheses parameter Closing_Parentheses statement\n                    declaration : void_KW idLetter Opening_Parentheses parameter Closing_Parentheses  statement\n                    | type idLetter Opening_Parentheses parameter Closing_Parentheses statement\n                    | type  variableList SemicolonvariableList : variableList Comma varInitialization\n        | varInitializationvarInitialization : varForm\n        | varForm Colon Opening_Parentheses eachExpression Closing_ParenthesesvarForm : idLetter Opening_Bracket Num Closing_Bracket\n        | idLetter type : Boolean_KW\n        | Character_KW\n        | Integer_KW\n        | char_KW\n        | bool_KW\n        | int_KWparameter : listOfParameters\n        | listOfParameters : listOfParameters Semicolon paramTypeList\n        | paramTypeListparamTypeList : type paramListparamList :  paramList Comma paramId\n        | paramIdlocalDeclarations : localDeclarations Static_KW type variableList Semicolon\n        | localDeclarations type variableList Semicolon\n        | paramId : idLetter\n        | idLetter Opening_Bracket Closing_BracketstatementList :  statement statementList\n        | statement : phrase\n        statement : compoundPhrase\n        statement : selectPhrase\n        statement : iterationPhrase\n        statement : returnPhrasestatement : continuecompoundPhrase : Opening_Brace localDeclarations  statementList Closing_Bracephrase : allExpression Semicolon\n        | SemicolonselectPhrase : If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody\n                        | If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_BraceifBody : statement\n        | statement Other_KW statement\n        ifBody : SemicoloniterationPhrase : Till_KW Opening_Parentheses eachExpression Closing_Parentheses statementreturnPhrase : ComeBack_KW SemicolonreturnPhrase : GiveBack_KW allExpression SemicolonreturnPhrase : GiveBack_KW numOrLetter Semicoloncontinue : Continue_KW SemicolonallExpression : alterable mathOp allExpressionallExpression : alterable PPallExpression : alterable MMallExpression : eachExpressionallExpression : alterable mathOp alterablemathOp : EqualmathOp : PlusEqualmathOp : MinusEqualmathOp : TimesEqualmathOp : DivideEqualeachExpression : eachExpression logicOp eachExpressioneachExpression : eachExpression logicOp Then_KW eachExpressioneachExpression : logicOp eachExpressioneachExpression : relExpressioneachExpression : eachExpression logicOp Else_KW eachExpressionrelExpression : mathEXP compareType mathEXPrelExpression : mathEXPcompareType : equalcompareType : nonEqualequal : LEqualequal : GEqualequal : EEqualnonEqual : GreaterOPnonEqual : LessOPnonEqual : NonEqualOPmathEXP : unaryExpressionmathEXP : mathEXP op mathEXPop : Plusop : Minusop : Timesop : Divideop : ModeOPunaryExpression : unaryop unaryExpressionunaryExpression : factorunaryop : Minusunaryop : Timesunaryop : QMarkfactor : inalterablefactor : alterablealterable : numOrLetteralterable : alterable Opening_Bracket allExpression Closing_Bracketalterable : alterable Dot numOrLetterinalterable : Opening_Parentheses allExpression Closing_Parenthesesinalterable : constantinalterable : idLetter Opening_Parentheses args Closing_Parenthesesargs : argumentsargs : arguments : arguments Comma allExpressionarguments : allExpressionconstant : Const_KWconstant : True_KWconstant : False_KWlogicOp : DoubleAndlogicOp : DoubleOrlogicOp : TildalogicOp : And_KWlogicOp : Or_KW'
    
_lr_action_items = {'void_KW':([0,2,3,12,25,73,74,75,76,77,78,79,81,94,95,96,120,124,127,156,157,165,174,176,177,178,183,184,],[4,4,-5,-4,-10,-6,-37,-38,-39,-40,-41,-42,-45,-8,-7,-9,-44,-52,-55,-53,-54,-43,-46,-48,-45,-51,-49,-47,]),'Boolean_KW':([0,2,3,12,20,21,22,23,25,40,73,74,75,76,77,78,79,81,82,94,95,96,120,121,124,127,151,156,157,165,173,174,175,176,177,178,179,183,184,],[6,6,-5,-4,6,6,6,6,-10,6,-6,-37,-38,-39,-40,-41,-42,-45,-32,-8,-7,-9,-44,6,-52,-55,6,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'Character_KW':([0,2,3,12,20,21,22,23,25,40,73,74,75,76,77,78,79,81,82,94,95,96,120,121,124,127,151,156,157,165,173,174,175,176,177,178,179,183,184,],[7,7,-5,-4,7,7,7,7,-10,7,-6,-37,-38,-39,-40,-41,-42,-45,-32,-8,-7,-9,-44,7,-52,-55,7,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'Integer_KW':([0,2,3,12,20,21,22,23,25,40,73,74,75,76,77,78,79,81,82,94,95,96,120,121,124,127,151,156,157,165,173,174,175,176,177,178,179,183,184,],[8,8,-5,-4,8,8,8,8,-10,8,-6,-37,-38,-39,-40,-41,-42,-45,-32,-8,-7,-9,-44,8,-52,-55,8,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'char_KW':([0,2,3,12,20,21,22,23,25,40,73,74,75,76,77,78,79,81,82,94,95,96,120,121,124,127,151,156,157,165,173,174,175,176,177,178,179,183,184,],[9,9,-5,-4,9,9,9,9,-10,9,-6,-37,-38,-39,-40,-41,-42,-45,-32,-8,-7,-9,-44,9,-52,-55,9,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'bool_KW':([0,2,3,12,20,21,22,23,25,40,73,74,75,76,77,78,79,81,82,94,95,96,120,121,124,127,151,156,157,165,173,174,175,176,177,178,179,183,184,],[10,10,-5,-4,10,10,10,10,-10,10,-6,-37,-38,-39,-40,-41,-42,-45,-32,-8,-7,-9,-44,10,-52,-55,10,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'int_KW':([0,2,3,12,20,21,22,23,25,40,73,74,75,76,77,78,79,81,82,94,95,96,120,121,124,127,151,156,157,165,173,174,175,176,177,178,179,183,184,],[11,11,-5,-4,11,11,11,11,-10,11,-6,-37,-38,-39,-40,-41,-42,-45,-32,-8,-7,-9,-44,11,-52,-55,11,-53,-54,-43,-31,-46,-32,-48,-45,-51,-30,-49,-47,]),'$end':([1,2,3,12,25,73,74,75,76,77,78,79,81,94,95,96,120,124,127,156,157,165,174,176,177,178,183,184,],[0,-1,-5,-4,-10,-6,-37,-38,-39,-40,-41,-42,-45,-8,-7,-9,-44,-52,-55,-53,-54,-43,-46,-48,-45,-51,-49,-47,]),'idNum':([4,5,6,7,8,9,10,11,],[13,15,-17,-18,-19,-20,-21,-22,]),'idLetter':([4,5,6,7,8,9,10,11,26,31,38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,74,75,76,77,78,79,81,82,87,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,152,153,156,157,164,165,166,169,170,173,174,175,176,177,178,179,180,181,183,184,],[14,16,-17,-18,-19,-20,-21,-22,37,43,67,90,90,90,90,90,67,-108,-109,-110,-111,-112,67,-90,-91,-92,-37,-38,-39,-40,-41,-42,-45,-32,90,43,67,67,67,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,90,146,90,-44,90,67,67,-52,-55,90,-61,-62,-63,-64,-65,67,67,37,90,-53,-54,90,-43,37,90,90,-31,-46,90,-48,-45,-51,-30,90,90,-49,-47,]),'Opening_Parentheses':([13,14,15,16,27,38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,67,74,75,76,77,78,79,81,82,83,85,87,90,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,153,156,157,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[20,21,22,23,38,48,48,48,48,48,48,48,-108,-109,-110,-111,-112,48,-90,-91,-92,119,-37,-38,-39,-40,-41,-42,-45,-32,122,123,48,119,48,48,48,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,48,48,-44,48,48,48,-52,-55,48,-61,-62,-63,-64,-65,48,48,48,-53,-54,48,-43,48,48,-31,-46,48,-48,-45,-51,-30,48,48,-49,-47,]),'Opening_Bracket':([16,37,43,65,67,68,72,89,90,126,145,146,158,162,],[24,24,93,117,-3,-95,-2,117,-3,-95,-97,-3,117,-96,]),'Colon':([16,19,37,47,],[-16,27,-16,-15,]),'Semicolon':([16,17,18,19,29,30,36,37,39,41,42,43,44,45,46,47,51,57,58,60,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,84,86,88,89,90,91,98,100,116,120,121,124,125,126,127,129,130,136,137,138,139,142,143,145,146,153,156,157,158,159,160,161,162,163,165,167,169,170,172,173,174,175,176,177,178,179,180,181,183,184,],[-16,25,-12,-13,40,-26,-11,-16,81,-27,-29,-33,81,81,81,-15,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,120,-45,-32,-59,124,127,-94,-3,-25,-14,-68,-88,-44,81,-52,156,157,-55,-57,-58,-28,-34,-98,-66,-71,-82,-97,-3,81,-53,-54,-60,-56,-67,-70,-96,-100,-43,173,177,81,179,-31,-46,177,-48,-45,-51,-30,177,81,-49,-47,]),'Comma':([16,17,18,19,36,37,41,42,43,47,51,57,58,60,64,65,66,67,68,69,70,71,72,84,89,90,98,100,116,129,130,136,137,138,139,142,143,145,146,148,149,158,159,160,161,162,163,167,171,172,],[-16,26,-12,-13,-11,-16,92,-29,-33,-15,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-59,-94,-3,-14,-68,-88,-57,-58,-28,-34,-98,-66,-71,-82,-97,-3,164,-104,-60,-56,-67,-70,-96,-100,26,-103,26,]),'Closing_Parentheses':([20,21,22,23,28,29,30,32,33,34,41,42,43,49,51,57,58,60,64,65,66,67,68,69,70,71,72,84,89,90,91,97,100,116,119,129,130,136,137,138,139,142,143,145,146,147,148,149,154,155,158,159,160,161,162,163,171,],[-24,-24,-24,-24,39,-23,-26,44,45,46,-27,-29,-33,98,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-59,-94,-3,-25,138,-68,-88,-102,-57,-58,-28,-34,-98,-66,-71,-82,-97,-3,163,-101,-104,169,170,-60,-56,-67,-70,-96,-100,-103,]),'Num':([24,38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,74,75,76,77,78,79,81,82,87,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,153,156,157,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[35,72,72,72,72,72,72,72,-108,-109,-110,-111,-112,72,-90,-91,-92,-37,-38,-39,-40,-41,-42,-45,-32,72,72,72,72,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,72,72,72,-44,72,72,72,-52,-55,72,-61,-62,-63,-64,-65,72,72,72,-53,-54,72,-43,72,72,-31,-46,72,-48,-45,-51,-30,72,72,-49,-47,]),'Closing_Bracket':([35,51,57,58,60,64,65,66,67,68,69,70,71,72,84,89,90,93,100,116,129,130,138,139,142,143,144,145,146,158,159,160,161,162,163,],[47,-69,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-59,-94,-3,137,-68,-88,-57,-58,-98,-66,-71,-82,162,-97,-3,-60,-56,-67,-70,-96,-100,]),'DoubleAnd':([38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,84,87,89,90,99,100,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,139,140,141,142,143,145,146,153,154,155,156,157,158,160,161,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[52,52,52,52,52,52,52,52,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,52,52,-94,-3,52,52,-88,52,52,-44,52,52,52,-52,-95,-55,52,-61,-62,-63,-64,-65,-98,52,52,52,-71,-82,-97,-3,52,52,52,-53,-54,-94,52,52,-96,-100,52,-43,52,52,-31,-46,52,-48,-45,-51,-30,52,52,-49,-47,]),'DoubleOr':([38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,84,87,89,90,99,100,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,139,140,141,142,143,145,146,153,154,155,156,157,158,160,161,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[53,53,53,53,53,53,53,53,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,53,53,-94,-3,53,53,-88,53,53,-44,53,53,53,-52,-95,-55,53,-61,-62,-63,-64,-65,-98,53,53,53,-71,-82,-97,-3,53,53,53,-53,-54,-94,53,53,-96,-100,53,-43,53,53,-31,-46,53,-48,-45,-51,-30,53,53,-49,-47,]),'Tilda':([38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,84,87,89,90,99,100,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,139,140,141,142,143,145,146,153,154,155,156,157,158,160,161,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[54,54,54,54,54,54,54,54,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,54,54,-94,-3,54,54,-88,54,54,-44,54,54,54,-52,-95,-55,54,-61,-62,-63,-64,-65,-98,54,54,54,-71,-82,-97,-3,54,54,54,-53,-54,-94,54,54,-96,-100,54,-43,54,54,-31,-46,54,-48,-45,-51,-30,54,54,-49,-47,]),'And_KW':([38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,84,87,89,90,99,100,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,139,140,141,142,143,145,146,153,154,155,156,157,158,160,161,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[55,55,55,55,55,55,55,55,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,55,55,-94,-3,55,55,-88,55,55,-44,55,55,55,-52,-95,-55,55,-61,-62,-63,-64,-65,-98,55,55,55,-71,-82,-97,-3,55,55,55,-53,-54,-94,55,55,-96,-100,55,-43,55,55,-31,-46,55,-48,-45,-51,-30,55,55,-49,-47,]),'Or_KW':([38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,84,87,89,90,99,100,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,139,140,141,142,143,145,146,153,154,155,156,157,158,160,161,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[56,56,56,56,56,56,56,56,-69,-108,-109,-110,-111,-112,-72,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,56,56,-94,-3,56,56,-88,56,56,-44,56,56,56,-52,-95,-55,56,-61,-62,-63,-64,-65,-98,56,56,56,-71,-82,-97,-3,56,56,56,-53,-54,-94,56,56,-96,-100,56,-43,56,56,-31,-46,56,-48,-45,-51,-30,56,56,-49,-47,]),'Minus':([38,39,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,87,89,90,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,140,141,142,143,145,146,153,156,157,158,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[61,61,61,61,61,61,61,-108,-109,-110,-111,-112,106,-81,61,-89,-90,-91,-92,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,61,-94,-3,61,61,61,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,-88,61,61,-44,61,61,61,-52,-95,-55,61,-61,-62,-63,-64,-65,-98,61,61,106,106,-97,-3,61,-53,-54,-94,-96,-100,61,-43,61,61,-31,-46,61,-48,-45,-51,-30,61,61,-49,-47,]),'Times':([38,39,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,81,82,87,89,90,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,126,127,128,131,132,133,134,135,138,140,141,142,143,145,146,153,156,157,158,162,163,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[62,62,62,62,62,62,62,-108,-109,-110,-111,-112,107,-81,62,-89,-90,-91,-92,-93,-94,-99,-3,-95,-105,-106,-107,-2,-37,-38,-39,-40,-41,-42,-45,-32,62,-94,-3,62,62,62,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,-88,62,62,-44,62,62,62,-52,-95,-55,62,-61,-62,-63,-64,-65,-98,62,62,107,107,-97,-3,62,-53,-54,-94,-96,-100,62,-43,62,62,-31,-46,62,-48,-45,-51,-30,62,62,-49,-47,]),'QMark':([38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,74,75,76,77,78,79,81,82,87,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,153,156,157,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[63,63,63,63,63,63,63,-108,-109,-110,-111,-112,63,-90,-91,-92,-37,-38,-39,-40,-41,-42,-45,-32,63,63,63,63,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,63,63,-44,63,63,63,-52,-55,63,-61,-62,-63,-64,-65,63,63,63,-53,-54,63,-43,63,63,-31,-46,63,-48,-45,-51,-30,63,63,-49,-47,]),'Const_KW':([38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,74,75,76,77,78,79,81,82,87,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,153,156,157,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[69,69,69,69,69,69,69,-108,-109,-110,-111,-112,69,-90,-91,-92,-37,-38,-39,-40,-41,-42,-45,-32,69,69,69,69,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,69,69,-44,69,69,69,-52,-55,69,-61,-62,-63,-64,-65,69,69,69,-53,-54,69,-43,69,69,-31,-46,69,-48,-45,-51,-30,69,69,-49,-47,]),'True_KW':([38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,74,75,76,77,78,79,81,82,87,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,153,156,157,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[70,70,70,70,70,70,70,-108,-109,-110,-111,-112,70,-90,-91,-92,-37,-38,-39,-40,-41,-42,-45,-32,70,70,70,70,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,70,70,-44,70,70,70,-52,-55,70,-61,-62,-63,-64,-65,70,70,70,-53,-54,70,-43,70,70,-31,-46,70,-48,-45,-51,-30,70,70,-49,-47,]),'False_KW':([38,39,44,45,46,48,50,52,53,54,55,56,59,61,62,63,74,75,76,77,78,79,81,82,87,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,127,128,131,132,133,134,135,140,141,153,156,157,164,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[71,71,71,71,71,71,71,-108,-109,-110,-111,-112,71,-90,-91,-92,-37,-38,-39,-40,-41,-42,-45,-32,71,71,71,71,-73,-74,-83,-84,-85,-86,-87,-75,-76,-77,-78,-79,-80,71,71,-44,71,71,71,-52,-55,71,-61,-62,-63,-64,-65,71,71,71,-53,-54,71,-43,71,71,-31,-46,71,-48,-45,-51,-30,71,71,-49,-47,]),'Opening_Brace':([39,44,45,46,74,75,76,77,78,79,81,82,120,121,124,127,153,156,157,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[82,82,82,82,-37,-38,-39,-40,-41,-42,-45,-32,-44,82,-52,-55,82,-53,-54,-43,175,82,-31,-46,82,-48,-45,-51,-30,82,82,-49,-47,]),'If_KW':([39,44,45,46,74,75,76,77,78,79,81,82,120,121,124,127,153,156,157,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[83,83,83,83,-37,-38,-39,-40,-41,-42,-45,-32,-44,83,-52,-55,83,-53,-54,-43,83,83,-31,-46,83,-48,-45,-51,-30,83,83,-49,-47,]),'Till_KW':([39,44,45,46,74,75,76,77,78,79,81,82,120,121,124,127,153,156,157,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[85,85,85,85,-37,-38,-39,-40,-41,-42,-45,-32,-44,85,-52,-55,85,-53,-54,-43,85,85,-31,-46,85,-48,-45,-51,-30,85,85,-49,-47,]),'ComeBack_KW':([39,44,45,46,74,75,76,77,78,79,81,82,120,121,124,127,153,156,157,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[86,86,86,86,-37,-38,-39,-40,-41,-42,-45,-32,-44,86,-52,-55,86,-53,-54,-43,86,86,-31,-46,86,-48,-45,-51,-30,86,86,-49,-47,]),'GiveBack_KW':([39,44,45,46,74,75,76,77,78,79,81,82,120,121,124,127,153,156,157,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[87,87,87,87,-37,-38,-39,-40,-41,-42,-45,-32,-44,87,-52,-55,87,-53,-54,-43,87,87,-31,-46,87,-48,-45,-51,-30,87,87,-49,-47,]),'Continue_KW':([39,44,45,46,74,75,76,77,78,79,81,82,120,121,124,127,153,156,157,165,169,170,173,174,175,176,177,178,179,180,181,183,184,],[88,88,88,88,-37,-38,-39,-40,-41,-42,-45,-32,-44,88,-52,-55,88,-53,-54,-43,88,88,-31,-46,88,-48,-45,-51,-30,88,88,-49,-47,]),'Then_KW':([52,53,54,55,56,99,],[-108,-109,-110,-111,-112,140,]),'Else_KW':([52,53,54,55,56,99,],[-108,-109,-110,-111,-112,141,]),'Plus':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,142,143,145,146,158,162,163,],[105,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,105,105,-97,-3,-94,-96,-100,]),'Divide':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,142,143,145,146,158,162,163,],[108,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,108,108,-97,-3,-94,-96,-100,]),'ModeOP':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,142,143,145,146,158,162,163,],[109,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,109,109,-97,-3,-94,-96,-100,]),'LEqual':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,143,145,146,158,162,163,],[110,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'GEqual':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,143,145,146,158,162,163,],[111,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'EEqual':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,143,145,146,158,162,163,],[112,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'GreaterOP':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,143,145,146,158,162,163,],[113,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'LessOP':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,143,145,146,158,162,163,],[114,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'NonEqualOP':([57,58,60,64,65,66,67,68,69,70,71,72,89,90,116,126,138,143,145,146,158,162,163,],[115,-81,-89,-93,-94,-99,-3,-95,-105,-106,-107,-2,-94,-3,-88,-95,-98,-82,-97,-3,-94,-96,-100,]),'Dot':([65,67,68,72,89,90,126,145,146,158,162,],[118,-3,-95,-2,118,-3,-95,-97,-3,118,-96,]),'PP':([68,72,89,90,126,145,146,158,162,],[-95,-2,129,-3,-95,-97,-3,129,-96,]),'MM':([68,72,89,90,126,145,146,158,162,],[-95,-2,130,-3,-95,-97,-3,130,-96,]),'Equal':([68,72,89,90,126,145,146,158,162,],[-95,-2,131,-3,-95,-97,-3,131,-96,]),'PlusEqual':([68,72,89,90,126,145,146,158,162,],[-95,-2,132,-3,-95,-97,-3,132,-96,]),'MinusEqual':([68,72,89,90,126,145,146,158,162,],[-95,-2,133,-3,-95,-97,-3,133,-96,]),'TimesEqual':([68,72,89,90,126,145,146,158,162,],[-95,-2,134,-3,-95,-97,-3,134,-96,]),'DivideEqual':([68,72,89,90,126,145,146,158,162,],[-95,-2,135,-3,-95,-97,-3,135,-96,]),'Closing_Brace':([74,75,76,77,78,79,81,82,120,121,124,127,150,153,156,157,165,168,173,174,175,176,177,178,179,182,183,184,],[-37,-38,-39,-40,-41,-42,-45,-32,-44,-36,-52,-55,165,-36,-53,-54,-43,-35,-31,-46,-32,-48,-45,-51,-30,184,-49,-47,]),'Other_KW':([74,75,76,77,78,79,81,120,124,127,156,157,165,174,176,177,178,183,184,],[-37,-38,-39,-40,-41,-42,-45,-44,-52,-55,-53,-54,-43,-46,181,-45,-51,-49,-47,]),'Static_KW':([82,121,173,175,179,],[-32,151,-31,-32,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list':([0,],[2,]),'declaration':([0,2,],[3,12,]),'type':([0,2,20,21,22,23,40,121,151,],[5,5,31,31,31,31,31,152,166,]),'variableList':([5,152,166,],[17,167,172,]),'varInitialization':([5,26,152,166,],[18,36,18,18,]),'varForm':([5,26,152,166,],[19,19,19,19,]),'parameter':([20,21,22,23,],[28,32,33,34,]),'listOfParameters':([20,21,22,23,],[29,29,29,29,]),'paramTypeList':([20,21,22,23,40,],[30,30,30,30,91,]),'paramList':([31,],[41,]),'paramId':([31,92,],[42,136,]),'eachExpression':([38,39,44,45,46,48,50,87,99,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[49,84,84,84,84,84,100,84,139,84,84,84,154,155,84,160,161,84,84,84,84,84,84,84,]),'logicOp':([38,39,44,45,46,48,49,50,84,87,99,100,117,119,121,122,123,128,139,140,141,153,154,155,160,161,164,169,170,175,180,181,],[50,50,50,50,50,50,99,50,99,50,50,99,50,50,50,50,50,50,99,50,50,50,99,99,99,99,50,50,50,50,50,50,]),'relExpression':([38,39,44,45,46,48,50,87,99,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'mathEXP':([38,39,44,45,46,48,50,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[57,57,57,57,57,57,57,57,57,142,143,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'unaryExpression':([38,39,44,45,46,48,50,59,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[58,58,58,58,58,58,58,116,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'unaryop':([38,39,44,45,46,48,50,59,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'factor':([38,39,44,45,46,48,50,59,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'inalterable':([38,39,44,45,46,48,50,59,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'alterable':([38,39,44,45,46,48,50,59,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[65,89,89,89,89,89,65,65,89,65,65,65,89,89,89,65,65,158,65,65,89,89,89,89,89,89,89,]),'constant':([38,39,44,45,46,48,50,59,87,99,101,102,117,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'numOrLetter':([38,39,44,45,46,48,50,59,87,99,101,102,117,118,119,121,122,123,128,140,141,153,164,169,170,175,180,181,],[68,68,68,68,68,68,68,68,126,68,68,68,68,145,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'statement':([39,44,45,46,121,153,169,170,175,180,181,],[73,94,95,96,153,153,176,178,176,176,183,]),'phrase':([39,44,45,46,121,153,169,170,175,180,181,],[74,74,74,74,74,74,74,74,74,74,74,]),'compoundPhrase':([39,44,45,46,121,153,169,170,175,180,181,],[75,75,75,75,75,75,75,75,75,75,75,]),'selectPhrase':([39,44,45,46,121,153,169,170,175,180,181,],[76,76,76,76,76,76,76,76,76,76,76,]),'iterationPhrase':([39,44,45,46,121,153,169,170,175,180,181,],[77,77,77,77,77,77,77,77,77,77,77,]),'returnPhrase':([39,44,45,46,121,153,169,170,175,180,181,],[78,78,78,78,78,78,78,78,78,78,78,]),'continue':([39,44,45,46,121,153,169,170,175,180,181,],[79,79,79,79,79,79,79,79,79,79,79,]),'allExpression':([39,44,45,46,48,87,117,119,121,128,153,164,169,170,175,180,181,],[80,80,80,80,97,125,144,149,80,159,80,171,80,80,80,80,80,]),'compareType':([57,],[101,]),'op':([57,142,143,],[102,102,102,]),'equal':([57,],[103,]),'nonEqual':([57,],[104,]),'localDeclarations':([82,175,],[121,121,]),'mathOp':([89,158,],[128,128,]),'args':([119,],[147,]),'arguments':([119,],[148,]),'statementList':([121,153,],[150,168,]),'ifBody':([169,175,180,],[174,180,182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','parser.py',25),
  ('numOrLetter -> Num','numOrLetter',1,'p_numOrLetter_num','parser.py',29),
  ('numOrLetter -> idLetter','numOrLetter',1,'p_numOrLetter_idLetter','parser.py',32),
  ('list -> list declaration','list',2,'p_list','parser.py',36),
  ('list -> declaration','list',1,'p_list','parser.py',37),
  ('declaration -> void_KW idNum Opening_Parentheses parameter Closing_Parentheses statement','declaration',6,'p_declaration_idNum','parser.py',44),
  ('declaration -> type idNum Opening_Parentheses parameter Closing_Parentheses statement','declaration',6,'p_declaration_idNum','parser.py',45),
  ('declaration -> void_KW idLetter Opening_Parentheses parameter Closing_Parentheses statement','declaration',6,'p_declaration_idLetter','parser.py',53),
  ('declaration -> type idLetter Opening_Parentheses parameter Closing_Parentheses statement','declaration',6,'p_declaration_idLetter','parser.py',54),
  ('declaration -> type variableList Semicolon','declaration',3,'p_declaration_idLetter','parser.py',55),
  ('variableList -> variableList Comma varInitialization','variableList',3,'p_variableList','parser.py',64),
  ('variableList -> varInitialization','variableList',1,'p_variableList','parser.py',65),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization','parser.py',73),
  ('varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses','varInitialization',5,'p_varInitialization','parser.py',74),
  ('varForm -> idLetter Opening_Bracket Num Closing_Bracket','varForm',4,'p_varForm','parser.py',82),
  ('varForm -> idLetter','varForm',1,'p_varForm','parser.py',83),
  ('type -> Boolean_KW','type',1,'p_type','parser.py',92),
  ('type -> Character_KW','type',1,'p_type','parser.py',93),
  ('type -> Integer_KW','type',1,'p_type','parser.py',94),
  ('type -> char_KW','type',1,'p_type','parser.py',95),
  ('type -> bool_KW','type',1,'p_type','parser.py',96),
  ('type -> int_KW','type',1,'p_type','parser.py',97),
  ('parameter -> listOfParameters','parameter',1,'p_parameter','parser.py',101),
  ('parameter -> <empty>','parameter',0,'p_parameter','parser.py',102),
  ('listOfParameters -> listOfParameters Semicolon paramTypeList','listOfParameters',3,'p_listOfParameters','parser.py',109),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters','parser.py',110),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','parser.py',117),
  ('paramList -> paramList Comma paramId','paramList',3,'p_paramList','parser.py',121),
  ('paramList -> paramId','paramList',1,'p_paramList','parser.py',122),
  ('localDeclarations -> localDeclarations Static_KW type variableList Semicolon','localDeclarations',5,'p_localDeclarations','parser.py',129),
  ('localDeclarations -> localDeclarations type variableList Semicolon','localDeclarations',4,'p_localDeclarations','parser.py',130),
  ('localDeclarations -> <empty>','localDeclarations',0,'p_localDeclarations','parser.py',131),
  ('paramId -> idLetter','paramId',1,'p_paramId','parser.py',140),
  ('paramId -> idLetter Opening_Bracket Closing_Bracket','paramId',3,'p_paramId','parser.py',141),
  ('statementList -> statement statementList','statementList',2,'p_statementList','parser.py',148),
  ('statementList -> <empty>','statementList',0,'p_statementList','parser.py',149),
  ('statement -> phrase','statement',1,'p_statement_phrase','parser.py',157),
  ('statement -> compoundPhrase','statement',1,'p_statement_compoundphrase','parser.py',162),
  ('statement -> selectPhrase','statement',1,'p_statement_selectphrase','parser.py',166),
  ('statement -> iterationPhrase','statement',1,'p_statement_iterationphrase','parser.py',170),
  ('statement -> returnPhrase','statement',1,'p_statement_returnphrase','parser.py',174),
  ('statement -> continue','statement',1,'p_statement_continue','parser.py',177),
  ('compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace','compoundPhrase',4,'p_compoundPhrase','parser.py',181),
  ('phrase -> allExpression Semicolon','phrase',2,'p_phrase','parser.py',186),
  ('phrase -> Semicolon','phrase',1,'p_phrase','parser.py',187),
  ('selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody','selectPhrase',5,'p_selectPhrase','parser.py',194),
  ('selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace','selectPhrase',8,'p_selectPhrase','parser.py',195),
  ('ifBody -> statement','ifBody',1,'p_ifBody','parser.py',203),
  ('ifBody -> statement Other_KW statement','ifBody',3,'p_ifBody','parser.py',204),
  ('ifBody -> Semicolon','ifBody',1,'p_ifBody_semicolon','parser.py',213),
  ('iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement','iterationPhrase',5,'p_iterationPhrase','parser.py',217),
  ('returnPhrase -> ComeBack_KW Semicolon','returnPhrase',2,'p_returnPhrase_cs','parser.py',221),
  ('returnPhrase -> GiveBack_KW allExpression Semicolon','returnPhrase',3,'p_returnPhrase_gas','parser.py',225),
  ('returnPhrase -> GiveBack_KW numOrLetter Semicolon','returnPhrase',3,'p_returnPhrase_gns','parser.py',229),
  ('continue -> Continue_KW Semicolon','continue',2,'p_continue','parser.py',233),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression_a','parser.py',237),
  ('allExpression -> alterable PP','allExpression',2,'p_allExpression_pp','parser.py',241),
  ('allExpression -> alterable MM','allExpression',2,'p_allExpression_mm','parser.py',245),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression_e','parser.py',249),
  ('allExpression -> alterable mathOp alterable','allExpression',3,'p_allExpression_ama','parser.py',253),
  ('mathOp -> Equal','mathOp',1,'p_mathOp_e','parser.py',257),
  ('mathOp -> PlusEqual','mathOp',1,'p_mathOp_p','parser.py',261),
  ('mathOp -> MinusEqual','mathOp',1,'p_mathOp_mi','parser.py',265),
  ('mathOp -> TimesEqual','mathOp',1,'p_mathOp_t','parser.py',269),
  ('mathOp -> DivideEqual','mathOp',1,'p_mathOp_d','parser.py',273),
  ('eachExpression -> eachExpression logicOp eachExpression','eachExpression',3,'p_eachExpression_e','parser.py',277),
  ('eachExpression -> eachExpression logicOp Then_KW eachExpression','eachExpression',4,'p_eachExpression_et','parser.py',281),
  ('eachExpression -> logicOp eachExpression','eachExpression',2,'p_eachExpression_l','parser.py',285),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression_r','parser.py',289),
  ('eachExpression -> eachExpression logicOp Else_KW eachExpression','eachExpression',4,'p_eachExpression_ele','parser.py',293),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression_c','parser.py',297),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression_m','parser.py',301),
  ('compareType -> equal','compareType',1,'p_compareType_e','parser.py',305),
  ('compareType -> nonEqual','compareType',1,'p_compareType_n','parser.py',309),
  ('equal -> LEqual','equal',1,'p_equal_l','parser.py',313),
  ('equal -> GEqual','equal',1,'p_equal_g','parser.py',317),
  ('equal -> EEqual','equal',1,'p_equal_e','parser.py',322),
  ('nonEqual -> GreaterOP','nonEqual',1,'p_nonEqual_g','parser.py',327),
  ('nonEqual -> LessOP','nonEqual',1,'p_nonEqual_l','parser.py',332),
  ('nonEqual -> NonEqualOP','nonEqual',1,'p_nonEqual_n','parser.py',337),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP_u','parser.py',342),
  ('mathEXP -> mathEXP op mathEXP','mathEXP',3,'p_mathEXP_m','parser.py',347),
  ('op -> Plus','op',1,'p_op_p','parser.py',352),
  ('op -> Minus','op',1,'p_op_m','parser.py',357),
  ('op -> Times','op',1,'p_op_t','parser.py',363),
  ('op -> Divide','op',1,'p_op_d','parser.py',368),
  ('op -> ModeOP','op',1,'p_op_mo','parser.py',373),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression_u','parser.py',378),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression_f','parser.py',383),
  ('unaryop -> Minus','unaryop',1,'p_unaryop_m','parser.py',388),
  ('unaryop -> Times','unaryop',1,'p_unaryop_t','parser.py',393),
  ('unaryop -> QMark','unaryop',1,'p_unaryop_q','parser.py',398),
  ('factor -> inalterable','factor',1,'p_factor_i','parser.py',403),
  ('factor -> alterable','factor',1,'p_factor_a','parser.py',407),
  ('alterable -> numOrLetter','alterable',1,'p_alterable_n','parser.py',412),
  ('alterable -> alterable Opening_Bracket allExpression Closing_Bracket','alterable',4,'p_alterable_a','parser.py',417),
  ('alterable -> alterable Dot numOrLetter','alterable',3,'p_alterable_ad','parser.py',422),
  ('inalterable -> Opening_Parentheses allExpression Closing_Parentheses','inalterable',3,'p_inalterable_o','parser.py',427),
  ('inalterable -> constant','inalterable',1,'p_inalterable_c','parser.py',432),
  ('inalterable -> idLetter Opening_Parentheses args Closing_Parentheses','inalterable',4,'p_inalterable_i','parser.py',437),
  ('args -> arguments','args',1,'p_args_a','parser.py',442),
  ('args -> <empty>','args',0,'p_args_e','parser.py',447),
  ('arguments -> arguments Comma allExpression','arguments',3,'p_arguments_ar','parser.py',452),
  ('arguments -> allExpression','arguments',1,'p_arguments_al','parser.py',457),
  ('constant -> Const_KW','constant',1,'p_constant_C','parser.py',462),
  ('constant -> True_KW','constant',1,'p_constant_T','parser.py',467),
  ('constant -> False_KW','constant',1,'p_constant_F','parser.py',472),
  ('logicOp -> DoubleAnd','logicOp',1,'p_logicOp_DA','parser.py',477),
  ('logicOp -> DoubleOr','logicOp',1,'p_logicOp_DO','parser.py',482),
  ('logicOp -> Tilda','logicOp',1,'p_logicOp_T','parser.py',487),
  ('logicOp -> And_KW','logicOp',1,'p_logicOp_A','parser.py',492),
  ('logicOp -> Or_KW','logicOp',1,'p_logicOp_O','parser.py',497),
]
