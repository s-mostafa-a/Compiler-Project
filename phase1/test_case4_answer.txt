type 					 value 					 line 					 lexpos 
int_KW					int					46					1
idNum					1firstFunc					46					5
Opening_Parentheses					(					46					15
Closing_Parentheses					)					46					16
Opening_Brace					{					46					18
int_KW					int					47					20
idLetter					firstNum					47					24
Semicolon					;					47					33
int_KW					int					48					35
idLetter					secondNum					48					39
Semicolon					;					48					49
idLetter					firstNum					49					51
Equal					=					49					59
Num					5					49					61
Times					*					49					63
Num					10					49					65
Semicolon					;					49					68
idLetter					secondNum					49					70
Equal					=					49					79
idLetter					firstNum					49					81
PP					++					49					90
Semicolon					;					49					93
idLetter					Giveback					50					118
idLetter					secondNum					50					127
Closing_Brace					}					50					137
void_KW					void					51					139
idLetter					secondFunc					51					144
Opening_Parentheses					(					51					154
bool_KW					bool					51					155
idLetter					B					51					160
Semicolon					;					51					162
int_KW					int					51					164
idLetter					A					51					168
Closing_Parentheses					)					51					170
Opening_Brace					{					51					172
int_KW					int					51					174
idLetter					firstArray					51					178
Opening_Bracket					[					51					189
Num					5					51					190
Closing_Bracket					]					51					191
Semicolon					;					51					193
bool_KW					bool					52					195
idLetter					A1					52					200
Semicolon					;					52					203
bool_KW					bool					53					205
idLetter					A2					53					210
Semicolon					;					53					213
idLetter					A1					54					215
Equal					=					54					217
idLetter					firstNum					54					219
LEqual					<=					54					228
idLetter					secondNum					54					231
idLetter					A2					54					241
Equal					=					54					244
idLetter					B					54					246
Semicolon					;					54					248
If_KW					if					55					250
Opening_Parentheses					(					55					253
idLetter					A1					55					255
And_KW					and					55					258
idLetter					Then					55					262
idLetter					A2					55					267
Closing_Parentheses					)					55					270
Continue_KW					continue					55					272
Semicolon					;					55					281
idLetter					Other					56					283
Opening_Brace					{					57					289
int_KW					int					58					291
idLetter					B1					58					295
Semicolon					;					58					298
If_KW					if					59					300
Opening_Parentheses					(					59					303
idLetter					B1					59					304
LessOP					<					59					306
Num					5					59					307
Closing_Parentheses					)					59					308
Till_KW					till					59					310
Opening_Parentheses					(					59					314
idLetter					B1					59					315
NonEqualOP					!=					59					318
Num					5					59					321
Closing_Parentheses					)					59					322
idLetter					B1					59					324
PP					++					59					326
Semicolon					;					59					328
idLetter					If					60					330
Opening_Parentheses					(					60					333
idLetter					B1					60					334
EEqual					==					60					336
idLetter					A					60					339
Closing_Parentheses					)					60					340
idLetter					A2					60					342
Equal					=					60					345
False_KW					false					60					347
Semicolon					;					60					352
Closing_Brace					}					60					354
ComeBack_KW					comeBack					60					356
Semicolon					;					60					364
Closing_Brace					}					60					366
