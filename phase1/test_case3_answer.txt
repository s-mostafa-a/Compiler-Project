type 					 value 					 line 					 lexpos 
int_KW					int					31					1
idNum					1firstFunc					31					5
Opening_Parentheses					(					31					15
Closing_Parentheses					)					31					16
Opening_Brace					{					31					18
int_KW					int					32					20
idLetter					firstNum					32					24
Semicolon					;					32					33
int_KW					int					33					35
idLetter					secondNum					33					39
Semicolon					;					33					49
idLetter					firstNum					34					51
Equal					=					34					59
Num					5					34					61
Times					*					34					63
Num					10					34					65
Semicolon					;					34					68
idLetter					secondNum					34					70
Equal					=					34					79
idLetter					firstNum					34					81
PP					++					34					90
Semicolon					;					34					93
idLetter					Giveback					35					118
idLetter					secondNum					35					127
Closing_Brace					}					35					137
void_KW					void					36					139
idLetter					secondFunc					36					144
Opening_Parentheses					(					36					154
bool_KW					bool					36					155
idLetter					B					36					160
Semicolon					;					36					162
int_KW					int					36					164
idLetter					A					36					168
Closing_Parentheses					)					36					170
Opening_Brace					{					36					172
int_KW					int					36					174
idLetter					firstArray					36					178
Opening_Bracket					[					36					189
Num					5					36					190
Closing_Bracket					]					36					191
Semicolon					;					36					193
bool_KW					bool					37					195
idLetter					A1					37					200
Semicolon					;					37					203
bool_KW					bool					38					205
idLetter					A2					38					210
Semicolon					;					38					213
idLetter					A1					39					215
Equal					=					39					217
idLetter					firstNum					39					219
LEqual					<=					39					228
idLetter					secondNum					39					231
idLetter					A2					39					241
Equal					=					39					244
idLetter					B					39					246
Semicolon					;					39					248
If_KW					if					40					250
Opening_Parentheses					(					40					253
idLetter					A1					40					255
And_KW					and					40					258
idLetter					Then					40					262
idLetter					A2					40					267
Closing_Parentheses					)					40					270
Continue_KW					continue					40					272
Semicolon					;					40					281
idLetter					Other					41					283
Opening_Brace					{					42					289
int_KW					int					43					291
idLetter					B1					43					295
Semicolon					;					43					298
If_KW					if					44					300
Opening_Parentheses					(					44					303
idLetter					B1					44					304
LessOP					<					44					306
Num					5					44					307
Closing_Parentheses					)					44					308
Till_KW					till					44					310
Opening_Parentheses					(					44					314
idLetter					B1					44					315
NonEqualOP					!=					44					318
Num					5					44					321
Closing_Parentheses					)					44					322
idLetter					B1					44					324
PP					++					44					326
Semicolon					;					44					328
idLetter					If					45					330
Opening_Parentheses					(					45					333
idLetter					B1					45					334
EEqual					==					45					336
idLetter					A					45					339
Closing_Parentheses					)					45					340
idLetter					A2					45					342
Equal					=					45					345
False_KW					false					45					347
Semicolon					;					45					352
Closing_Brace					}					45					354
ComeBack_KW					comeBack					45					356
Semicolon					;					45					364
Closing_Brace					}					45					366
