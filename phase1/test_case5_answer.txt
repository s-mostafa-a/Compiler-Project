type 					 value 					 line 					 lexpos 
int_KW					int					61					1
idNum					1firstFunc					61					5
Opening_Parentheses					(					61					15
Closing_Parentheses					)					61					16
Opening_Brace					{					61					18
int_KW					int					62					20
idLetter					firstNum					62					24
Semicolon					;					62					33
int_KW					int					63					35
idLetter					secondNum					63					39
Semicolon					;					63					49
idLetter					firstNum					64					51
Equal					=					64					59
Num					5					64					61
Times					*					64					63
Num					10					64					65
Semicolon					;					64					68
idLetter					secondNum					64					70
Equal					=					64					79
idLetter					firstNum					64					81
PP					++					64					90
Semicolon					;					64					93
idLetter					Giveback					65					118
idLetter					secondNum					65					127
Closing_Brace					}					65					137
void_KW					void					66					139
idLetter					secondFunc					66					144
Opening_Parentheses					(					66					154
bool_KW					bool					66					155
idLetter					B					66					160
Semicolon					;					66					162
int_KW					int					66					164
idLetter					A					66					168
Closing_Parentheses					)					66					170
Opening_Brace					{					66					172
int_KW					int					66					174
idLetter					firstArray					66					178
Opening_Bracket					[					66					189
Num					5					66					190
Closing_Bracket					]					66					191
Semicolon					;					66					193
bool_KW					bool					67					195
idLetter					A1					67					200
Semicolon					;					67					203
bool_KW					bool					68					205
idLetter					A2					68					210
Semicolon					;					68					213
idLetter					A1					69					215
Equal					=					69					217
idLetter					firstNum					69					219
LEqual					<=					69					228
idLetter					secondNum					69					231
idLetter					A2					69					241
Equal					=					69					244
idLetter					B					69					246
Semicolon					;					69					248
If_KW					if					70					250
Opening_Parentheses					(					70					253
idLetter					A1					70					255
And_KW					and					70					258
idLetter					Then					70					262
idLetter					A2					70					267
Closing_Parentheses					)					70					270
Continue_KW					continue					70					272
Semicolon					;					70					281
idLetter					Other					71					283
Opening_Brace					{					72					289
int_KW					int					73					291
idLetter					B1					73					295
Semicolon					;					73					298
If_KW					if					74					300
Opening_Parentheses					(					74					303
idLetter					B1					74					304
LessOP					<					74					306
Num					5					74					307
Closing_Parentheses					)					74					308
Till_KW					till					74					310
Opening_Parentheses					(					74					314
idLetter					B1					74					315
NonEqualOP					!=					74					318
Num					5					74					321
Closing_Parentheses					)					74					322
idLetter					B1					74					324
PP					++					74					326
Semicolon					;					74					328
idLetter					If					75					330
Opening_Parentheses					(					75					333
idLetter					B1					75					334
EEqual					==					75					336
idLetter					A					75					339
Closing_Parentheses					)					75					340
idLetter					A2					75					342
Equal					=					75					345
False_KW					false					75					347
Semicolon					;					75					352
Closing_Brace					}					75					354
ComeBack_KW					comeBack					75					356
Semicolon					;					75					364
Closing_Brace					}					75					366
