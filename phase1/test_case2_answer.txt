type 					 value 					 line 					 lexpos 
int_KW					int					16					0
idNum					1firstFunc					16					4
Opening_Parentheses					(					16					14
Closing_Parentheses					)					16					15
Opening_Brace					{					16					17
int_KW					int					17					19
idLetter					firstNum					17					23
Semicolon					;					17					32
int_KW					int					18					34
idLetter					secondNum					18					38
Semicolon					;					18					48
idLetter					firstNum					19					50
Equal					=					19					58
Num					5					19					60
Times					*					19					62
Num					10					19					64
Semicolon					;					19					67
idLetter					secondNum					19					69
Equal					=					19					78
idLetter					firstNum					19					80
PP					++					19					89
Semicolon					;					19					92
idLetter					Giveback					20					117
idLetter					secondNum					20					126
Closing_Brace					}					20					136
void_KW					void					21					138
idLetter					secondFunc					21					143
Opening_Parentheses					(					21					153
bool_KW					bool					21					154
idLetter					B					21					159
Semicolon					;					21					161
int_KW					int					21					163
idLetter					A					21					167
Closing_Parentheses					)					21					169
Opening_Brace					{					21					171
int_KW					int					21					173
idLetter					firstArray					21					177
Opening_Bracket					[					21					188
Num					5					21					189
Closing_Bracket					]					21					190
Semicolon					;					21					192
bool_KW					bool					22					194
idLetter					A1					22					199
Semicolon					;					22					202
bool_KW					bool					23					204
idLetter					A2					23					209
Semicolon					;					23					212
idLetter					A1					24					214
Equal					=					24					216
idLetter					firstNum					24					218
LEqual					<=					24					227
idLetter					secondNum					24					230
idLetter					A2					24					240
Equal					=					24					243
idLetter					B					24					245
Semicolon					;					24					247
If_KW					if					25					249
Opening_Parentheses					(					25					252
idLetter					A1					25					254
And_KW					and					25					257
idLetter					Then					25					261
idLetter					A2					25					266
Closing_Parentheses					)					25					269
Continue_KW					continue					25					271
Semicolon					;					25					280
idLetter					Other					26					282
Opening_Brace					{					27					288
int_KW					int					28					290
idLetter					B1					28					294
Semicolon					;					28					297
If_KW					if					29					299
Opening_Parentheses					(					29					302
idLetter					B1					29					303
LessOP					<					29					305
Num					5					29					306
Closing_Parentheses					)					29					307
Till_KW					till					29					309
Opening_Parentheses					(					29					313
idLetter					B1					29					314
NonEqualOP					!=					29					317
Num					5					29					320
Closing_Parentheses					)					29					321
idLetter					B1					29					323
PP					++					29					325
Semicolon					;					29					327
idLetter					If					30					329
Opening_Parentheses					(					30					332
idLetter					B1					30					333
EEqual					==					30					335
idLetter					A					30					338
Closing_Parentheses					)					30					339
idLetter					A2					30					341
Equal					=					30					344
False_KW					false					30					346
Semicolon					;					30					351
Closing_Brace					}					30					353
ComeBack_KW					comeBack					30					355
Semicolon					;					30					363
Closing_Brace					}					30					365
